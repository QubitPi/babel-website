"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["6433"],{1095:function(e,t,s){s.r(t),s.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return r},metadata:function(){return n},toc:function(){return l}});var n=s(22099),i=s(24246),a=s(80980);let r={layout:"post",title:"7.6.0 Released: Private static accessors and V8 intrinsic syntax",authors:"nicol\xf2",date:new Date("2019-09-06T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.6.0 Released"},o=void 0,c={authorsImageUrls:[void 0]},l=[{value:"Private static accessors (getters and setters) (#10217)",id:"private-static-accessors-getters-and-setters-10217",level:2},{value:"V8 intrinsic runtime functions parsing (#10148)",id:"v8-intrinsic-runtime-functions-parsing-10148",level:2},{value:"Nullish coalescing operator (<code>??</code>) updates (#10269)",id:"nullish-coalescing-operator--updates-10269",level:2}];function h(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"We just released a new minor Babel version!"}),"\n",(0,i.jsxs)(t.p,{children:["It includes support for static private accessors in classes, and parser support for the V8 intrinsics syntax. We also fixed a bunch of long-standing issues related to TDZ handling, and improved support for do-expressions. You can read the whole changelog ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/releases/tag/v7.6.0",children:"on GitHub"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/skyiea",children:"Serhii Muryhin"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/epicfaace",children:"Ashwin Ramaswami"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/ifsnow",children:"Sungmin Lee"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/Sinewyk",children:"Serge Havas"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/zaygraveyard",children:"Ziad El Khoury Hanna"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/deificx",children:"Even Alander"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/banga",children:"Shrey Banga"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/dsgkirkby",children:"Dylan Kirkby"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/ajaysagar",children:"Ajay Sagar"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/AdamRamberg",children:"Adam Ramberg"}),", and ",(0,i.jsx)(t.a,{href:"https://github.com/rhyzx",children:"Bin Xin"})," for their first PRs! (And also thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/codetriage-readme-bot",children:"Codetriage README Bot"})," and ",(0,i.jsx)(t.a,{href:"https://help.github.com/en/articles/configuring-automated-security-fixes",children:"dependabot"})," \uD83E\uDD16)"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://github.com/bloomberg",children:(0,i.jsx)(t.strong,{children:"Bloomberg"})})," is continuing to sponsor the implementation of new class features in Babel: after giving us a lot of new class features (",(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2018/09/17/7.1.0#private-static-fields-stage-3",children:"static private fields"}),", ",(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2018/12/03/7.2.0#private-instance-methods-8654-https-githubcom-babel-babel-pull-8654",children:"private instance methods"}),", ",(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2019/01/21/7.3.0#private-instance-accessors-getters-and-setters-9101-https-githubcom-babel-babel-pull-9101",children:"private instance accessors"}),", and ",(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2019/03/19/7.4.0#static-private-methods-9446-https-githubcom-babel-babel-pull-9446",children:"static private methods"}),"), they've just implemented static private getters and setters."]}),"\n",(0,i.jsxs)(t.p,{children:["Another big shout out goes to ",(0,i.jsx)(t.a,{href:"https://frontendmasters.com/",children:(0,i.jsx)(t.strong,{children:"Frontend Masters"})})," for making two big donations this past month, as well as all ",(0,i.jsx)(t.a,{href:"https://opencollective.com/babel#contributors",children:"our other sponsors"})," who allow the Babel team to spend more time on the project!"]}),"\n",(0,i.jsxs)(t.p,{children:["If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on ",(0,i.jsx)(t.a,{href:"https://opencollective.com/babel",children:"OpenCollective"})," and, better yet, work with us on the implementation of ",(0,i.jsx)(t.a,{href:"https://github.com/babel/proposals",children:"new ECMAScript proposals"})," directly! As a volunteer-driven project, we rely on the community's support to both fund our efforts in supporting the wide range of JavaScript users and taking ownership of the code. Reach out to Henry at ",(0,i.jsx)(t.a,{href:"mailto:henry@babeljs.io",children:"henry@babeljs.io"})," if you'd like to talk more!"]}),"\n",(0,i.jsxs)(t.h2,{id:"private-static-accessors-getters-and-setters-10217",children:["Private static accessors (getters and setters) (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10217",children:"#10217"}),")"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"class Resource {\n  static #loaderInstance = null;\n\n  static get #loader() {\n    if (!this.#loaderInstance) this.#loaderInstance = new Loader();\n    return this.#loaderInstance;\n  }\n\n  status = null;\n\n  constructor(url) {\n    this.status = Resource.#loader.load(url);\n  }\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/tim-mc",children:"Tim"})," (Bloomberg) for implementing this proposal!"]}),"\n",(0,i.jsxs)(t.p,{children:["You can test this new feature by adding ",(0,i.jsx)(t.code,{children:"@babel/plugin-proposal-private-methods"})," to your config, if you haven't already added it, or by enabling the ",(0,i.jsx)(t.code,{children:"stage-3"})," preset in the online ",(0,i.jsx)(t.a,{href:"https://babeljs.io/repl/build/main#?presets=stage-3",children:"repl"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Class private features support is finally complete \uD83C\uDF89"}),"\n",(0,i.jsx)("div",{style:{margin:"auto",width:"fit-content"},children:(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Class Private"}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Instance"})}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Static"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"Fields"})," ",(0,i.jsx)("br",{})," ",(0,i.jsx)(t.code,{children:"class A { #a = 1 }"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2018/08/27/7.0.0#tc39-proposals-https-githubcom-tc39-proposals-support",children:"7.0.0"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2018/09/17/7.1.0#private-static-fields-stage-3",children:"7.1.0"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"Methods"})," ",(0,i.jsx)("br",{})," ",(0,i.jsx)(t.code,{children:"class A { #a() {} }"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2018/12/03/7.2.0#private-instance-methods-8654-https-githubcom-babel-babel-pull-8654",children:"7.2.0"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2019/03/19/7.4.0#static-private-methods-9446-https-githubcom-babel-babel-pull-9446",children:"7.4.0"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"Accessors"})," ",(0,i.jsx)("br",{})," ",(0,i.jsx)(t.code,{children:"class A { get #a() {} }"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2019/01/21/7.3.0#private-instance-accessors-getters-and-setters-9101-https-githubcom-babel-babel-pull-9101",children:"7.3.0"})}),(0,i.jsx)(t.td,{children:"7.6.0"})]})]})]})}),"\n",(0,i.jsx)("div",{style:{margin:"auto",width:"fit-content"},children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://media.giphy.com/media/3KC2jD2QcBOSc/source.gif",alt:"It's time to party!"})})}),"\n",(0,i.jsxs)(t.h2,{id:"v8-intrinsic-runtime-functions-parsing-10148",children:["V8 intrinsic runtime functions parsing (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10148",children:"#10148"}),")"]}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsxs)(t.p,{children:["This is a non-standard extension to the language, which can only be used in V8 when enabling the ",(0,i.jsx)(t.code,{children:"--allow-natives-syntax"})," command-line flag."]})}),"\n",(0,i.jsxs)(t.p,{children:["V8, the JavaScript engine used by Node.js and Chromium-based browsers, can expose various pieces of internal functionality as JavaScript functions. Although these APIs must not be used in production JavaScript code, these special functions ",(0,i.jsx)(t.em,{children:"can"})," be useful in testing and debugging scenarios \u2014 for example, to understand how your JavaScript values are represented in memory, or to call some ECMAScript specification routines directly."]}),"\n",(0,i.jsxs)(t.p,{children:["These so-called \u201CV8 intrinsics\u201D have a different syntax than normal functions: their name always starts with ",(0,i.jsx)(t.code,{children:"%"}),". Also, they can only be directly called and never used as normal values (you can't, for example, assign them to another variable)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'function fn() { /* ... */ }\n\nconst status = %GetOptimizationStatus(fn);\n\nif (status === 2) {\n  console.log("The function is not optimized!");\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You can find the whole list of existing V8 intrinsics in ",(0,i.jsx)(t.a,{href:"https://github.com/v8/v8/blob/master/src/runtime/runtime.h",children:"V8's source code"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["You can enable this syntax in ",(0,i.jsx)(t.code,{children:"@babel/parser"})," by using the ",(0,i.jsx)(t.code,{children:"v8intrinsic"})," plugin:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const { parse } = require("@babel/parser");\n\nparse(code, {\n  plugins: ["v8intrinsic"]\n})\n'})}),"\n",(0,i.jsxs)(t.h2,{id:"nullish-coalescing-operator--updates-10269",children:["Nullish coalescing operator (",(0,i.jsx)(t.code,{children:"??"}),") updates (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10269",children:"#10269"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["The nullish coalescing stage 3 proposal recently got some updates: to avoid confusion over precedence with other logical operators (",(0,i.jsx)(t.code,{children:"&&"})," and ",(0,i.jsx)(t.code,{children:"||"}),"), the spec has been changed to disallow mixing them."]}),"\n",(0,i.jsx)(t.p,{children:"This means that the following expressions are now invalid:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"a ?? b || c;\na && b ?? c;\n"})}),"\n",(0,i.jsx)(t.p,{children:"Instead, you should add parentheses where appropriate:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"(a ?? b) || c; /* or */ a ?? (b || c);\n(a && b) ?? c; /* or */ a && (b ?? c);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This is similar to how unary minus (",(0,i.jsx)(t.code,{children:"-"}),") and the exponentiation operator (",(0,i.jsx)(t.code,{children:"**"}),") interact: you can't write ",(0,i.jsx)(t.code,{children:"-1 ** 2"}),", but you have to choose between ",(0,i.jsx)(t.code,{children:"(-1) ** 2"})," and ",(0,i.jsx)(t.code,{children:"-(1 ** 2)"}),"."]})]})}function d(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},80980:function(e,t,s){s.d(t,{Z:function(){return o},a:function(){return r}});var n=s(27378);let i={},a=n.createContext(i);function r(e){let t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}},22099:function(e){e.exports=JSON.parse('{"permalink":"/babel-website/blog/2019/09/05/7.6.0","source":"@site/blog/2019-09-05-7.6.0.md","title":"7.6.0 Released: Private static accessors and V8 intrinsic syntax","description":"We just released a new minor Babel version!","date":"2019-09-06T00:00:00.000Z","tags":[],"readingTime":3.65,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo","key":"nicol\xf2","page":null}],"frontMatter":{"layout":"post","title":"7.6.0 Released: Private static accessors and V8 intrinsic syntax","authors":"nicol\xf2","date":"2019-09-06T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.6.0 Released"},"unlisted":false,"prevItem":{"title":"7.7.0 Released: Error recovery and TypeScript 3.7","permalink":"/babel-website/blog/2019/11/05/7.7.0"},"nextItem":{"title":"7.5.0 Released: dynamic import and F# pipelines","permalink":"/babel-website/blog/2019/07/03/7.5.0"}}')}}]);