"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["94340"],{66790:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var s=n(49848),i=n(24246),r=n(80980);let l={layout:"post",title:"7.8.0 Released: ECMAScript 2020, .mjs configuration files and @babel/cli improvements",authors:"nicol\xf2",date:new Date("2020-01-11T20:00:00.000Z"),categories:"announcements",share_text:"Babel 7.8.0 Released"},o=void 0,a={authorsImageUrls:[void 0]},c=[{value:"ECMAScript 2020 default support (#10811, #10817, #10819, #10843)",id:"ecmascript-2020-default-support-10811-10817-10819-10843",level:2},{value:"Support every configuration file extension (#10783 and #10903)",id:"support-every-configuration-file-extension-10783-and-10903",level:2},{value:"New CLI options (#9144 and #10887)",id:"new-cli-options-9144-and-10887",level:2},{value:"Preparing for Babel 8",id:"preparing-for-babel-8",level:2},{value:"Extract targets parser and compat data from preset-env (#10899)",id:"extract-targets-parser-and-compat-data-from-preset-env-10899",level:3},{value:"Introduce opt-in stricter AST validation (#10917)",id:"introduce-opt-in-stricter-ast-validation-10917",level:3}];function d(e){let t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"This is the first release of the year! \uD83C\uDF89"}),"\n",(0,i.jsxs)(t.p,{children:["Babel 7.8.0 supports the new ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/proposals/blob/master/finished-proposals.md",children:"ECMAScript 2020"})," features by default: you don't need to enable individual plugins for nullish coalescing (",(0,i.jsx)(t.code,{children:"??"}),"), optional chaining (",(0,i.jsx)(t.code,{children:"?."}),") and dynamic ",(0,i.jsx)(t.code,{children:"import()"})," anymore with preset-env."]}),"\n",(0,i.jsxs)(t.p,{children:["We also finished aligning our different configuration files with the formats natively supported by Node.js, a process that we started in the ",(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2019/11/05/7.7.0#new-configuration-file-extensions-10501-https-githubcom-babel-babel-pull-10501-10599-https-githubcom-babel-babel-pull-10599",children:"7.7.0 release"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Lastly, Babel's CLI now supports two new options: ",(0,i.jsx)(t.code,{children:"--out-file-extension"})," and ",(0,i.jsx)(t.code,{children:"--copy-ignored"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["You can read the whole changelog ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/releases/tag/v7.8.0",children:"on GitHub"}),"."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.p,{children:["Shoutout to ",(0,i.jsx)(t.a,{href:"https://github.com/AbdulAli19",children:"Abdul Ali"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/jackisherwood",children:"Jack Isherwood"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/jayenashar",children:"Jayen Ashar"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/Druotic",children:"James Beavers"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/ajafff",children:"Klaus Meinhardt"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/layershifter",children:"Oleksandr Fediashov"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/sidntrivedi012",children:"Siddhant N Trivedi"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/bassaer",children:"Tsubasa Nakayama"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/yordis",children:"Yordis Prieto"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/ZYSzys",children:"ZYSzys"})," for their first PRs!"]}),"\n",(0,i.jsxs)(t.p,{children:["We also want to thank ",(0,i.jsx)(t.a,{href:"https://github.com/Thom1729",children:"Thomas Smith"})," for volunteering to help us maintain the important ",(0,i.jsx)(t.a,{href:"https://packagecontrol.io/packages/Babel",children:(0,i.jsx)(t.code,{children:"babel-sublime"})})," syntax highlighter plugin, and welcome ",(0,i.jsx)(t.a,{href:"https://github.com/rajasekarm",children:"Raja Sekar"}),", our newest addition to the Babel organization!"]}),"\n",(0,i.jsxs)(t.p,{children:["If you or your company wants to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on our ",(0,i.jsx)(t.a,{href:"https://opencollective.com/babel",children:"Open Collective"})," and, better yet, work with us on the implementation of ",(0,i.jsx)(t.a,{href:"https://github.com/babel/proposals",children:"new ECMAScript proposals"})," directly! As a volunteer-driven project, we rely on the community's support to fund our efforts in supporting the wide range of JavaScript users. Reach out at ",(0,i.jsx)(t.a,{href:"mailto:team@babeljs.io",children:"team@babeljs.io"})," if you'd like to discuss more!"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["We recently published a ",(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2019/11/08/babels-funding-plans",children:"funding post"})," detailing our funding plans and our goals. Check it out!"]}),"\n"]}),"\n",(0,i.jsxs)(t.h2,{id:"ecmascript-2020-default-support-10811-10817-10819-10843",children:["ECMAScript 2020 default support (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10811",children:"#10811"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10817",children:"#10817"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10819",children:"#10819"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10843",children:"#10843"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["During the last ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/agendas/blob/master/2019/12.md",children:"meeting"}),", TC39 moved both the nullish coalescing and optional chaining proposals to Stage 4!"]}),"\n",(0,i.jsxs)(t.p,{children:["The nullish coalescing operator allows you to provide a fallback value when an expression evaluates to ",(0,i.jsx)(t.code,{children:"null"})," or ",(0,i.jsx)(t.code,{children:"undefined"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const name = person.fullName ?? "Anonymous";\nconsole.log(`Hello, ${name}!`);\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This is similar to how the logical OR (",(0,i.jsx)(t.code,{children:"||"}),") operator works. The difference is that while ",(0,i.jsx)(t.code,{children:"||"}),' checks for "falsy" values (i.e. ',(0,i.jsx)(t.code,{children:"undefined"}),", ",(0,i.jsx)(t.code,{children:"null"}),", ",(0,i.jsx)(t.code,{children:"false"}),", ",(0,i.jsx)(t.code,{children:"0"}),", ",(0,i.jsx)(t.code,{children:"0n"})," and ",(0,i.jsx)(t.code,{children:'""'}),"), ",(0,i.jsx)(t.code,{children:"??"}),' only checks for "nullish" values. This better matches the "value not provided" mental model, and works better with possibly falsy, but valid, values:']}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const element = { index: 0, value: "foo" };\n\nconst index = element.index ?? -1; //  0 :D\nconst index = element.index || -1; // -1 :(\n'})}),"\n",(0,i.jsx)(t.p,{children:'The optional chaining proposal uses the same concept of "nullish values", allowing optional property accesses on values which could be nullish. It also supports optional function calls and computed properties.'}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const city = person.address?.city; // person.address could be not defined\nconst isNeighbor = person.address?.isCloseTo(me);\n\nperson.sayHayUsing?.("Twitter"); // The person.sayHayUsing method could be not defined\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You can now safely use these new features in your code! If you are already using ",(0,i.jsx)(t.code,{children:"@babel/preset-env"}),", you can use these two operators and they will be compiled based on your targets, just like any other ECMAScript feature. If you were using the ",(0,i.jsx)(t.code,{children:"@babel/plugin-proposal-nullish-coalescing-operator"})," or ",(0,i.jsx)(t.code,{children:"@babel/plugin-proposal-optional-chaining"})," directly, you can remove them from your config:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:'{\n  "presets": [\n    ["@babel/env", { "targets": ["last 2 versions"] }]\n  ],\n  "plugins": [\n-   "@babel/proposal-optional-chaining",\n-   "@babel/proposal-nullish-coalescing-operator"\n  ]\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["These features are now also enabled by default in ",(0,i.jsx)(t.code,{children:"@babel/parser"}),": if you were using it directly, you can remove the ",(0,i.jsx)(t.code,{children:"nullishCoalescingOperator"})," and ",(0,i.jsx)(t.code,{children:"optionalChaining"})," parser plugins. We also enabled parsing for dynamic ",(0,i.jsx)(t.code,{children:"import()"})," (which has been included in ",(0,i.jsx)(t.code,{children:"@babel/preset-env"})," since ",(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2019/07/03/7.5.0#dynamic-import-9552-https-githubcom-babel-babel-pull-9552-and-10109-https-githubcom-babel-babel-pull-10109",children:"v7.5.0"}),"), so you can safely remove the ",(0,i.jsx)(t.code,{children:"dynamicImport"})," plugin."]}),"\n",(0,i.jsxs)(t.h2,{id:"support-every-configuration-file-extension-10783-and-10903",children:["Support every configuration file extension (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10783",children:"#10783"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10903",children:"#10903"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Babel 6 supported a single, JSON-based, configuration file: ",(0,i.jsx)(t.code,{children:".babelrc"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["In Babel 7.0.0, we introduced ",(0,i.jsx)(t.code,{children:"babel.config.js"})," (which has ",(0,i.jsx)(t.a,{href:"https://babeljs.io/docs/en/config-files",children:"different resolution logic"}),") and ",(0,i.jsx)(t.code,{children:".babelrc.js"}),". JavaScript config files can be useful for scenarios needing higher flexibility. This was the situation:"]}),"\n",(0,i.jsx)("div",{style:{margin:"auto",width:"fit-content"},children:(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:"Node.js file type"})}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:"babel.config.__"})}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:".babelrc.__"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:".js"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:".json"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u274C Not supported"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2754 Supported, with implicit extension"})]})]})]})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["We strongly recommend reading about the differences between ",(0,i.jsxs)(t.a,{href:"https://babeljs.io/docs/en/config-files",children:[(0,i.jsx)(t.code,{children:"babel.config.js"})," and ",(0,i.jsx)(t.code,{children:".babelrc.js"})]}),"!"]})}),"\n",(0,i.jsxs)(t.p,{children:["More recently, Node.js 13.2.0 was released, adding support for native ECMAScript modules and the ",(0,i.jsx)(t.code,{children:".cjs"})," and ",(0,i.jsx)(t.code,{children:".mjs"})," file extensions. In Babel 7.7.0 we added support for ",(0,i.jsx)(t.code,{children:".cjs"})," config files to allow users to enable ",(0,i.jsx)(t.code,{children:'"type": "module"'})," in their ",(0,i.jsx)(t.code,{children:"package.json"})," without breaking Babel, as well as support for ",(0,i.jsx)(t.code,{children:"babel.config.json"}),", which allows for static project-wide configuration."]}),"\n",(0,i.jsx)("div",{style:{margin:"auto",width:"fit-content"},children:(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:"Node.js file type"})}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:"babel.config.__"})}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:".babelrc.__"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:".js"})}),(0,i.jsxs)(t.td,{style:{textAlign:"center"},children:["\u2714\uFE0F Supported when ",(0,i.jsx)(t.code,{children:'"type": "module"'})," is not enabled"]}),(0,i.jsxs)(t.td,{style:{textAlign:"center"},children:["\u2714\uFE0F Supported when ",(0,i.jsx)(t.code,{children:'"type": "module"'})," is not enabled"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:".json"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2754 Supported, with implicit extension"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:".cjs"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:".mjs"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u274C Not supported"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u274C Not supported"})]})]})]})}),"\n",(0,i.jsxs)(t.p,{children:["This release aligns Babel with the file types natively supported by Node.js by allowing ",(0,i.jsx)(t.code,{children:".babelrc.json"}),", ",(0,i.jsx)(t.code,{children:"babel.config.mjs"}),", and ",(0,i.jsx)(t.code,{children:".babelrc.mjs"}),"."]}),"\n",(0,i.jsx)("div",{style:{margin:"auto",width:"fit-content"},children:(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:"Node.js file type"})}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:"babel.config.__"})}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:".babelrc.__"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:".js"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:".json"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:".cjs"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:".mjs"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\uFE0F Supported"})]})]})]})}),"\n",(0,i.jsxs)(t.p,{children:["Please remember that ECMAScript modules are ",(0,i.jsx)(t.strong,{children:"asynchronous"}),": that's why, for example, you can't ",(0,i.jsx)(t.code,{children:"require()"})," them and instead have to use ",(0,i.jsx)(t.code,{children:"import()"}),", which returns a promise."]}),"\n",(0,i.jsxs)(t.p,{children:["For these reasons, they can only be used when calling Babel via the promise-based or callback-based entry points. They already work with ",(0,i.jsx)(t.code,{children:"@babel/cli"}),", ",(0,i.jsx)(t.code,{children:"babel-loader"})," and ",(0,i.jsx)(t.code,{children:"gulp-babel"}),", and they will work with the next release of ",(0,i.jsx)(t.code,{children:"rollup-plugin-babel"}),". Note that they are not supported by ",(0,i.jsx)(t.code,{children:"babel-eslint"})," yet."]}),"\n",(0,i.jsxs)(t.h2,{id:"new-cli-options-9144-and-10887",children:["New CLI options (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/9144",children:"#9144"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10887",children:"#10887"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["We added two new flags to ",(0,i.jsx)(t.code,{children:"@babel/cli"}),": ",(0,i.jsx)(t.code,{children:"--copy-ignored"})," and ",(0,i.jsx)(t.code,{children:"--out-file-extension"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"--copy-ignored"})," can be used to copy files that are not transpiled by Babel, either because they are ignored using the ",(0,i.jsx)(t.code,{children:"--ignore"})," CLI option, or because ",(0,i.jsx)(t.code,{children:'"ignore"'})," is set in a configuration file."]}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsxs)(t.p,{children:["To maintain backward compatibility, in Babel 7.8.4 the default value of the ",(0,i.jsx)(t.code,{children:"--copy-ignored"})," option has been changed to ",(0,i.jsx)(t.code,{children:"true"}),". If you want to disable it, you can use ",(0,i.jsx)(t.code,{children:"--no-copy-ignored"}),"."]})}),"\n",(0,i.jsxs)(t.p,{children:["This is similar to how the ",(0,i.jsx)(t.code,{children:"--copy-files"})," option works, but ",(0,i.jsx)(t.code,{children:"--copy-files"})," is meant to copy anything which is not transpiled because it isn't a JavaScript file (for example, ",(0,i.jsx)(t.code,{children:".css"})," or ",(0,i.jsx)(t.code,{children:".json"}),"), rather than explicitly ignored files."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"--out-file-extension"})," can be used to configure the extension of the files generated by Babel. For example, if you are transpiling ",(0,i.jsx)(t.code,{children:".js"})," files containing native ECMAScript modules in Node.js and want to generate CommonJS files, you might need to use the ",(0,i.jsx)(t.code,{children:".cjs"})," extension:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",metastring:'title="Shell"',children:"$ babel src --out-dir lib-cjs --out-file-extension cjs\n"})}),"\n",(0,i.jsx)(t.h2,{id:"preparing-for-babel-8",children:"Preparing for Babel 8"}),"\n",(0,i.jsxs)(t.p,{children:["We are starting to work on the Babel 8.0.0 release in our umbrella issue: ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/issues/10746",children:"#10746"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Babel 8 will only contain breaking changes: we will release a minor version the same day, containing all the bug fixes and new features that would otherwise be released in 8.0.0."}),"\n",(0,i.jsx)(t.p,{children:"While we don't anticipate a huge migration path, there are two issues which we want to bring to your attention:"}),"\n",(0,i.jsxs)(t.h3,{id:"extract-targets-parser-and-compat-data-from-preset-env-10899",children:["Extract targets parser and compat data from preset-env (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10899",children:"#10899"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Various 3rd party presets are currently using ",(0,i.jsx)(t.code,{children:"@babel/preset-env"}),"'s internal logic to parse compilation targets or to retrieve information about necessary plugins and polyfills."]}),"\n",(0,i.jsx)(t.p,{children:"We have decided to officially support these two use cases by providing two new public packages:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"@babel/helper-compilation-targets"}),", which exports a function to normalize the specified targets and a few other related utilities:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'import getTargets from "@babel/helper-compilation-targets";\n\ngetTargets({\n  browsers: ["last 2 chrome versions"],\n  node: 10,\n}) ==\n  {\n    chrome: "77.0.0",\n    node: "10.0.0",\n  };\n'})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"@babel/compat-data"}),", which contains a collection of JSON files where we store all the browsers versions for which each plugin or ",(0,i.jsx)(t.code,{children:"core-js@2"})," polyfill is required. It's mostly generated from ",(0,i.jsx)(t.a,{href:"https://kangax.github.io/compat-table/",children:(0,i.jsx)(t.code,{children:"compat-table"})}),", but we might add other data sources in the future.\nIf you need data for ",(0,i.jsx)(t.code,{children:"core-js@3"})," polyfills, you can use ",(0,i.jsx)(t.a,{href:"https://www.npmjs.com/package/core-js-compat",children:(0,i.jsx)(t.code,{children:"core-js-compat"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"We plan to disallow using internal files starting from Babel 8. If you are relying on other internal APIs, please let us know!"}),"\n",(0,i.jsxs)(t.h3,{id:"introduce-opt-in-stricter-ast-validation-10917",children:["Introduce opt-in stricter AST validation (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10917",children:"#10917"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"@babel/types"})," already performs many checks to ensure that the AST you are building is valid. For example, this code will throw because you can't use a statement in place of an expression:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'// foo = if (true) {}\n\nt.assignmentExpression(\n  "=",\n  t.identifier("foo"),\n  t.ifStatement(t.booleanLiteral(true), t.blockStatement([]))\n);\n'})}),"\n",(0,i.jsxs)(t.p,{children:["We are introducing stricter validation to prevent even more invalid ASTs: not only from a tree shape point of view but also ensuring that nodes in the correct position carry valid information. For example, starting from Babel 8 ",(0,i.jsx)(t.code,{children:'t.identifier("123")'})," will be disallowed, because ",(0,i.jsx)(t.code,{children:"123"})," is not a valid identifier."]}),"\n",(0,i.jsxs)(t.p,{children:["We can't enable these checks in Babel 7.8.0 because the risk of breaking existing plugins is too high, but we highly encourage you to enable these stricter checks using the ",(0,i.jsx)(t.code,{children:"BABEL_TYPES_8_BREAKING=true"})," environment variable and open issues (or better, PRs!) to fix the plugins that you are using which won't work with Babel 8."]})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},80980:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return l}});var s=n(27378);let i={},r=s.createContext(i);function l(e){let t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}},49848:function(e){e.exports=JSON.parse('{"permalink":"/blog/2020/01/11/7.8.0","source":"@site/blog/2020-01-11-7.8.0.md","title":"7.8.0 Released: ECMAScript 2020, .mjs configuration files and @babel/cli improvements","description":"This is the first release of the year! \uD83C\uDF89","date":"2020-01-11T20:00:00.000Z","tags":[],"readingTime":7.42,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo","key":"nicol\xf2","page":null}],"frontMatter":{"layout":"post","title":"7.8.0 Released: ECMAScript 2020, .mjs configuration files and @babel/cli improvements","authors":"nicol\xf2","date":"2020-01-11T20:00:00.000Z","categories":"announcements","share_text":"Babel 7.8.0 Released"},"unlisted":false,"prevItem":{"title":"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform","permalink":"/blog/2020/03/16/7.9.0"},"nextItem":{"title":"Babel\'s Funding Plans","permalink":"/blog/2019/11/08/babels-funding-plans"}}')}}]);