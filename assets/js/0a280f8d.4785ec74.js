"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9657],{35318:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return k}});var a=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=s(n),c=i,k=m["".concat(p,".").concat(c)]||m[c]||u[c]||l;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=c;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[m]="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},97112:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return m}});var a=n(25773),i=n(30808),l=(n(27378),n(35318)),o=["components"],r={title:"Options",id:"options",sidebar_label:"Config Options"},p=void 0,s={unversionedId:"options",id:"options",title:"Options",description:"- Primary options",source:"@site/../docs/options.md",sourceDirName:".",slug:"/options",permalink:"/babel-website/docs/options",draft:!1,editUrl:"https://github.com/babel/website/edit/main/docs/../docs/options.md",tags:[],version:"current",frontMatter:{title:"Options",id:"options",sidebar_label:"Config Options"},sidebar:"docs",previous:{title:"Config Files",permalink:"/babel-website/docs/config-files"},next:{title:"Presets",permalink:"/babel-website/docs/presets"}},d={},m=[{value:"Primary options",id:"primary-options",level:2},{value:"<code>cwd</code>",id:"cwd",level:3},{value:"<code>caller</code>",id:"caller",level:3},{value:"<code>filename</code>",id:"filename",level:3},{value:"<code>filenameRelative</code>",id:"filenamerelative",level:3},{value:"<code>code</code>",id:"code",level:3},{value:"<code>ast</code>",id:"ast",level:3},{value:"<code>cloneInputAst</code>",id:"cloneinputast",level:3},{value:"Config Loading options",id:"config-loading-options",level:2},{value:"<code>root</code>",id:"root",level:3},{value:"<code>rootMode</code>",id:"rootmode",level:3},{value:"<code>envName</code>",id:"envname",level:3},{value:"<code>configFile</code>",id:"configfile",level:3},{value:"<code>babelrc</code>",id:"babelrc",level:3},{value:"<code>babelrcRoots</code>",id:"babelrcroots",level:3},{value:"Plugin and Preset options",id:"plugin-and-preset-options",level:2},{value:"<code>plugins</code>",id:"plugins",level:3},{value:"<code>presets</code>",id:"presets",level:3},{value:"<code>passPerPreset</code>",id:"passperpreset",level:3},{value:"Output targets",id:"output-targets",level:2},{value:"<code>targets</code>",id:"targets",level:3},{value:"No targets",id:"no-targets",level:4},{value:"<code>targets.esmodules</code>",id:"targetsesmodules",level:4},{value:"<code>targets.node</code>",id:"targetsnode",level:4},{value:"<code>targets.safari</code>",id:"targetssafari",level:4},{value:"<code>targets.browsers</code>",id:"targetsbrowsers",level:4},{value:"<code>targets.deno</code>",id:"targetsdeno",level:4},{value:"<code>browserslistConfigFile</code>",id:"browserslistconfigfile",level:3},{value:"<code>browserslistEnv</code>",id:"browserslistenv",level:3},{value:"Config Merging options",id:"config-merging-options",level:2},{value:"<code>extends</code>",id:"extends",level:3},{value:"<code>env</code>",id:"env",level:3},{value:"<code>overrides</code>",id:"overrides",level:3},{value:"<code>test</code>",id:"test",level:3},{value:"<code>include</code>",id:"include",level:3},{value:"<code>exclude</code>",id:"exclude",level:3},{value:"<code>ignore</code>",id:"ignore",level:3},{value:"<code>only</code>",id:"only",level:3},{value:"Source Map options",id:"source-map-options",level:2},{value:"<code>inputSourceMap</code>",id:"inputsourcemap",level:3},{value:"<code>sourceMaps</code>",id:"sourcemaps",level:3},{value:"<code>sourceMap</code>",id:"sourcemap",level:3},{value:"<code>sourceFileName</code>",id:"sourcefilename",level:3},{value:"<code>sourceRoot</code>",id:"sourceroot",level:3},{value:"Misc options",id:"misc-options",level:2},{value:"<code>sourceType</code>",id:"sourcetype",level:3},{value:"<code>assumptions</code>",id:"assumptions",level:3},{value:"<code>highlightCode</code>",id:"highlightcode",level:3},{value:"<code>wrapPluginVisitorMethod</code>",id:"wrappluginvisitormethod",level:3},{value:"<code>parserOpts</code>",id:"parseropts",level:3},{value:"<code>generatorOpts</code>",id:"generatoropts",level:3},{value:"Code Generator options",id:"code-generator-options",level:2},{value:"<code>retainLines</code>",id:"retainlines",level:3},{value:"<code>compact</code>",id:"compact",level:3},{value:"<code>minified</code>",id:"minified",level:3},{value:"<code>auxiliaryCommentBefore</code>",id:"auxiliarycommentbefore",level:3},{value:"<code>auxiliaryCommentAfter</code>",id:"auxiliarycommentafter",level:3},{value:"<code>comments</code>",id:"comments",level:3},{value:"<code>shouldPrintComment</code>",id:"shouldprintcomment",level:3},{value:"Advanced Usage",id:"advanced-usage",level:3},{value:"AMD / UMD / SystemJS module options",id:"amd--umd--systemjs-module-options",level:2},{value:"<code>moduleIds</code>",id:"moduleids",level:3},{value:"<code>moduleId</code>",id:"moduleid",level:3},{value:"<code>getModuleId</code>",id:"getmoduleid",level:3},{value:"<code>moduleRoot</code>",id:"moduleroot",level:3},{value:"Options Concepts",id:"options-concepts",level:2},{value:"<code>MatchPattern</code>",id:"matchpattern",level:3},{value:"Merging",id:"merging",level:3},{value:"Plugin/Preset entries",id:"pluginpreset-entries",level:3},{value:"<code>PluginEntry</code> / <code>PresetEntry</code>",id:"pluginentry--presetentry",level:4},{value:"<code>EntryTarget</code>",id:"entrytarget",level:4},{value:"<code>EntryOptions</code>",id:"entryoptions",level:4},{value:"Name Normalization",id:"name-normalization",level:3}],u={toc:m};function c(e){var t=e.components,n=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#primary-options"},"Primary options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#config-loading-options"},"Config Loading options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#plugin-and-preset-options"},"Plugin and Preset configuration")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#config-merging-options"},"Config Merging options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#source-map-options"},"Source Map options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#misc-options"},"Misc options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#code-generator-options"},"Code Generator options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#amd--umd--systemjs-module-options"},"AMD / UMD / SystemJS options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#options-concepts"},"Option concepts"))),(0,l.kt)("p",null,"Options can be passed to Babel in a variety of ways. When passed directly to Babel,\nyou can just pass the options object. When Babel is used via a wrapper, it may also be\nnecessary, or at least more useful, to pass the options via ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/config-files"},"configuration files"),"."),(0,l.kt)("p",null,"If passing options via ",(0,l.kt)("inlineCode",{parentName:"p"},"@babel/cli")," you'll need to ",(0,l.kt)("inlineCode",{parentName:"p"},"kebab-case")," the names. i.e."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"npx babel --root-mode upward file.js # equivalent of passing the rootMode config option\n")),(0,l.kt)("h2",{id:"primary-options"},"Primary options"),(0,l.kt)("p",null,"These options are only allowed as part of Babel's programmatic options, so\nthey are primarily for use by tools that wrap around Babel, or people calling\n",(0,l.kt)("inlineCode",{parentName:"p"},"babel.transform")," directly. Users of Babel's integrations, like ",(0,l.kt)("inlineCode",{parentName:"p"},"babel-loader"),"\nor ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-core#options"},(0,l.kt)("inlineCode",{parentName:"a"},"@babel/register"))," are unlikely to use these."),(0,l.kt)("h3",{id:"cwd"},(0,l.kt)("inlineCode",{parentName:"h3"},"cwd")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"process.cwd()"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"The working directory that all paths in the programmatic options will be resolved\nrelative to."),(0,l.kt)("h3",{id:"caller"},(0,l.kt)("inlineCode",{parentName:"h3"},"caller")),(0,l.kt)("p",null,"Type: An object with the shape of"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-flow"},"interface CallerData {\n  name: string;\n  supportsStaticESM?: boolean;\n  supportsDynamicImport?: boolean;\n  supportsTopLevelAwait?: boolean;\n  supportsExportNamespaceFrom?: boolean;\n}\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"History"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Version"),(0,l.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"v7.11.0"),(0,l.kt)("td",{parentName:"tr",align:null},"Add ",(0,l.kt)("inlineCode",{parentName:"td"},"supportsExportNamespaceFrom"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"v7.7.0"),(0,l.kt)("td",{parentName:"tr",align:null},"Add ",(0,l.kt)("inlineCode",{parentName:"td"},"supportsTopLevelAwait"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"v7.5.0"),(0,l.kt)("td",{parentName:"tr",align:null},"Add ",(0,l.kt)("inlineCode",{parentName:"td"},"supportsDynamicImport")))))),(0,l.kt)("p",null,"Utilities may pass a ",(0,l.kt)("inlineCode",{parentName:"p"},"caller")," object to identify themselves to Babel and pass\ncapability-related flags for use by configs, presets and plugins. For example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'babel.transformFileSync("example.js", {\n  caller: {\n    name: "my-custom-tool",\n    supportsStaticESM: true,\n  },\n});\n')),(0,l.kt)("p",null,"would allow plugins and presets to decide that, since ES modules are supported,\nthey will skip compilation of ES modules into CommonJS modules."),(0,l.kt)("h3",{id:"filename"},(0,l.kt)("inlineCode",{parentName:"h3"},"filename")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"The filename associated with the code currently being compiled, if there is one.\nThe filename is optional, but not all of Babel's functionality is available when\nthe filename is unknown, because a subset of options rely on the filename\nfor their functionality."),(0,l.kt)("p",null,"The three primary cases users could run into are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The filename is exposed to plugins. Some plugins may require the presence of the filename."),(0,l.kt)("li",{parentName:"ul"},"Options like ",(0,l.kt)("a",{parentName:"li",href:"#test"},(0,l.kt)("inlineCode",{parentName:"a"},'"test"')),", ",(0,l.kt)("a",{parentName:"li",href:"#exclude"},(0,l.kt)("inlineCode",{parentName:"a"},'"exclude"')),", and ",(0,l.kt)("a",{parentName:"li",href:"#ignore"},(0,l.kt)("inlineCode",{parentName:"a"},'"ignore"'))," require the filename for string/RegExp matching."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".babelrc.json")," or ",(0,l.kt)("inlineCode",{parentName:"li"},".babelrc")," files are loaded relative to the file being compiled. If this option is omitted, Babel will behave as if ",(0,l.kt)("inlineCode",{parentName:"li"},"babelrc: false")," has been set.")),(0,l.kt)("h3",{id:"filenamerelative"},(0,l.kt)("inlineCode",{parentName:"h3"},"filenameRelative")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"path.relative(opts.cwd, opts.filename)")," (if ",(0,l.kt)("a",{parentName:"p",href:"#filename"},(0,l.kt)("inlineCode",{parentName:"a"},'"filename"'))," was passed)",(0,l.kt)("br",null)),(0,l.kt)("p",null,"Used as the default value for Babel's ",(0,l.kt)("inlineCode",{parentName:"p"},"sourceFileName")," option, and used\nas part of generation of filenames for the AMD / UMD / SystemJS module transforms."),(0,l.kt)("h3",{id:"code"},(0,l.kt)("inlineCode",{parentName:"h3"},"code")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Babel's default return value includes ",(0,l.kt)("inlineCode",{parentName:"p"},"code")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"map")," properties with the\nresulting generated code. In some contexts where multiple calls to Babel\nare being made, it can be helpful to disable code generation and instead\nuse ",(0,l.kt)("inlineCode",{parentName:"p"},"ast: true")," to get the AST directly in order to avoid doing unnecessary work."),(0,l.kt)("h3",{id:"ast"},(0,l.kt)("inlineCode",{parentName:"h3"},"ast")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Babel's default is to generate a string and a sourcemap, but in some\ncontexts it can be useful to get the AST itself. The primary use case for this\nwould be a chain of multiple transform passes, along the lines of"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'const filename = "example.js";\nconst source = fs.readFileSync(filename, "utf8");\n\n// Load and compile file normally, but skip code generation.\nconst { ast } = babel.transformSync(source, {\n  filename,\n  ast: true,\n  code: false,\n});\n\n// Minify the file in a second pass and generate the output code here.\nconst { code, map } = babel.transformFromAstSync(ast, source, {\n  filename,\n  presets: ["minify"],\n  babelrc: false,\n  configFile: false,\n});\n')),(0,l.kt)("p",null,"Note: This option is not on by default because the majority of users won't need\nit and because we'd like to eventually add a caching layer to Babel. Having\nto cache the AST structure will take significantly more space."),(0,l.kt)("h3",{id:"cloneinputast"},(0,l.kt)("inlineCode",{parentName:"h3"},"cloneInputAst")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),(0,l.kt)("br",null),"\nAdded in ",(0,l.kt)("inlineCode",{parentName:"p"},"v7.11.0")),(0,l.kt)("p",null,"By default ",(0,l.kt)("inlineCode",{parentName:"p"},"babel.transformFromAst")," will clone the input AST to avoid mutations.\nSpecifying ",(0,l.kt)("inlineCode",{parentName:"p"},"cloneInputAst: false")," can improve parsing performance if the input AST\nis not used elsewhere."),(0,l.kt)("h2",{id:"config-loading-options"},"Config Loading options"),(0,l.kt)("p",null,"Loading configuration can get a little complex as environments can have several\ntypes of configuration files, and those configuration files can have various\nnested configuration objects that apply depending on the configuration."),(0,l.kt)("h3",{id:"root"},(0,l.kt)("inlineCode",{parentName:"h3"},"root")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"opts.cwd"),(0,l.kt)("br",null),"\nPlacement: Only allowed in Babel's programmatic options",(0,l.kt)("br",null)),(0,l.kt)("p",null,"The initial path that will be processed based on the ",(0,l.kt)("a",{parentName:"p",href:"#rootmode"},(0,l.kt)("inlineCode",{parentName:"a"},'"rootMode"')),"\nto determine the conceptual root folder for the current Babel project.\nThis is used in two primary cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The base directory when checking for the default ",(0,l.kt)("a",{parentName:"li",href:"#configfile"},(0,l.kt)("inlineCode",{parentName:"a"},'"configFile"'))," value"),(0,l.kt)("li",{parentName:"ul"},"The default value for ",(0,l.kt)("a",{parentName:"li",href:"#babelrcroots"},(0,l.kt)("inlineCode",{parentName:"a"},'"babelrcRoots"')),".")),(0,l.kt)("h3",{id:"rootmode"},(0,l.kt)("inlineCode",{parentName:"h3"},"rootMode")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},'"root" | "upward" | "upward-optional"'),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},'"root"'),(0,l.kt)("br",null),"\nPlacement: Only allowed in Babel's programmatic options",(0,l.kt)("br",null),"\nAdded in: ",(0,l.kt)("inlineCode",{parentName:"p"},"v7.1.0")),(0,l.kt)("p",null,"This option, combined with the ",(0,l.kt)("a",{parentName:"p",href:"#root"},(0,l.kt)("inlineCode",{parentName:"a"},'"root"'))," value, defines how Babel\nchooses its project root. The different modes define different ways that\nBabel can process the ",(0,l.kt)("a",{parentName:"p",href:"#root"},(0,l.kt)("inlineCode",{parentName:"a"},'"root"'))," value to get the final project root."),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},"babel.config.json")," is supported from Babel 7.8.0. In older Babel 7 versions, only ",(0,l.kt)("inlineCode",{parentName:"p"},"babel.config.js")," is supported."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"root"')," - Passes the ",(0,l.kt)("a",{parentName:"li",href:"#root"},(0,l.kt)("inlineCode",{parentName:"a"},'"root"'))," value through as unchanged."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"upward"')," - Walks upward from the ",(0,l.kt)("a",{parentName:"li",href:"#root"},(0,l.kt)("inlineCode",{parentName:"a"},'"root"'))," directory, looking\nfor a directory containing a ",(0,l.kt)("a",{parentName:"li",href:"/babel-website/docs/config-files#project-wide-configuration"},(0,l.kt)("inlineCode",{parentName:"a"},"babel.config.json")),"\nfile, and throws an error if a ",(0,l.kt)("a",{parentName:"li",href:"/babel-website/docs/config-files#project-wide-configuration"},(0,l.kt)("inlineCode",{parentName:"a"},"babel.config.json")),"\nis not found."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"upward-optional"')," - Walk upward from the ",(0,l.kt)("a",{parentName:"li",href:"#root"},(0,l.kt)("inlineCode",{parentName:"a"},'"root"'))," directory,\nlooking for a directory containing a ",(0,l.kt)("a",{parentName:"li",href:"/babel-website/docs/config-files#project-wide-configuration"},(0,l.kt)("inlineCode",{parentName:"a"},"babel.config.json")),"\nfile, and falls back to ",(0,l.kt)("a",{parentName:"li",href:"#root"},(0,l.kt)("inlineCode",{parentName:"a"},'"root"'))," if a ",(0,l.kt)("a",{parentName:"li",href:"/babel-website/docs/config-files#project-wide-configuration"},(0,l.kt)("inlineCode",{parentName:"a"},"babel.config.json")),"\nis not found.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'"root"')," is the default mode because it avoids the risk that Babel will\naccidentally load a ",(0,l.kt)("inlineCode",{parentName:"p"},"babel.config.json")," that is entirely outside of the current\nproject folder. If you use ",(0,l.kt)("inlineCode",{parentName:"p"},'"upward-optional"'),", be aware that it will walk up the\ndirectory structure all the way to the filesystem root, and it is always\npossible that someone will have a forgotten ",(0,l.kt)("inlineCode",{parentName:"p"},"babel.config.json")," in their home\ndirectory, which could cause unexpected errors in your builds."),(0,l.kt)("p",null,"Users with monorepo project structures that run builds/tests on a per-package basis\nmay well want to use ",(0,l.kt)("inlineCode",{parentName:"p"},'"upward"')," since monorepos often have a ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/config-files#project-wide-configuration"},(0,l.kt)("inlineCode",{parentName:"a"},"babel.config.json")),"\nin the project root. Running Babel in a monorepo subdirectory without ",(0,l.kt)("inlineCode",{parentName:"p"},'"upward"'),",\nwill cause Babel to skip loading any ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/config-files#project-wide-configuration"},(0,l.kt)("inlineCode",{parentName:"a"},"babel.config.json")),"\nfiles in the project root, which can lead to unexpected errors and compilation failure."),(0,l.kt)("h3",{id:"envname"},(0,l.kt)("inlineCode",{parentName:"h3"},"envName")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},'process.env.BABEL_ENV || process.env.NODE_ENV || "development"'),(0,l.kt)("br",null),"\nPlacement: Only allowed in Babel's programmatic options",(0,l.kt)("br",null)),(0,l.kt)("p",null,"The current active environment used during configuration loading. This value\nis used as the key when resolving ",(0,l.kt)("a",{parentName:"p",href:"#env"},(0,l.kt)("inlineCode",{parentName:"a"},'"env"'))," configs, and is also\navailable inside configuration functions, plugins, and presets, via the\n",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/config-files#apienv"},(0,l.kt)("inlineCode",{parentName:"a"},"api.env()"))," function."),(0,l.kt)("h3",{id:"configfile"},(0,l.kt)("inlineCode",{parentName:"h3"},"configFile")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string | boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},'path.resolve(opts.root, "babel.config.json")'),", if it exists, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise",(0,l.kt)("br",null),"\nPlacement: Only allowed in Babel's programmatic options",(0,l.kt)("br",null)),(0,l.kt)("p",null,"Defaults to searching for a default ",(0,l.kt)("inlineCode",{parentName:"p"},"babel.config.json")," file, but can be passed\nthe path of any JS or JSON5 config file."),(0,l.kt)("p",null,"NOTE: This option does ",(0,l.kt)("em",{parentName:"p"},"not")," affect loading of ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/config-files#file-relative-configuration"},(0,l.kt)("inlineCode",{parentName:"a"},".babelrc.json"))," files, so while\nit may be tempting to do ",(0,l.kt)("inlineCode",{parentName:"p"},'configFile: "./foo/.babelrc.json"'),", it is not recommended.\nIf the given ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/config-files#file-relative-configuration"},(0,l.kt)("inlineCode",{parentName:"a"},".babelrc.json")),' is loaded via the standard\nfile-relative logic, you\'ll end up loading the same config file twice, merging it with itself.\nIf you are linking a specific config file, it is recommended to stick with a\nnaming scheme that is independent of the "babelrc" name.'),(0,l.kt)("h3",{id:"babelrc"},(0,l.kt)("inlineCode",{parentName:"h3"},"babelrc")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," as long as the ",(0,l.kt)("inlineCode",{parentName:"p"},"filename")," option has been specified",(0,l.kt)("br",null),"\nPlacement: Allowed in Babel's programmatic options, or inside of the loaded ",(0,l.kt)("a",{parentName:"p",href:"#configfile"},(0,l.kt)("inlineCode",{parentName:"a"},'"configFile"')),". A programmatic option will override a config file one.",(0,l.kt)("br",null)),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"true")," will enable searching for ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/config-files#file-relative-configuration"},"configuration files")," relative\nto the ",(0,l.kt)("a",{parentName:"p",href:"#filename"},(0,l.kt)("inlineCode",{parentName:"a"},'"filename"'))," provided to Babel."),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"babelrc")," value passed in the programmatic options will override one set\nwithin a configuration file."),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},".babelrc.json")," files are only loaded if the current ",(0,l.kt)("a",{parentName:"p",href:"#filename"},(0,l.kt)("inlineCode",{parentName:"a"},'"filename"'))," is inside of\na package that matches one of the ",(0,l.kt)("a",{parentName:"p",href:"#babelrcroots"},(0,l.kt)("inlineCode",{parentName:"a"},'"babelrcRoots"'))," packages."),(0,l.kt)("h3",{id:"babelrcroots"},(0,l.kt)("inlineCode",{parentName:"h3"},"babelrcRoots")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean | MatchPattern | Array<MatchPattern>"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"opts.root"),(0,l.kt)("br",null),"\nPlacement: Allowed in Babel's programmatic options, or inside of the loaded ",(0,l.kt)("inlineCode",{parentName:"p"},"configFile"),". A programmatic option will override a config file one.",(0,l.kt)("br",null)),(0,l.kt)("p",null,"By default, Babel will only search for ",(0,l.kt)("inlineCode",{parentName:"p"},".babelrc.json")," files within the ",(0,l.kt)("a",{parentName:"p",href:"#root"},(0,l.kt)("inlineCode",{parentName:"a"},'"root"'))," package\nbecause otherwise Babel cannot know if a given ",(0,l.kt)("inlineCode",{parentName:"p"},".babelrc.json")," is meant to be loaded, or\nif it's ",(0,l.kt)("a",{parentName:"p",href:"#plugins"},(0,l.kt)("inlineCode",{parentName:"a"},'"plugins"'))," and ",(0,l.kt)("a",{parentName:"p",href:"#presets"},(0,l.kt)("inlineCode",{parentName:"a"},'"presets"'))," have even been installed, since the file being\ncompiled could be inside ",(0,l.kt)("inlineCode",{parentName:"p"},"node_modules"),", or have been symlinked into the project."),(0,l.kt)("p",null,'This option allows users to provide a list of other packages that should be considered\n"root" packages when considering whether to load ',(0,l.kt)("inlineCode",{parentName:"p"},".babelrc.json")," files."),(0,l.kt)("p",null,"For example, a monorepo setup that wishes to allow individual packages to\nhave their own configs might want to do"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'babelrcRoots: [\n  // Keep the root as a root\n  ".",\n\n  // Also consider monorepo packages "root" and load their .babelrc.json files.\n  "./packages/*",\n];\n')),(0,l.kt)("h2",{id:"plugin-and-preset-options"},"Plugin and Preset options"),(0,l.kt)("h3",{id:"plugins"},(0,l.kt)("inlineCode",{parentName:"h3"},"plugins")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"Array<PluginEntry | Plugin>")," (",(0,l.kt)("a",{parentName:"p",href:"#plugin-preset-entries"},(0,l.kt)("inlineCode",{parentName:"a"},"PluginEntry")),")",(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"[]"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"An array of plugins to activate when processing this file. For more information on how\nindividual entries interact, especially when used across multiple nested ",(0,l.kt)("a",{parentName:"p",href:"#env"},(0,l.kt)("inlineCode",{parentName:"a"},'"env"'))," and\n",(0,l.kt)("a",{parentName:"p",href:"#overrides"},(0,l.kt)("inlineCode",{parentName:"a"},'"overrides"'))," configs, see ",(0,l.kt)("a",{parentName:"p",href:"#merging"},"merging"),"."),(0,l.kt)("p",null,"Note: The option also allows ",(0,l.kt)("inlineCode",{parentName:"p"},"Plugin")," instances from Babel itself, but\nusing these directly is not recommended. If you need to create a persistent\nrepresentation of a plugin or preset, you should use ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-core#createconfigitem"},(0,l.kt)("inlineCode",{parentName:"a"},"babel.createConfigItem()")),"."),(0,l.kt)("h3",{id:"presets"},(0,l.kt)("inlineCode",{parentName:"h3"},"presets")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"Array<PresetEntry>")," (",(0,l.kt)("a",{parentName:"p",href:"#plugin-preset-entries"},(0,l.kt)("inlineCode",{parentName:"a"},"PresetEntry")),")",(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"[]"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"An array of presets to activate when processing this file. For more information on how\nindividual entries interact, especially when used across multiple nested ",(0,l.kt)("a",{parentName:"p",href:"#env"},(0,l.kt)("inlineCode",{parentName:"a"},'"env"'))," and\n",(0,l.kt)("a",{parentName:"p",href:"#overrides"},(0,l.kt)("inlineCode",{parentName:"a"},'"overrides"'))," configs, see ",(0,l.kt)("a",{parentName:"p",href:"#merging"},"merging"),"."),(0,l.kt)("p",null,'Note: The format of presets is identical to plugins, except for the fact that\nname normalization expects "preset-" instead of "plugin-", and presets cannot\nbe instances of ',(0,l.kt)("inlineCode",{parentName:"p"},"Plugin"),"."),(0,l.kt)("h3",{id:"passperpreset"},(0,l.kt)("inlineCode",{parentName:"h3"},"passPerPreset")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),(0,l.kt)("br",null),"\nStatus: ",(0,l.kt)("em",{parentName:"p"},"Deprecated"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Instructs Babel to run each of the presets in the ",(0,l.kt)("inlineCode",{parentName:"p"},"presets")," array as an\nindependent pass. This option tends to introduce a lot of confusion around\nthe exact ordering of plugins, but can be useful if you absolutely need to run\na set of operations as independent compilation passes."),(0,l.kt)("p",null,"Note: This option may be removed in future Babel versions as we add better\nsupport for defining ordering between plugins."),(0,l.kt)("h2",{id:"output-targets"},"Output targets"),(0,l.kt)("h3",{id:"targets"},(0,l.kt)("inlineCode",{parentName:"h3"},"targets")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string | Array<string> | { [string]: string }"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"{}"),(0,l.kt)("br",null),"\nPlacement: Allowed in Babel's programmatic options, or in config files",(0,l.kt)("br",null),"\nAdded in: ",(0,l.kt)("inlineCode",{parentName:"p"},"v7.13.0"),(0,l.kt)("br",null)),(0,l.kt)("details",null,(0,l.kt)("summary",null,"History"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Version"),(0,l.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.20.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Support ",(0,l.kt)("inlineCode",{parentName:"td"},"deno")," target")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.15.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Support ",(0,l.kt)("inlineCode",{parentName:"td"},"rhino")," target"))))),(0,l.kt)("p",null,"Describes the environments you support/target for your project."),(0,l.kt)("p",null,"This can either be a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ai/browserslist"},"browserslist-compatible")," query (with ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-preset-env#ineffective-browserslist-queries"},"caveats"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "targets": "> 0.25%, not dead"\n}\n')),(0,l.kt)("p",null,"Or an object of minimum environment versions to support:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "targets": {\n    "chrome": "58",\n    "ie": "11"\n  }\n}\n')),(0,l.kt)("p",null,"Supported environments: ",(0,l.kt)("inlineCode",{parentName:"p"},"android"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"chrome"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"deno"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"edge"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"electron"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"firefox"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ie"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ios"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"node"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"opera"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"rhino"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"safari"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"samsung"),"."),(0,l.kt)("p",null,"If a minor version is not specified, Babel will interpret it as ",(0,l.kt)("inlineCode",{parentName:"p"},"MAJOR.0"),". For example, ",(0,l.kt)("inlineCode",{parentName:"p"},'"node": 12')," will be considered as Node.js 12.0."),(0,l.kt)("h4",{id:"no-targets"},"No targets"),(0,l.kt)("p",null,"When no targets are specified: Babel will assume you are targeting the oldest browsers possible. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"@babel/preset-env")," will transform all ES2015-ES2020 code to be ES5 compatible."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"We recommend setting ",(0,l.kt)("inlineCode",{parentName:"p"},"targets")," to reduce the output code size.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "presets": ["@babel/preset-env"]\n}\n')),(0,l.kt)("p",null,"Because of this, Babel's behavior is different than ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/browserslist/browserslist#queries"},"browserslist"),": it does ",(0,l.kt)("em",{parentName:"p"},"not")," use the ",(0,l.kt)("inlineCode",{parentName:"p"},"defaults")," query when there are no targets are found in your Babel ",(0,l.kt)("em",{parentName:"p"},"or")," browserslist config(s). If you want to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"defaults")," query, you will need to explicitly pass it as a target:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "targets": "defaults"\n}\n')),(0,l.kt)("p",null,"We recognize this isn\u2019t ideal and will be revisiting this in Babel v8."),(0,l.kt)("h4",{id:"targetsesmodules"},(0,l.kt)("inlineCode",{parentName:"h4"},"targets.esmodules")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"You may also target browsers supporting ES Modules (",(0,l.kt)("a",{parentName:"p",href:"https://www.ecma-international.org/ecma-262/6.0/#sec-modules"},"https://www.ecma-international.org/ecma-262/6.0/#sec-modules"),"). When the ",(0,l.kt)("inlineCode",{parentName:"p"},"esmodules")," target is specified, it will intersect with the ",(0,l.kt)("inlineCode",{parentName:"p"},"browsers")," target and ",(0,l.kt)("inlineCode",{parentName:"p"},"browserslist"),"'s targets. You can use this approach in combination with ",(0,l.kt)("inlineCode",{parentName:"p"},'<script type="module"><\/script>')," to conditionally serve smaller scripts to users (",(0,l.kt)("a",{parentName:"p",href:"https://jakearchibald.com/2017/es-modules-in-browsers/#nomodule-for-backwards-compatibility"},"https://jakearchibald.com/2017/es-modules-in-browsers/#nomodule-for-backwards-compatibility"),")."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("em",{parentName:"p"},"Please note"),": when specifying both ",(0,l.kt)("inlineCode",{parentName:"p"},"browsers")," and the esmodules target, they will be intersected.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "targets": {\n    "esmodules": true\n  }\n}\n')),(0,l.kt)("h4",{id:"targetsnode"},(0,l.kt)("inlineCode",{parentName:"h4"},"targets.node")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},'string | "current" | true'),"."),(0,l.kt)("p",null,"If you want to compile against the current node version, you can specify ",(0,l.kt)("inlineCode",{parentName:"p"},'"node": true')," or ",(0,l.kt)("inlineCode",{parentName:"p"},'"node": "current"'),", which would be the same as ",(0,l.kt)("inlineCode",{parentName:"p"},'"node": process.versions.node'),"."),(0,l.kt)("p",null,"Alternatively, you can specify the node version in a browserslist query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "targets": "node 12" // not recommended\n}\n')),(0,l.kt)("p",null,"In this case, browserslist will resolve it to the ",(0,l.kt)("em",{parentName:"p"},"latest")," version available in the ",(0,l.kt)("inlineCode",{parentName:"p"},"node-releases")," library. Because Node.js may support new language features in minor releases, a program generated for Node.js 12.22 may throw a syntax error on Node.js 12.0. We recommend that you always specify a minor version when using node queries with browserslist:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "targets": "node 12.0"\n}\n')),(0,l.kt)("h4",{id:"targetssafari"},(0,l.kt)("inlineCode",{parentName:"h4"},"targets.safari")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},'string | "tp"'),"."),(0,l.kt)("p",null,"If you want to compile against the ",(0,l.kt)("a",{parentName:"p",href:"https://developer.apple.com/safari/technology-preview/"},"technology preview")," version of Safari, you can specify ",(0,l.kt)("inlineCode",{parentName:"p"},'"safari": "tp"'),"."),(0,l.kt)("h4",{id:"targetsbrowsers"},(0,l.kt)("inlineCode",{parentName:"h4"},"targets.browsers")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string | Array<string>"),"."),(0,l.kt)("p",null,"A query to select browsers (ex: last 2 versions, > 5%, safari tp) using ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ai/browserslist"},"browserslist"),"."),(0,l.kt)("p",null,"Note, browsers' results are overridden by explicit items from ",(0,l.kt)("inlineCode",{parentName:"p"},"targets"),"."),(0,l.kt)("h4",{id:"targetsdeno"},(0,l.kt)("inlineCode",{parentName:"h4"},"targets.deno")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,l.kt)("p",null,"The minimum supported version is 1.0."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "targets": {\n    "deno": "1.9"\n  }\n}\n')),(0,l.kt)("h3",{id:"browserslistconfigfile"},(0,l.kt)("inlineCode",{parentName:"h3"},"browserslistConfigFile")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),(0,l.kt)("br",null),"\nPlacement: Allowed in Babel's programmatic options, or in config files",(0,l.kt)("br",null),"\nAdded in: ",(0,l.kt)("inlineCode",{parentName:"p"},"v7.13.0"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Toggles whether or not ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ai/browserslist#queries"},"browserslist config sources")," are used, which includes searching for any browserslist files or referencing the browserslist key inside package.json. This is useful for projects that use a browserslist config for files that won't be compiled with Babel."),(0,l.kt)("p",null,"If a string is specified, it must represent the path of a browserslist configuration file. Relative paths are resolved relative to the configuration file which specifies this option, or to ",(0,l.kt)("inlineCode",{parentName:"p"},"cwd")," when it's passed as part of the programmatic options."),(0,l.kt)("h3",{id:"browserslistenv"},(0,l.kt)("inlineCode",{parentName:"h3"},"browserslistEnv")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),(0,l.kt)("br",null),"\nPlacement: Allowed in Babel's programmatic options, or in config files",(0,l.kt)("br",null),"\nAdded in: ",(0,l.kt)("inlineCode",{parentName:"p"},"v7.13.0"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/browserslist/browserslist#configuring-for-different-environments"},"Browserslist environment")," to use."),(0,l.kt)("h2",{id:"config-merging-options"},"Config Merging options"),(0,l.kt)("h3",{id:"extends"},(0,l.kt)("inlineCode",{parentName:"h3"},"extends")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null),"\nPlacement: Not allowed inside of presets",(0,l.kt)("br",null)),(0,l.kt)("p",null,'Configs may "extend" other configuration files. Config fields in the current\nconfig will be ',(0,l.kt)("a",{parentName:"p",href:"#merging"},"merged")," on top of the extended file's configuration."),(0,l.kt)("h3",{id:"env"},(0,l.kt)("inlineCode",{parentName:"h3"},"env")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"{ [envKey: string]: Options }"),(0,l.kt)("br",null),"\nPlacement: May not be nested inside of another ",(0,l.kt)("inlineCode",{parentName:"p"},"env")," block.",(0,l.kt)("br",null)),(0,l.kt)("p",null,"Allows for entire nested configuration options that will only be enabled\nif the ",(0,l.kt)("inlineCode",{parentName:"p"},"envKey")," matches the ",(0,l.kt)("inlineCode",{parentName:"p"},"envName")," option."),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},"env[envKey]")," options will be ",(0,l.kt)("a",{parentName:"p",href:"#merging"},"merged")," on top of the options specified in\nthe root object."),(0,l.kt)("h3",{id:"overrides"},(0,l.kt)("inlineCode",{parentName:"h3"},"overrides")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"Array<Options>"),(0,l.kt)("br",null),"\nPlacement: May not be nested inside of another ",(0,l.kt)("inlineCode",{parentName:"p"},"overrides")," object, or within an ",(0,l.kt)("inlineCode",{parentName:"p"},"env")," block.",(0,l.kt)("br",null)),(0,l.kt)("p",null,"Allows users to provide an array of options that will be ",(0,l.kt)("a",{parentName:"p",href:"#merging"},"merged")," into the current\nconfiguration one at a time. This feature is best used alongside the ",(0,l.kt)("a",{parentName:"p",href:"#test"},(0,l.kt)("inlineCode",{parentName:"a"},'"test"')),"/",(0,l.kt)("a",{parentName:"p",href:"#include"},(0,l.kt)("inlineCode",{parentName:"a"},'"include"')),"/",(0,l.kt)("a",{parentName:"p",href:"#exclude"},(0,l.kt)("inlineCode",{parentName:"a"},'"exclude"')),"\noptions to provide conditions for which an override should apply. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'overrides: [{\n  test: "./vendor/large.min.js",\n  compact: true,\n}],\n')),(0,l.kt)("p",null,"could be used to enable the ",(0,l.kt)("inlineCode",{parentName:"p"},"compact")," option for one specific file that is known\nto be large and minified, and tell Babel not to bother trying to print the file nicely."),(0,l.kt)("h3",{id:"test"},(0,l.kt)("inlineCode",{parentName:"h3"},"test")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"MatchPattern | Array<MatchPattern>")," (",(0,l.kt)("a",{parentName:"p",href:"#matchpattern"},(0,l.kt)("inlineCode",{parentName:"a"},"MatchPattern")),")",(0,l.kt)("br",null)),(0,l.kt)("p",null,"If all patterns fail to match, the current configuration object is considered\ninactive and is ignored during config processing. This option is most useful\nwhen used within an ",(0,l.kt)("inlineCode",{parentName:"p"},"overrides")," option object, but it's allowed anywhere."),(0,l.kt)("p",null,"Note: These toggles do not affect the programmatic and config-loading options\nin earlier sections, since they are taken into account long before the\nconfiguration that is prepared for merging."),(0,l.kt)("h3",{id:"include"},(0,l.kt)("inlineCode",{parentName:"h3"},"include")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"MatchPattern | Array<MatchPattern>")," (",(0,l.kt)("a",{parentName:"p",href:"#matchpattern"},(0,l.kt)("inlineCode",{parentName:"a"},"MatchPattern")),")",(0,l.kt)("br",null)),(0,l.kt)("p",null,"This option is a synonym for ",(0,l.kt)("a",{parentName:"p",href:"#test"},(0,l.kt)("inlineCode",{parentName:"a"},'"test"')),"."),(0,l.kt)("h3",{id:"exclude"},(0,l.kt)("inlineCode",{parentName:"h3"},"exclude")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"MatchPattern | Array<MatchPattern>")," (",(0,l.kt)("a",{parentName:"p",href:"#matchpattern"},(0,l.kt)("inlineCode",{parentName:"a"},"MatchPattern")),")",(0,l.kt)("br",null)),(0,l.kt)("p",null,"If any of patterns match, the current configuration object is considered\ninactive and is ignored during config processing. This option is most useful\nwhen used within an ",(0,l.kt)("inlineCode",{parentName:"p"},"overrides")," option object, but it's allowed anywhere."),(0,l.kt)("p",null,"Note: These toggles do not affect the programmatic and config-loading options\nin earlier sections, since they are taken into account long before the\nconfiguration that is prepared for merging."),(0,l.kt)("h3",{id:"ignore"},(0,l.kt)("inlineCode",{parentName:"h3"},"ignore")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"Array<MatchPattern>")," (",(0,l.kt)("a",{parentName:"p",href:"#matchpattern"},(0,l.kt)("inlineCode",{parentName:"a"},"MatchPattern")),")",(0,l.kt)("br",null),"\nPlacement: Not allowed inside of presets",(0,l.kt)("br",null)),(0,l.kt)("p",null,"If any of the patterns match, Babel will immediately stop all processing of\nthe current build. For example, a user may want to do something like"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'ignore: ["./lib"];\n')),(0,l.kt)("p",null,"to explicitly disable Babel compilation of files inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"lib")," directory."),(0,l.kt)("p",null,"Note: This option disables ",(0,l.kt)("em",{parentName:"p"},"all")," Babel processing of a file. While that has\nits uses, it is also worth considering the ",(0,l.kt)("a",{parentName:"p",href:"#exclude"},(0,l.kt)("inlineCode",{parentName:"a"},'"exclude"'))," option as a less aggressive\nalternative."),(0,l.kt)("h3",{id:"only"},(0,l.kt)("inlineCode",{parentName:"h3"},"only")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"Array<MatchPattern>")," (",(0,l.kt)("a",{parentName:"p",href:"#matchpattern"},(0,l.kt)("inlineCode",{parentName:"a"},"MatchPattern")),")",(0,l.kt)("br",null),"\nPlacement: Not allowed inside of presets",(0,l.kt)("br",null)),(0,l.kt)("p",null,"If all of the patterns fail to match, Babel will immediately stop all processing\nof the current build. For example, a user may want to do something like"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'only: ["./src"];\n')),(0,l.kt)("p",null,"to explicitly enable Babel compilation of files inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"src")," directory\nwhile disabling everything else."),(0,l.kt)("p",null,"Note: This option disables ",(0,l.kt)("em",{parentName:"p"},"all")," Babel processing of a file. While that has\nits uses, it is also worth considering the ",(0,l.kt)("a",{parentName:"p",href:"#test"},(0,l.kt)("inlineCode",{parentName:"a"},'"test"')),"/",(0,l.kt)("a",{parentName:"p",href:"#include"},(0,l.kt)("inlineCode",{parentName:"a"},'"include"')),"\noptions as a less aggressive alternative."),(0,l.kt)("h2",{id:"source-map-options"},"Source Map options"),(0,l.kt)("h3",{id:"inputsourcemap"},(0,l.kt)("inlineCode",{parentName:"h3"},"inputSourceMap")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean | SourceMap"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),(0,l.kt)("br",null)),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"true")," will attempt to load an input sourcemap from the file itself, if it\ncontains a ",(0,l.kt)("inlineCode",{parentName:"p"},"//# sourceMappingURL=...")," comment. If no map is found, or the\nmap fails to load and parse, it will be silently discarded."),(0,l.kt)("p",null,"If an object is provided, it will be treated as the source map object itself."),(0,l.kt)("h3",{id:"sourcemaps"},(0,l.kt)("inlineCode",{parentName:"h3"},"sourceMaps")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},'boolean | "inline" | "both"'),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),(0,l.kt)("br",null)),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"true")," to generate a sourcemap for the code and include it in the result object."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"inline"')," to generate a sourcemap and append it as a data URL to the end of the code, but not include it in the result object."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"both"')," is the same as inline, but will include the map in the result object.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"@babel/cli")," overloads some of these to also affect how maps are written to disk:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"true")," will write the map to a ",(0,l.kt)("inlineCode",{parentName:"li"},".map")," file on disk"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"inline"')," will write the file directly, so it will have a ",(0,l.kt)("inlineCode",{parentName:"li"},"data:")," containing the map"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"both"')," will write the file with a ",(0,l.kt)("inlineCode",{parentName:"li"},"data:")," URL and ",(0,l.kt)("em",{parentName:"li"},"also")," a ",(0,l.kt)("inlineCode",{parentName:"li"},".map"),".")),(0,l.kt)("p",null,"Note: These options are bit weird, so it may make the most sense to just use\n",(0,l.kt)("inlineCode",{parentName:"p"},"true")," and handle the rest in your own code, depending on your use case."),(0,l.kt)("h3",{id:"sourcemap"},(0,l.kt)("inlineCode",{parentName:"h3"},"sourceMap")),(0,l.kt)("p",null,"This is an synonym for ",(0,l.kt)("inlineCode",{parentName:"p"},"sourceMaps"),". Using ",(0,l.kt)("inlineCode",{parentName:"p"},"sourceMaps")," is recommended."),(0,l.kt)("h3",{id:"sourcefilename"},(0,l.kt)("inlineCode",{parentName:"h3"},"sourceFileName")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"path.basename(opts.filenameRelative)")," when available, or ",(0,l.kt)("inlineCode",{parentName:"p"},'"unknown"'),(0,l.kt)("br",null)),(0,l.kt)("p",null,"The name to use for the file inside the source map object."),(0,l.kt)("h3",{id:"sourceroot"},(0,l.kt)("inlineCode",{parentName:"h3"},"sourceRoot")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"sourceRoot")," fields to set in the generated source map, if one is desired."),(0,l.kt)("h2",{id:"misc-options"},"Misc options"),(0,l.kt)("h3",{id:"sourcetype"},(0,l.kt)("inlineCode",{parentName:"h3"},"sourceType")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},'"script" | "module" | "unambiguous"'),(0,l.kt)("br",null),'\nDefault: "module"',(0,l.kt)("br",null)),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"script"')," - Parse the file using the ECMAScript Script grammar. No ",(0,l.kt)("inlineCode",{parentName:"li"},"import"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"export")," statements allowed, and files are not in strict mode."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"module"')," - Parse the file using the ECMAScript Module grammar. Files are automatically strict, and ",(0,l.kt)("inlineCode",{parentName:"li"},"import"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"export")," statements are allowed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"unambiguous"'),' - Consider the file a "module" if ',(0,l.kt)("inlineCode",{parentName:"li"},"import"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"export"),' statements are present, or else consider it a "script".')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"unambiguous")," can be quite useful in contexts where the type is unknown, but it can lead to\nfalse matches because it's perfectly valid to have a module file that does not use ",(0,l.kt)("inlineCode",{parentName:"p"},"import"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"export"),"\nstatements."),(0,l.kt)("p",null,"This option is important because the type of the current file affects both\nparsing of input files, and certain transforms that may wish to add\n",(0,l.kt)("inlineCode",{parentName:"p"},"import"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"require")," usage to the current file."),(0,l.kt)("p",null,"For instance, ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-plugin-transform-runtime"},(0,l.kt)("inlineCode",{parentName:"a"},"@babel/plugin-transform-runtime")),"\nrelies on the type of the current document to decide whether to insert\nan ",(0,l.kt)("inlineCode",{parentName:"p"},"import")," declaration, or a ",(0,l.kt)("inlineCode",{parentName:"p"},"require()")," call.\n",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-preset-env"},(0,l.kt)("inlineCode",{parentName:"a"},"@babel/preset-env"))," also does the same for its\n",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-preset-env#usebuiltins"},(0,l.kt)("inlineCode",{parentName:"a"},'"useBuiltIns"'))," option. Since Babel defaults to treating files\nare ES modules, generally these plugins/presets will insert ",(0,l.kt)("inlineCode",{parentName:"p"},"import")," statements. Setting\nthe correct ",(0,l.kt)("inlineCode",{parentName:"p"},"sourceType")," can be important because having the wrong type can lead to cases\nwhere Babel would insert ",(0,l.kt)("inlineCode",{parentName:"p"},"import")," statements into files that are meant to be CommonJS\nfiles. This can be particularly important in projects where compilation\nof ",(0,l.kt)("inlineCode",{parentName:"p"},"node_modules")," dependencies is being performed, because inserting an\n",(0,l.kt)("inlineCode",{parentName:"p"},"import")," statements can cause Webpack and other tooling to see a file\nas an ES module, breaking what would otherwise be a functional CommonJS file."),(0,l.kt)("p",null,"Note: This option will not affect parsing of ",(0,l.kt)("inlineCode",{parentName:"p"},".mjs")," files, as they are currently\nhard-coded to always parse as ",(0,l.kt)("inlineCode",{parentName:"p"},'"module"')," files."),(0,l.kt)("h3",{id:"assumptions"},(0,l.kt)("inlineCode",{parentName:"h3"},"assumptions")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"{ [assumption: string]: boolean }"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"{}"),(0,l.kt)("br",null),"\nAdded in: ",(0,l.kt)("inlineCode",{parentName:"p"},"v7.13.0"),(0,l.kt)("br",null),"\nPlacement: Allowed in programmatic options, config files and presets.",(0,l.kt)("br",null)),(0,l.kt)("p",null,"Set assumptions that Babel can make in order to produce smaller output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "assumptions": {\n    "iterableIsArray": true\n  },\n  "presets": ["@babel/preset-env"]\n}\n')),(0,l.kt)("p",null,"For more informations, check the ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/assumptions"},"assumptions")," documentation page."),(0,l.kt)("h3",{id:"highlightcode"},(0,l.kt)("inlineCode",{parentName:"h3"},"highlightCode")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Highlight tokens in code snippets in Babel's error messages to make them easier to read."),(0,l.kt)("h3",{id:"wrappluginvisitormethod"},(0,l.kt)("inlineCode",{parentName:"h3"},"wrapPluginVisitorMethod")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"(key: string, nodeType: string, fn: Function) => Function"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Allows users to add a wrapper on each visitor in order to inspect the visitor\nprocess as Babel executes the plugins."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key")," is a simple opaque string that represents the plugin being executed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nodeType")," is the type of AST node currently being visited."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fn")," is the visitor function itself.")),(0,l.kt)("p",null,"Users can return a replacement function that should call the original function\nafter performing whatever logging and analysis they wish to do."),(0,l.kt)("h3",{id:"parseropts"},(0,l.kt)("inlineCode",{parentName:"h3"},"parserOpts")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"{}"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"An opaque object containing options to pass through to the parser being used."),(0,l.kt)("p",null,"For available parser options, see ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-parser#options"},"Parser Options"),"."),(0,l.kt)("h3",{id:"generatoropts"},(0,l.kt)("inlineCode",{parentName:"h3"},"generatorOpts")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"{}"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"An opaque object containing options to pass through to the code generator being used. See ",(0,l.kt)("a",{parentName:"p",href:"#code-generator-options"},"Code Generator Options")," for most used options."),(0,l.kt)("h2",{id:"code-generator-options"},"Code Generator options"),(0,l.kt)("h3",{id:"retainlines"},(0,l.kt)("inlineCode",{parentName:"h3"},"retainLines")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Babel will make an effort to generate code such that items are printed on the\nsame line that they were on in the original file. This option exists so that\nusers who cannot use source maps can get vaguely useful error line numbers,\nbut it is only a best-effort, and is not guaranteed in all cases with all plugins."),(0,l.kt)("h3",{id:"compact"},(0,l.kt)("inlineCode",{parentName:"h3"},"compact")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},'boolean | "auto"'),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},'"auto"'),(0,l.kt)("br",null)),(0,l.kt)("p",null,'"auto" will set the value by evaluating ',(0,l.kt)("inlineCode",{parentName:"p"},"code.length > 500_000")),(0,l.kt)("p",null,"All optional newlines and whitespace will be omitted when generating code in\ncompact mode."),(0,l.kt)("h3",{id:"minified"},(0,l.kt)("inlineCode",{parentName:"h3"},"minified")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Includes ",(0,l.kt)("inlineCode",{parentName:"p"},"compact: true"),", omits block-end semicolons, omits ",(0,l.kt)("inlineCode",{parentName:"p"},"()")," from\n",(0,l.kt)("inlineCode",{parentName:"p"},"new Foo()")," when possible, and may output shorter versions of literals."),(0,l.kt)("h3",{id:"auxiliarycommentbefore"},(0,l.kt)("inlineCode",{parentName:"h3"},"auxiliaryCommentBefore")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Allows specifying a prefix comment to insert before pieces of code that were\nnot present in the original file."),(0,l.kt)("p",null,"Note: The definition of what is and isn't present in the original file can\nget a little ugly, so usage of this option is ",(0,l.kt)("em",{parentName:"p"},"not recommended"),". If you need to\nannotate code somehow, it is better to do so using a Babel plugin."),(0,l.kt)("h3",{id:"auxiliarycommentafter"},(0,l.kt)("inlineCode",{parentName:"h3"},"auxiliaryCommentAfter")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Allows specifying a prefix comment to insert after pieces of code that were\nnot present in the original file."),(0,l.kt)("p",null,"Note: The definition of what is and isn't present in the original file can\nget a little ugly, so usage of this option is ",(0,l.kt)("em",{parentName:"p"},"not recommended"),". If you need to\nannotate code somehow, it is better to do so using a Babel plugin."),(0,l.kt)("h3",{id:"comments"},(0,l.kt)("inlineCode",{parentName:"h3"},"comments")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Provides a default comment state for ",(0,l.kt)("inlineCode",{parentName:"p"},"shouldPrintComment")," if no function\nis given. See the default value of that option for more info."),(0,l.kt)("h3",{id:"shouldprintcomment"},(0,l.kt)("inlineCode",{parentName:"h3"},"shouldPrintComment")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"(value: string) => boolean"),(0,l.kt)("br",null),"\nDefault without ",(0,l.kt)("inlineCode",{parentName:"p"},"minified"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"(val) => opts.comments || /@license|@preserve/.test(val)"),(0,l.kt)("br",null),"\nDefault with ",(0,l.kt)("inlineCode",{parentName:"p"},"minified"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"() => opts.comments"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"A function that can decide whether a given comment should be included in the\noutput code from Babel."),(0,l.kt)("h3",{id:"advanced-usage"},"Advanced Usage"),(0,l.kt)("p",null,"For more code generator options, see ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-generator#options"},"Generator Options"),"."),(0,l.kt)("h2",{id:"amd--umd--systemjs-module-options"},"AMD / UMD / SystemJS module options"),(0,l.kt)("h3",{id:"moduleids"},(0,l.kt)("inlineCode",{parentName:"h3"},"moduleIds")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),(0,l.kt)("br",null),"\nDefault: ",(0,l.kt)("inlineCode",{parentName:"p"},"!!opts.moduleId"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Enables module ID generation."),(0,l.kt)("h3",{id:"moduleid"},(0,l.kt)("inlineCode",{parentName:"h3"},"moduleId")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"A hard-coded ID to use for the module. Cannot be used alongside ",(0,l.kt)("inlineCode",{parentName:"p"},"getModuleId"),"."),(0,l.kt)("h3",{id:"getmoduleid"},(0,l.kt)("inlineCode",{parentName:"h3"},"getModuleId")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"(name: string) => string"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"Given the babel-generated module name, return the name to use. Returning\na falsy value will use the original ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,l.kt)("h3",{id:"moduleroot"},(0,l.kt)("inlineCode",{parentName:"h3"},"moduleRoot")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"A root path to include on generated module names."),(0,l.kt)("h2",{id:"options-concepts"},"Options Concepts"),(0,l.kt)("h3",{id:"matchpattern"},(0,l.kt)("inlineCode",{parentName:"h3"},"MatchPattern")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string | RegExp | (filename: string | void, context: { caller: { name: string } | void, envName: string, dirname: string ) => boolean")),(0,l.kt)("p",null,"Several Babel options perform tests against file paths. In general, these\noptions support a common pattern approach where each pattern can be"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," - A file path with simple support for ",(0,l.kt)("inlineCode",{parentName:"li"},"*")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"**")," as full slug matches. Any file or\nparent folder matching the pattern counts as a match. The path follow's Node's normal path logic,\nso on POSIX is must be ",(0,l.kt)("inlineCode",{parentName:"li"},"/"),"-separated, but on Windows both ",(0,l.kt)("inlineCode",{parentName:"li"},"/")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"\\")," are supported."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RegExp")," - A regular expression to match against the normalized filename. On POSIX the path\nRegExp will run against a ",(0,l.kt)("inlineCode",{parentName:"li"},"/"),"-separated path, and on Windows it will be on a ",(0,l.kt)("inlineCode",{parentName:"li"},"\\"),"-separated path.")),(0,l.kt)("p",null,"Importantly, if either of these are used, Babel requires that the ",(0,l.kt)("inlineCode",{parentName:"p"},"filename")," option be present,\nand will consider it an error otherwise."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"(filename: string | void, context: { caller: { name: string } | void, envName: string, dirname: string }) => boolean")," is a general callback that should\nreturn a boolean to indicate whether it is a match or not. The function is passed the filename\nor ",(0,l.kt)("inlineCode",{parentName:"li"},"undefined")," if one was not given to Babel. It is also passed the current ",(0,l.kt)("inlineCode",{parentName:"li"},"envName")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"caller"),"\noptions that were specified by the top-level call to Babel and ",(0,l.kt)("inlineCode",{parentName:"li"},"dirname")," that is either a directory of the configuration file or the current working directory (if the transformation was called programmatically).")),(0,l.kt)("h3",{id:"merging"},"Merging"),(0,l.kt)("p",null,"Please refer to ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/configuration#how-babel-merges-config-items"},"How Babel merges config items"),"."),(0,l.kt)("h3",{id:"pluginpreset-entries"},"Plugin/Preset entries"),(0,l.kt)("h4",{id:"pluginentry--presetentry"},(0,l.kt)("inlineCode",{parentName:"h4"},"PluginEntry")," / ",(0,l.kt)("inlineCode",{parentName:"h4"},"PresetEntry")),(0,l.kt)("p",null,"Individual plugin/preset items can have several different structures:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"EntryTarget")," - Individual plugin"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[EntryTarget, EntryOptions]")," - Individual plugin w/ options"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[EntryTarget, EntryOptions, string]")," - Individual plugin with options and name (see ",(0,l.kt)("a",{parentName:"li",href:"#merging"},"merging")," for more info on names)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ConfigItem")," - A plugin configuration item created by ",(0,l.kt)("inlineCode",{parentName:"li"},"babel.createConfigItem()"),".")),(0,l.kt)("p",null,"The same ",(0,l.kt)("inlineCode",{parentName:"p"},"EntryTarget")," may be used multiple times unless each one is given a different\nname, and doing so will result in a duplicate-plugin/preset error."),(0,l.kt)("p",null,"That can be a little hard to read, so as an example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"plugins: [\n  // EntryTarget\n  '@babel/plugin-transform-classes',\n\n  // [EntryTarget, EntryOptions]\n  ['@babel/plugin-transform-arrow-functions', { spec: true }],\n\n  // [EntryTarget, EntryOptions, string]\n  ['@babel/plugin-transform-for-of', { loose: true }, \"some-name\"],\n\n  // ConfigItem\n  babel.createConfigItem(require(\"@babel/plugin-transform-spread\")),\n],\n")),(0,l.kt)("h4",{id:"entrytarget"},(0,l.kt)("inlineCode",{parentName:"h4"},"EntryTarget")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"string | {} | Function"),(0,l.kt)("br",null)),(0,l.kt)("p",null,"A plugin/preset target can come from a few different sources:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"require"),"-style path or plugin/preset identifier. Identifiers will be passed through ",(0,l.kt)("a",{parentName:"li",href:"#name-normalization"},"name normalization"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{} | Function")," - An actual plugin/preset object or function after it has been ",(0,l.kt)("inlineCode",{parentName:"li"},"require()"),"ed.")),(0,l.kt)("h4",{id:"entryoptions"},(0,l.kt)("inlineCode",{parentName:"h4"},"EntryOptions")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined | {} | false")),(0,l.kt)("p",null,"Options are passed through to each plugin/preset when they are executed. ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," will be\nnormalized to an empty object."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"false")," indicates that an entry is entirely disabled. This can be useful in contexts where ordering\nis important, but a separate condition is needed to decide if something is enabled. For instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"plugins: [\n  'one',\n  ['two', false],\n  'three',\n],\noverrides: [{\n  test: \"./src\",\n  plugins: [\n    'two',\n  ]\n}]\n")),(0,l.kt)("p",null,"would enable the ",(0,l.kt)("inlineCode",{parentName:"p"},"two")," plugin for files in ",(0,l.kt)("inlineCode",{parentName:"p"},"src"),", but ",(0,l.kt)("inlineCode",{parentName:"p"},"two")," would still execute between ",(0,l.kt)("inlineCode",{parentName:"p"},"one")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"three"),"."),(0,l.kt)("h3",{id:"name-normalization"},"Name Normalization"),(0,l.kt)("p",null,"By default, Babel expects plugins to have a ",(0,l.kt)("inlineCode",{parentName:"p"},"babel-plugin-")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"babel-preset-")," prefix in their name.\nTo avoid repetition, Babel has a name normalization phase will automatically add these prefixes\nwhen loading items. This boils down to a few primary rules:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Absolute paths pass through untouched."),(0,l.kt)("li",{parentName:"ul"},"Relative paths starting with ",(0,l.kt)("inlineCode",{parentName:"li"},"./")," pass through untouched."),(0,l.kt)("li",{parentName:"ul"},"References to files ",(0,l.kt)("em",{parentName:"li"},"within")," a package are untouched."),(0,l.kt)("li",{parentName:"ul"},"Any identifier prefixed with ",(0,l.kt)("inlineCode",{parentName:"li"},"module:")," will have the prefix removed but otherwise be untouched."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"plugin-"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"preset-")," will be injected at the start of any ",(0,l.kt)("inlineCode",{parentName:"li"},"@babel"),"-scoped package that doesn't have it as a prefix."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"babel-plugin-"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"babel-preset-")," will be injected as a prefix any unscoped package that doesn't have it as a prefix."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"babel-plugin-"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"babel-preset-")," will be injected as a prefix any ",(0,l.kt)("inlineCode",{parentName:"li"},"@"),"-scoped package that doesn't have it ",(0,l.kt)("em",{parentName:"li"},"anywhere")," in their name."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"babel-plugin"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"babel-preset")," will be injected as the package name if only the ",(0,l.kt)("inlineCode",{parentName:"li"},"@"),"-scope name is given.")),(0,l.kt)("p",null,"Here are some examples, when applied in a plugin context:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Normalized"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"/dir/plugin.js"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"/dir/plugin.js"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"./dir/plugin.js"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"./dir/plugin.js"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"mod"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"babel-plugin-mod"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"mod/plugin"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"mod/plugin"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"babel-plugin-mod"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"babel-plugin-mod"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@babel/mod"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@babel/plugin-mod"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@babel/plugin-mod"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@babel/plugin-mod"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@babel/mod/plugin"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@babel/mod/plugin"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/babel-plugin"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/babel-plugin"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/babel-plugin"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/mod"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/babel-plugin-mod"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/babel-plugin-mod"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/babel-plugin-mod"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/prefix-babel-plugin-mod"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/prefix-babel-plugin-mod"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/mod/plugin"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"@scope/mod/plugin"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"module:foo"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"foo"'))))))}c.isMDXComponent=!0}}]);