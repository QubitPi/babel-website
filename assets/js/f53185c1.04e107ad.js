"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8924],{17766:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/02/20/7.21.0","metadata":{"permalink":"/babel-website/blog/2023/02/20/7.21.0","source":"@site/blog/2023-02-20-7.21.0.md","title":"7.21.0 Released: Inline RegExp modifiers, TypeScript 5.0, and Decorators updates","description":"We just published Babel 7.21.0!","date":"2023-02-20T00:00:00.000Z","formattedDate":"February 20, 2023","tags":[],"readingTime":3.785,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs"}],"frontMatter":{"layout":"post","title":"7.21.0 Released: Inline RegExp modifiers, TypeScript 5.0, and Decorators updates","author":"Babel Team","authorURL":"https://twitter.com/babeljs","date":"2023-02-20T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.21.0 Released"},"nextItem":{"title":"7.20.0 Released: Deno target and TypeScript 4.9","permalink":"/babel-website/blog/2022/10/27/7.20.0"}},"content":"We just published Babel 7.21.0!\\n\\nBabel now supports the [Inline RegExp modifiers](https://github.com/tc39/proposal-regexp-modifiers) proposal, the latest version of the [Decorators](https://github.com/tc39/proposal-decorators/) proposal, and the new [TypeScript 5.0](https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/) syntax.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.21.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://github.com/babel/babel?sponsor=1) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## Highlights\\n\\n### Inline RegExp modifiers\\n\\nThe [Inline RegExp modifiers](https://github.com/tc39/proposal-regexp-modifiers) Stage 3 proposal allows you to enable or disable the `i`, `m` and `s` for _part_ of a regular expression, without affecting other parts.\\n\\nYou can use the `(?enableFlags:subPattern)` syntax to enable flags, `(?-disableFlags:subPattern)` to disable them, and `(?enableFlags-disableFlags:subPattern)` to enable some and disable others at the same time. You can think of non-capturing group `(?:subPattern)` as a special case where no flags are modified.\\n\\nAs an example, `/(?i:a)a/` matches an `a` ignoring its case, followed by a lowercase `a`:\\n```js title=\\"JavaScript\\"\\n/(?i:a)a/.test(\\"aa\\"); // true\\n/(?i:a)a/.test(\\"Aa\\"); // true\\n/(?i:a)a/.test(\\"aA\\"); // false\\n```\\n\\n`/a(?-i:a)/i` is equivalent: the regular expression is case insensitive, expect for the second `a` which must be lowercase.\\n\\nYou can enable this proposal by installing the `@babel/plugin-proposal-regexp-modifiers` package and adding it to your Babel configuration:\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"presets\\": [\\"@babel/preset-env\\"],\\n  \\"plugins\\": [\\n    // Add this!\\n    \\"@babel/plugin-proposal-regexp-modifiers\\"\\n  ]\\n}\\n```\\n\\n### Decorators updates\\n\\nTC39, the committee that standardizes JavaScript, [recently approved](https://github.com/babel/proposals/issues/86#issuecomment-1414202318) some changes to the [Decorators proposal](https://github.com/tc39/proposal-decorators/) based on feedback from the TypeScript team.\\n- Decorators on exported classes can now come either before or after the `export` keyword, but not in both places at the same time:\\n  ```js title=\\"JavaScript\\"\\n  // valid\\n  @dec\\n  export class A {}\\n\\n  // valid\\n  export @dec class B {}\\n\\n  // invalid\\n  @dec\\n  export @dec class C {}\\n  ```\\n  This relaxed restriction aims at simplifying migration from the \\"_legacy_\\" decorators version, by reducing the syntactic differences.\\n- The methods on the `context.access` object provided to decorators expect the target object as their first parameter, rather than as their `this` receiver:\\n  ```js title=\\"JavaScript\\"\\n  let accessX;\\n\\n  function dec(desc, context) {\\n    accessX = context.access;\\n    return dec;\\n  }\\n\\n  class A {\\n    @dec #x = 1;\\n  }\\n\\n  // old semantics\\n  accessX.get.call(new A) === 1;\\n\\n  // new semantics\\n  accessX.get(new A) === 1;\\n  ```\\n- `context.access` has a new `.has` method, to check if an object has the corresponding element. Continuing the example above:\\n  ```js title=\\"JavaScript\\"\\n  // #x in new A\\n  accessX.has(new A) === true;\\n  ```\\n\\nYou can enable this new version of the decorators proposal by setting the `version` option of `\\"@babel/plugin-proposal-decorators\\"` to `\\"2023-01\\"`:\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"presets\\": [\\"@babel/preset-env\\"],\\n  \\"plugins\\": [\\n    [\\"@babel/plugin-proposal-decorators\\", { \\"version\\": \\"2023-01\\" }]\\n  ]\\n}\\n```\\n\\nYou can also try the new decorators proposal in the online Babel [REPL](https://babeljs.io/repl#?code_lz=GYVwdgxgLglg9mABAGzgczQUwE4AoCUiA3gFCKID0FiA8gA6ZICecI2A5AM6IBG2cAd045EEBJzjJMAGjKVqAQzAATRIwU8piAEQBRAG4LkIBVEzbEMJFAAWmRJxjLMPBdgCEcsWAlSAdKhouG5oIAC2jFCc-ADcJAC-JCQQyAqc3ACCxHIAAoFY2HIRtnDKBMSJ8UA&presets=stage-3&version=7.21.0), enabling the \\"Stage 3\\" (or lower) preset in the sidebar and choosing the `2023-01` decorators version.\\n\\n### TypeScript 5.0\\n\\nTypeScript 5.0, currently released as a beta prerelease, introduces two new syntactic features:\\n- `const` modifiers for type parameters\\n  ```ts title=\\"TypeScript\\"\\n  function getName<const T extends { name: string }>(user: T): T[\\"name\\"] {\\n      return user.name;\\n  }\\n\\n  let name = getName({ name: \\"Babel\\" });\\n  //  ^? inferred type: \\"Babel\\", instead of just string.\\n  ```\\n- `export type *` declarations\\n  ```ts title=\\"TypeScript\\"\\n  export type * from \\"./mod\\";\\n  export type * as ns from \\"./mod\\";\\n  ```\\n  Babel relies on this new syntax to safely remove the re-`export` declaration while compiling from TypeScript to JavaScript.\\n\\nAdditionally, TypeScript 5.0 introduces support for the standard Decorators proposal, that you can enable in Babel using `@babel/plugin-proposal-decorators`.\\n\\nYou can read more about the new TypeScript features in their [release post](https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-beta/)!\\n\\n### Experimental support for `.cts` configuration files\\n\\nIf you installed `@babel/preset-typescript`, or if you are running Babel using `ts-node`, you can now use `babel.config.cts` as a Babel configuration file written in TypeScript and CommonJS. You can read more about this in the [documentation](https://babeljs.io/docs/config-files#supported-file-extensions).\\n\\nIt\'s not possible yet to use `babel.config.ts` and `babel.config.mts` files, pending stabilization of the [Node.js ESM loader](https://nodejs.org/api/esm.html#loaders) API.\\n\\n### Source maps improvements\\n\\nSource maps generated by Babel now support [Friendly Call Frames](https://developer.chrome.com/blog/devtools-modern-web-debugging/#friendly-call-frames), to show better names for trasformed functions in devtools.\\n\\nAdditionally, `@babel/generator` now accepts input source maps generated from other tools in the build pipeline: this allows to properly merge source maps even when using `@babel/generator` directly without `@babel/core`, and improves the general performance of source map merging in when using Babel."},{"id":"/2022/10/27/7.20.0","metadata":{"permalink":"/babel-website/blog/2022/10/27/7.20.0","source":"@site/blog/2022-10-27-7.20.0.md","title":"7.20.0 Released: Deno target and TypeScript 4.9","description":"We just published Babel 7.20.0!","date":"2022-10-27T00:00:00.000Z","formattedDate":"October 27, 2022","tags":[],"readingTime":2.365,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs"}],"frontMatter":{"layout":"post","title":"7.20.0 Released: Deno target and TypeScript 4.9","author":"Babel Team","authorURL":"https://twitter.com/babeljs","date":"2022-10-27T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.20.0 Released"},"prevItem":{"title":"7.21.0 Released: Inline RegExp modifiers, TypeScript 5.0, and Decorators updates","permalink":"/babel-website/blog/2023/02/20/7.21.0"},"nextItem":{"title":"7.19.0 Released: Stage 3 decorators and more RegExp features!","permalink":"/babel-website/blog/2022/09/05/7.19.0"}},"content":"We just published Babel 7.20.0!\\n\\nThis release includes support for [TypeScript 4.9](https://devblogs.microsoft.com/typescript/announcing-typescript-4-9/), and parser support for the [Import Reflection](https://github.com/tc39/proposal-import-reflection/) and [Explicit Resource Management](https://github.com/tc39/proposal-explicit-resource-management/) Stage 2 proposals. Additionally, you can now use [Deno](https://deno.land/) as one of your compilation targets.\\n\\nIn the past few releases we have made gradual improvements `@babel/generator`\'s code location tracking, which lead to higher source map quality and better positioning of comments in the generated output.\\n\\nWe are also releasing version 9.0.0 of [`babel-loader`](https://github.com/babel/babel-loader/), the Babel loader for Webpack.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.20.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://github.com/babel/babel?sponsor=1) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## Highlights\\n\\n### TypeScript 4.9 ([#14211](https://github.com/babel/babel/pull/14211))\\n\\nTypeScript 4.9 introduces a new keyword operator, `satisfies`, that lets you assert that an expression has a given type without actually casting that expression:\\n\\n```typescript\\nlet a = { x: 1, y: 2 } as const;\\n//  ^ type is { x: 1, y: 2 }\\n\\nlet b = a satisfies { [key: string]: number };\\n//  ^ type is still { x: 1, y: 2 }, and not { [key: string]: number }!\\n\\na satisfies { [key: string]: string };\\n// error! a does not satisfies that type\\n```\\n\\nYou can read more about this in the TypeScript 4.9 [release post](https://devblogs.microsoft.com/typescript/announcing-typescript-4-9-beta/#hamilton) \ud83d\ude09.\\n\\nBabel can now parse and strip away those annotations when using `@babel/plugin-transform-typescript` or `@babel/preset-typescript`, allowing you to start using the new TypeScript version.\\n\\n### Deno compilation target ([#14944](https://github.com/babel/babel/pull/14944))\\n\\nWhen compiling for Deno, you can configure `@babel/preset-env` to only compile the features not supported by your Deno version. While Deno usually ships new ECMAScript features as soon as possible, you might need to support older engine versions.\\n\\nYou can enable it using the [`targets`](https://babeljs.io/docs/en/options#targets) option:\\n```json title=\\"JSON\\"\\n{\\n    \\"targets\\": { \\"deno\\": \\"1.20\\" },\\n    \\"presets\\": [\\"@babel/preset-env\\"]\\n}\\n```\\n\\n### `babel-loader` 9.0.0\\n\\nThis new major version of [`babel-loader`](https://github.com/babel/babel-loader/releases/tag/v9.0.0) drops support for Webpack < 5, for Babel < 7.12 and for Node.js < 14.15 LTS.\\n\\nLoader options cannot be specified using the query parameters: instead of specifying options inline (for example, `loader: \\"babel-loader?presets=@babel/preset-env\\"`) you will have to use the `options` object:\\n```js title=\\"JavaScript\\"\\n{\\n    loader: \\"babel-loader\\",\\n    options: {\\n        presets: [\\"@babel/preset-env\\"]\\n    }\\n}\\n```\\n\\nYou can also use a dedicated [Babel configuration file](https://babeljs.io/docs/en/config-files#project-wide-configuration), such as `babel.config.json`.\\n\\nIf you are not using query parameters to specify Babel options, and if you are on a modern version of Webpack, Babel and Node.js, you should be able to update without changes to your Webpack or Babel configurations."},{"id":"/2022/09/05/7.19.0","metadata":{"permalink":"/babel-website/blog/2022/09/05/7.19.0","source":"@site/blog/2022-09-05-7.19.0.md","title":"7.19.0 Released: Stage 3 decorators and more RegExp features!","description":"We just published Babel 7.19.0!","date":"2022-09-05T00:00:00.000Z","formattedDate":"September 5, 2022","tags":[],"readingTime":2.45,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs"}],"frontMatter":{"layout":"post","title":"7.19.0 Released: Stage 3 decorators and more RegExp features!","author":"Babel Team","authorURL":"https://twitter.com/babeljs","date":"2022-09-05T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.19.0 Released"},"prevItem":{"title":"7.20.0 Released: Deno target and TypeScript 4.9","permalink":"/babel-website/blog/2022/10/27/7.20.0"},"nextItem":{"title":"7.18.0 Released: Destructuring private elements and TypeScript 4.7","permalink":"/babel-website/blog/2022/05/19/7.18.0"}},"content":"We just published Babel 7.19.0!\\n\\nThis release updates our implementation of the [decorators proposal](https://github.com/tc39/proposal-decorators), which reached Stage 3 in March. It also includes support for the new [duplicate named capturing groups proposal](https://github.com/tc39/proposal-duplicate-named-capturing-groups) for regular expressions.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.19.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://github.com/babel/babel?sponsor=1) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## Highlights\\n\\n### New default values\\n\\nGiven the stabilization of the [decorators](https://github.com/tc39/proposal-decorators) and [Record and Tuple](https://github.com/tc39/proposal-record-tuple) proposal, we set some default values for their [parser plugin](https://babeljs.io/docs/en/babel-parser#plugins-options) options:\\n- `decorators`/`@babel/plugin-proposal-decorators`\'s `decoratorsBeforeExport` now defaults to `false`;\\n- `recordAndTuple`/`@babel/plugin-proposal-record-and-tuple`\'s `syntaxType` option now defaults to `hash`.\\n\\nThese options will be removed in Babel 8.\\n\\n### Stage 3 decorators ([#14836](https://github.com/babel/babel/pull/14836))\\n\\nThe decorators proposal was promoted to Stage 3 with some minor but observable changes. You can enable the new version using the `\\"version\\": \\"2022-03\\"` option of `@babel/plugin-proposal-decorators`:\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\n    [\\"@babel/plugin-proposal-decorators\\", {\\n        \\"version\\": \\"2022-03\\"\\n    }]\\n  ]\\n}\\n```\\n\\nIf you are migrating from the `2021-12` version, the following breaking changes might affect you:\\n- the `initialize` method of the object returned by accessor decorators has been renamed to `init`;\\n- the `isPrivate` and `isStatic` properties of the `context` parameter received by the decorators (the second one) have been renamed to `private` and `static`;\\n- the `context` parameter now always has an `access` property, regardless of the decorated element type;\\n- support for metadata (`getMetadata`/`setMetadata`) has been removed and [postponed to a future proposal](https://github.com/tc39/proposal-decorator-metadata);\\n- `@(expression)()`-style decorators are disallowed, and you must use `@(expression())`;\\n- decorators are applied in the following order, instead of in a single pass:\\n  1. static method decorators\\n  1. proto method decorators\\n  1. static field decorators\\n  1. instance field decorators\\n  1. class decorators.\\n\\nIf you are migrating from an older version of the proposal, we suggest reading [the full README](https://github.com/tc39/proposal-decorators). \ud83d\ude09\\n\\n> \ud83d\udca1 TypeScript [plans to implement](https://github.com/microsoft/TypeScript/issues/48885) this version of the proposal. After almost a decade, it will be possible to write decorators without worrying if they will be compiled by Babel or tsc!\\n\\n### RegExp duplicate named capturing groups ([#14805](https://github.com/babel/babel/pull/14805))\\n\\nBabel now supports the [RegExp duplicate named capturing groups](https://github.com/tc39/proposal-duplicate-named-capturing-groups/) proposal, which allows re-using the same group name in alternative RegExp branches:\\n\\n```js title=\\"JavaScript\\"\\nconst dateRE = /(?<year>\\\\d\\\\d\\\\d\\\\d)-(?<month>\\\\d\\\\d)|(?<month>\\\\d\\\\d)-(?<year>\\\\d\\\\d)/;\\n\\nconsole.log(\\"2022-12\\".match(dateRE).groups); // { year: \\"2022\\", month: \\"12\\" }\\nconsole.log(\\"12-2022\\".match(dateRE).groups); // { year: \\"2022\\", month: \\"12\\" }\\n```\\n\\nYou can enable this proposal using the `@babel/plugin-proposal-duplicate-named-capturing-groups-regex` plugin:\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\"@babel/proposal-duplicate-named-capturing-groups-regex\\"]\\n}\\n```\\n\\nBabel relies on different third-party packages to transform regular expressions: this is possible thanks to the maintainers of [regjsparser](https://github.com/jviereck/regjsparser/), [regjsgen](http://github.com/benjamn/regjsgen) and [regexpu-core](https://github.com/mathiasbynens/regexpu-core/) who took time to review our pull requests!"},{"id":"/2022/05/19/7.18.0","metadata":{"permalink":"/babel-website/blog/2022/05/19/7.18.0","source":"@site/blog/2022-05-19-7.18.0.md","title":"7.18.0 Released: Destructuring private elements and TypeScript 4.7","description":"We just published Babel 7.18.0!","date":"2022-05-19T00:00:00.000Z","formattedDate":"May 19, 2022","tags":[],"readingTime":2.77,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs"}],"frontMatter":{"layout":"post","title":"7.18.0 Released: Destructuring private elements and TypeScript 4.7","author":"Babel Team","authorURL":"https://twitter.com/babeljs","date":"2022-05-19T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.18.0 Released"},"prevItem":{"title":"7.19.0 Released: Stage 3 decorators and more RegExp features!","permalink":"/babel-website/blog/2022/09/05/7.19.0"},"nextItem":{"title":"7.17.0 Released: RegExp \'v\' mode and ... \ud83e\udd41 decorators!","permalink":"/babel-website/blog/2022/02/02/7.17.0"}},"content":"We just published Babel 7.18.0!\\n\\nThis release includes support for the [private destructuring](https://github.com/tc39/proposal-destructuring-private) proposal and for TypeScript 4.7.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.18.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://github.com/babel/babel?sponsor=1) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## Highlights\\n\\n### Private destructuring ([#14304](https://github.com/babel/babel/pull/14304))\\n\\nBabel supports transforming the [private destructuring](https://github.com/tc39/proposal-destructuring-private) proposal. Now you can use private fields or methods in destructuring patterns:\\n\\n<table>\\n<tr>\\n<th>Input</th>\\n<th>Output</th>\\n</tr>\\n<tr>\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nclass Foo {\\n  #x = 0;\\n  y = 0;\\n\\n  equals(obj) {\\n    const { #x: x, y: y } = this;\\n\\n    return (\\n      x === obj.#x && y === obj.y\\n    );\\n  }\\n}\\n\\n```\\n\\n</td>\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nclass Foo {\\n  #x = 0;\\n  y = 0;\\n\\n  equals(obj) {\\n    const x = this.#x,\\n      { y } = this;\\n\\n    return (\\n      x === obj.#x && y === obj.y\\n    );\\n  }\\n}\\n```\\n\\n</td>\\n</tr>\\n</table>\\n\\nYou can enable it by adding the `@babel/plugin-proposal-destructuring-private` plugin to your configuration.\\n\\nTo minimize the transpiling footprint, the code generated by this plugin will still expect non-private destructuring and private elements support. If you need to compile them further, you can enable the relevant plugins (or you can use `@babel/preset-env`).\\n\\n### TypeScript 4.7 support ([#14359](https://github.com/babel/babel/pull/14359), [#14457](https://github.com/babel/babel/pull/14457), [#14476](https://github.com/babel/babel/pull/14476))\\n\\nTypeScript 4.7 supports different new syntactic features:\\n\\n- instantiation expressions, which allow specifying type arguments of functions without invoking them:\\n\\n  ```ts\\n  const identity = <T>(val: T) => val;\\n\\n  const stringIdentity = identity<string>; // (val: string) => string;\\n  ```\\n- explicit variance annotations for type arguments, to guide the TypeScript type checker when computing compatibility between different types:\\n  ```ts\\n  type Provider<out T> = () => T;\\n  type Consumer<in T> = (x: T) => void;\\n  type Mapper<in T, out U> = (x: T) => U;\\n  type Processor<in out T> = (x: T) => T;\\n  ```\\n  In this example, `Provide<string>` is a subtype of `Provider<string | number>` while `Consumer<string | number>` is a subtype of `Consumer<string>`.\\n- constraints for the `infer` operator in conditional types:\\n  ```ts\\n  type GetColor<T> =\\n    T extends { color: infer C extends \\"red\\" | \\"pink\\" }\\n      ? C\\n      : \\"unknown color\\";\\n  ```\\n\\nYou can read the full TypeScript 4.7 release announcement [on their blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-7/).\\n\\n### Inline `regenerator-runtime` helper ([#14538](https://github.com/babel/babel/pull/14538))\\n\\nStarting from Babel 7.18.0, `regenerator-runtime` is automatically injected in the same way that Babel injects the other runtime helpers, without relying on an implicit `regeneratorRuntime` global. When not using [`@babel/plugin-transform-runtime`](https://babeljs.io/docs/en/babel-plugin-transform-runtime), Babel will automatically inline the `regeneratorRuntime` helper:\\n- you can stop manually loading `regenerator-runtime` (with `import`, `require` or `<script>`);\\n- you can delete `\\"regenerator-runtime\\"` from your dependencies in `package.json`.\\n\\nFor example this is the output difference between old and new Babel versions when compiling `var f = function*() {};`:\\n```diff\\n+function _regeneratorRuntime() { /* ... */ }\\n\\n-var f = /*#__PURE__*/regeneratorRuntime.mark(function f() {\\n+var f = /*#__PURE__*/_regeneratorRuntime().mark(function f() {\\n-  return regeneratorRuntime.wrap(function f$(_context) {\\n+  return _regeneratorRuntime().wrap(function f$(_context) {\\n     while (1) {\\n       switch (_context.prev = _context.next) {\\n         case 0:\\n         case \\"end\\":\\n           return _context.stop();\\n       }\\n     }\\n   }, f);\\n });\\n```"},{"id":"/2022/02/02/7.17.0","metadata":{"permalink":"/babel-website/blog/2022/02/02/7.17.0","source":"@site/blog/2022-02-02-7.17.0.md","title":"7.17.0 Released: RegExp \'v\' mode and ... \ud83e\udd41 decorators!","description":"We just published Babel 7.17.0!","date":"2022-02-02T00:00:00.000Z","formattedDate":"February 2, 2022","tags":[],"readingTime":3.895,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs"}],"frontMatter":{"layout":"post","title":"7.17.0 Released: RegExp \'v\' mode and ... \ud83e\udd41 decorators!","author":"Babel Team","authorURL":"https://twitter.com/babeljs","date":"2022-02-02T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.17.0 Released"},"prevItem":{"title":"7.18.0 Released: Destructuring private elements and TypeScript 4.7","permalink":"/babel-website/blog/2022/05/19/7.18.0"},"nextItem":{"title":"7.16.0 Released: ESLint 8 and TypeScript 4.5","permalink":"/babel-website/blog/2021/10/29/7.16.0"}},"content":"We just published Babel 7.17.0!\\n\\nAfter years of [iterations](https://babeljs.io/blog/2018/09/17/decorators), rewrites and adjustments it looks like the [decorators proposal](https://github.com/tc39/proposal-decorators) has finally stabilized again on a new design! This release includes both parse and transform support for the new proposal.\\n\\nWe also implemented the [RegExp `v` flag proposal](https://github.com/tc39/proposal-regexp-set-notation) and added parsing support for [destructuring private fields](https://github.com/tc39/proposal-destructuring-private), both currently Stage 2. Lastly, a new experimental implementation of `@babel/register`.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.17.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://opencollective.com/babel#category-CONTRIBUTE) or [GitHub Sponsors](https://github.com/babel/babel?sponsor=1) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## Highlights\\n\\n### Decorators ([#14004](https://github.com/babel/babel/pull/14004), [#13681](https://github.com/babel/babel/pull/13681))\\n\\nAfter receiving feedback from JavaScript developers, engine developers and language experts, [the decorators proposal](https://github.com/tc39/proposal-decorators/) was rewritten to take into account multiple constraints and desires. We collaborated with the current proposal author, [@pzuraq](https://www.pzuraq.com/) to implement the new Stage 2 proposal in Babel.\\n\\nThe new implementation also supports decorating private class elements, as well as the new \\"class auto accessors\\" syntax:\\n\\n```js title=\\"JavaScript\\"\\n@defineElement(\\"button\\")\\nclass Button {\\n  @reactive accessor enabled = true; // class auto accessors\\n\\n  @event(\\"onClick\\") #handleClick() { // decorator on a private method\\n    console.log(\\"clicked!\\");\\n  }\\n}\\n```\\n\\nYou can enable the new proposal by passing the `\\"version\\": \\"2021-12\\"` option to [`@babel/plugin-proposal-decorators`](https://babeljs.io/docs/en/babel-plugin-proposal-decorators):\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\n    [\\"@babel/plugin-proposal-decorators\\", {\\n        \\"version\\": \\"2021-12\\"\\n    }]\\n  ]\\n}\\n```\\n\\n> \u26a0\ufe0f While the new decorators syntax is compatible with the previous proposal, the semantics are different: decorators already written for Babel _\\"legacy\\"_, Babel _older-but-not-legacy_, or TypeScript will not work with the new proposal.\\n\\nIf you want to help move the proposal forward, you can try using it and leave feedback in [their GitHub repository](https://github.com/tc39/proposal-decorators/issues).\\n\\n### RegExp set notation and properties of strings ([#14125](https://github.com/babel/babel/pull/14125))\\n\\nBabel now supports the [RegExp set notation and properties of strings](https://github.com/tc39/proposal-regexp-set-notation/) proposal, which introduces three new regular expression features behind a new `v` flag:\\n- Extended set notation, which allows computing difference, intersection and union of characters or strings sets\\n  ```js title=\\"JavaScript\\"\\n  /[\\\\p{Decimal_Number}--[0-9]]/v; // Non-ASCII decimal digits\\n  /[\\\\p{ASCII}&&\\\\p{Letter}]/v; // ASCII letters\\n  /[[\\\\p{ASCII}&&\\\\p{Letter}]\\\\p{Number}]/v; // ASCII letters, or any digit\\n  ```\\n- Properties of strings, which allow using `\\\\p` escapes with multi-codepoint properties\\n  ```js title=\\"JavaScript\\"\\n  \\"Did you see the \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe emoji?\\".match(/\\\\p{RGI_Emoji}/v). // [\\"\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe\\"]\\n  ```\\n- Multi-codepoint strings in sets, using a new `\\\\q` escape\\n  ```js title=\\"JavaScript\\"\\n  /[\\\\r\\\\n\\\\q{\\\\r\\\\n|NEWLINE}]/v; // Matches \\\\r, \\\\n, \\\\r\\\\n or NEWLINE\\n  ```\\n\\nYou can enable this proposal using the [`@babel/plugin-proposal-unicode-sets-regex`](https://babeljs.io/docs/en/babel-plugin-proposal-unicode-sets-regex) plugin:\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\"@babel/plugin-proposal-unicode-sets-regex\\"]\\n}\\n```\\n\\nBabel relies on different third-party packages to transform regular expressions: we are grateful to the maintainers of [regjsparser](https://github.com/jviereck/regjsparser/), [regjsgen](https://github.com/bnjmnt4n/regjsgen) and [regexpu-core](https://github.com/mathiasbynens/regexpu-core/) who took time to review our pull requests!\\n\\n### `@@` and `^^` topic tokens for Hack-style pipes ([#13973](https://github.com/babel/babel/pull/13973))\\n\\nWe are continuing to help the proposal authors evaluate different tokens for the [pipeline operator](https://github.com/tc39/proposal-pipeline-operator) proposal: one of the champions, [J. S. Choi](https://jschoi.org/), added support for two new tokens that you can try with the `topicToken` option:\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\n    [\\"@babel/plugin-proposal-pipeline-operator\\", {\\n      \\"proposal\\": \\"hack\\",\\n      \\"topicToken\\": \\"^^\\" // or \\"@@\\"\\n    }]\\n  ]\\n}\\n```\\n\\nYou can read more about the supported variations in the [`@babel/plugin-proposal-pipeline-operator`](https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator) docs.\\n\\n### Experimental `@babel/register` rewrite ([#13782](https://github.com/babel/babel/pull/13782))\\n\\nWe plan to release Babel 8 as an ESM package. However, this poses a big problem: how to load and run it synchronously in CommonJS packages?\\n\\nUsually most Babel consumers can run Babel asynchronously, or at least _load_ it asynchronously. This isn\'t true for [`@babel/eslint-parser`](https://www.npmjs.com/package/@babel/eslint-parser) (which integrates Babel\'s parser with ESLint) and [`@babel/register`](https://babeljs.io/docs/en/babel-register) (which can be used to transpile Node.js files on-the-fly), where we need to move parsing and transforming to a separate worker.\\n\\nBabel 7.16.0 exposes the new experimental `@babel/register` implementation at `@babel/register/experimental-worker`: it internally runs Babel asynchronously, so it\'s compatible with [`.mjs` configuration files](https://babeljs.io/docs/en/config-files#configuration-file-types) and with `.mjs` Babel plugins. It will be enabled by default in Babel 8, and you can already use it as a replacement for `@babel/register` with a few caveats:\\n- If you programmatically specify `@babel/register` options (using `require(\\"@babel/register\\")({ /* ... options */ })`), you must make sure that they are serializable. This means that you cannot pass plugin functions defined inline, but you must move them to a separate `./my-plugin.js` file or to a `babel.config.js` file.\\n- The new implementation is still experimental: it _should_ have the same features as the existing one, but there are a few [improvements](https://github.com/babel/babel/pull/14025#issuecomment-1003547657) that we are exploring.\\n\\nWe already released the new experimental `@babel/eslint-parser` implementation in [Babel 7.15.0](https://babeljs.io/blog/2021/07/26/7.15.0#preparing-babeleslint-parser-for-babel-8-13398httpsgithubcombabelbabelpull13398), exposed at `@babel/eslint-parser/experimental-worker`."},{"id":"/2021/10/29/7.16.0","metadata":{"permalink":"/babel-website/blog/2021/10/29/7.16.0","source":"@site/blog/2021-10-29-7.16.0.md","title":"7.16.0 Released: ESLint 8 and TypeScript 4.5","description":"We just published Babel 7.16.0!","date":"2021-10-29T00:00:00.000Z","formattedDate":"October 29, 2021","tags":[],"readingTime":2.56,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs"}],"frontMatter":{"layout":"post","title":"7.16.0 Released: ESLint 8 and TypeScript 4.5","author":"Babel Team","authorURL":"https://twitter.com/babeljs","date":"2021-10-29T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.16.0 Released"},"prevItem":{"title":"7.17.0 Released: RegExp \'v\' mode and ... \ud83e\udd41 decorators!","permalink":"/babel-website/blog/2022/02/02/7.17.0"},"nextItem":{"title":"7.15.0 Released: Hack-style pipelines, TypeScript const enums and Rhino target support","permalink":"/babel-website/blog/2021/07/26/7.15.0"}},"content":"We just published Babel 7.16.0!\\n\\nThis release enables [class static initialization blocks](https://github.com/tc39/proposal-class-static-block) by default. It includes support for a new variant of the [pipeline operator](https://github.com/tc39/proposal-pipeline-operator) proposal, as well as TypeScript 4.5 compatibility.\\n\\nFurthermore, `@babel/eslint-parser` now supports ESLint 8.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.16.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://github.com/babel/babel?sponsor=1) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## Highlights\\n\\n### Class static blocks enabled by default ([#13713](https://github.com/babel/babel/pull/13713))\\n\\n```js title=\\"JavaScript\\"\\nclass MyClass {\\n  static {\\n    doSomeInitialization(MyClass);\\n    console.log(\\"MyClass initialized!\\");\\n  }\\n}\\n```\\n\\nStatic blocks, that [reached Stage 4 in August](https://github.com/tc39/notes/blob/HEAD/meetings/2021-08/aug-31.md#class-static-initialization-blocks-for-stage-4), are now enabled by default in `@babel/parser` and `@babel/preset-env`.\\n\\nIf you were using the `classStaticBlock` parser plugin, or `@babel/plugin-syntax-class-static-block`, you can safely remove them from your config.\\n\\nIf you already use `@babel/preset-env`, you can now remove `@babel/plugin-proposal-class-static-block` from your config.\\n\\n### TypeScript 4.5 features ([#13802](https://github.com/babel/babel/pull/13802), [#13838](https://github.com/babel/babel/pull/13838))\\n\\nTypeScript 4.5 introduces a new syntax for marking imports as type-only: rather than marking the whole import statement, you can mark a single specifier:\\n```ts\\n// TypeScript 4.4\\nimport type { Foo } from \\"my-module\\";\\nimport { fooInstance } from \\"my-module\\";\\n\\n// TypeScript 4.5\\nimport { type Foo, fooInstance } from \\"my-module\\";\\n```\\n\\nIt also supports two new file extensions: `.mts` and `.cts`, that mirror `.mjs` and `.cjs`. When passing an `.mts` or `.cts` file to Babel with `@babel/preset-typescript` enabled, it uses the file extension to detect the desired source type (`\\"module\\"` or `\\"script\\"`).\\n\\n`.mts` and `.cts` file cannot contain JSX code by default, but they cannot contain TypeScript annotations that would be ambiguous with JSX (`<Type> cast` and `<T>() => {}`).\\n\\nYou can read the full TypeScript 4.5 release post [on their blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/).\\n\\n### `^` topic token for Hack-style pipes ([#13749](https://github.com/babel/babel/pull/13749))\\n\\nThe champions of the [pipeline operator](https://github.com/tc39/proposal-pipeline-operator) proposal are considering [various topic tokens](https://github.com/tc39/proposal-pipeline-operator/wiki/Bikeshedding-the-Hack-topic-token) (the reference to the value from the previous pipeline step).\\n\\n`@babel/plugin-proposal-pipeline-operator` (and the `\\"pipelineOperator\\"` parser plugin) now support three of them: `#`, `^` and `%`.\\n\\n```js title=\\"JavaScript\\"\\nlet values = getNames()\\n  |> [\\"default\\"].concat(^)\\n  |> await loadValues(^);\\n```\\n\\nYou can enable the current version of the pipeline operator proposal using the `proposal: \\"hack\\"` option, and you can choose the topic token using `topicToken: \\"^\\"`:\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\n    [\\"@babel/plugin-proposal-pipeline-operator\\", {\\n      \\"proposal\\": \\"hack\\",\\n      \\"topicToken\\": \\"^\\"\\n    }]\\n  ]\\n}\\n```\\n\\n### ESLint 8 support in `@babel/eslint-parser` ([#13782](https://github.com/babel/babel/pull/13782))\\n\\n`@babel/eslint-parser` now supports ESLint 8: you can update your `\\"eslint\\"` dependency and it will just work.\\n\\nIf you are an ESLint plugin author, pay attention to the breaking change in the AST for class fields and private methods: when using ESLint 7 they follow the [Babel AST shape](https://github.com/babel/babel/blob/v7.16.0/packages/babel-parser/ast/spec.md); when using ESLint 8 they follow ESLint and the [ESTree specification](https://github.com/estree/estree/blob/91f49977f1f05dea86c112a070a703bb37f5722d/es2022.md#propertydefinition). This is because ESLint introduced support for these new class features starting from ESLint 8."},{"id":"/2021/07/26/7.15.0","metadata":{"permalink":"/babel-website/blog/2021/07/26/7.15.0","source":"@site/blog/2021-07-26-7.15.0.md","title":"7.15.0 Released: Hack-style pipelines, TypeScript const enums and Rhino target support","description":"This release enables parsing top-level await (Stage 4 at the May meeting) and transforming ergonomic brand checks for private fields (Stage 4 at the July meeting) by default. There is also now support for the Hack-style pipeline operator. We also improved our TypeScript support, implementing transform support for const enums and namespace aliases, and we expanded our heuristics to add .displayName to React components created by React.createContext() (#13501).","date":"2021-07-26T00:00:00.000Z","formattedDate":"July 26, 2021","tags":[],"readingTime":3.535,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs"}],"frontMatter":{"layout":"post","title":"7.15.0 Released: Hack-style pipelines, TypeScript const enums and Rhino target support","author":"Babel Team","authorURL":"https://twitter.com/babeljs","date":"2021-07-26T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.15.0 Released"},"prevItem":{"title":"7.16.0 Released: ESLint 8 and TypeScript 4.5","permalink":"/babel-website/blog/2021/10/29/7.16.0"},"nextItem":{"title":"Babel is used by millions, so why are we running out of money?","permalink":"/babel-website/blog/2021/05/10/funding-update"}},"content":"This release enables parsing top-level await (Stage 4 at the [May](https://github.com/tc39/agendas/blob/master/2021/05.md) meeting) and transforming ergonomic brand checks for private fields (Stage 4 at the [July](https://github.com/tc39/agendas/blob/master/2021/07.md) meeting) by default. There is also now support for the [Hack-style](https://github.com/js-choi/proposal-hack-pipes) pipeline operator. We also improved our TypeScript support, implementing transform support for `const` enums and namespace aliases, and we expanded our heuristics to add `.displayName` to React components created by `React.createContext()` ([#13501](https://github.com/babel/babel/pull/13501)).\\n\\nWe also introduced a new compiler assumption, [`noIncompleteNsImportDetection`](https://babeljs.io/docs/en/assumptions#noincompletensimportdetection), to produce a smaller output when compiling ECMAScript modules to CommonJS without worrying about partially initialized namespace imports caused by module cycles.\\n\\nAdditionally, you can now specify [Rhino](https://mozilla.github.io/rhino/) as a compilation target.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.15.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nWe\'re really grateful for all the support the community has shown over the last months, since our [funding post](https://babeljs.io/blog/2021/05/10/funding-update) update in May. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss about sponsorships!\\n\\n## Highlights\\n\\n### ECMAScript features enabled by default\\n\\nIn the last two meetings, the [top-level `await`](https://github.com/tc39/proposal-top-level-await) and [ergonomic brand checks for private fields](https://github.com/tc39/proposal-private-fields-in-in) proposals reached Stage 4.\\n\\n```js title=\\"JavaScript\\"\\nimport * as db from \\"database\\";\\n\\nawait db.connect(); // top-level await\\n\\nclass DBConnector {\\n  #password;\\n  static isConnector(obj) {\\n    return #password in obj; // ergonomic brand checks\\n  }\\n}\\n```\\n\\nBabel now supports them by default, so you can remove the following plugins from your configuration:\\n- `@babel/plugin-syntax-top-level-await`\\n- `@babel/plugin-syntax-private-property-in-object`\\n- `@babel/plugin-proposal-private-property-in-object`\\n\\nPlease note that Babel can currently only parse top-level `await` and cannot transform it.\\n\\n### New TypeScript features ([#13324](https://github.com/babel/babel/pull/13324), [#13528](https://github.com/babel/babel/pull/13528))\\n\\n[TypeScript 4.4](https://devblogs.microsoft.com/typescript/announcing-typescript-4-4/) doesn\'t include any new syntax that we had to implement, other than a minor restriction: you cannot specify the value of an abstract class field.\\n\\n```typescript=\\nabstract class C {\\n    abstract prop = 1; // now a SyntaxError!\\n}\\n```\\n\\nHowever, we did add two TypeScript features that we have been missing for a long time: `const` enums and namespace aliases (`import Alias = Namespace`).\\n\\nPreviously we presented an error when using `const` enums since it requires type information to compile correctly. As a workaround, the community built plugins such as [`babel-plugin-const-enum`](https://github.com/dosentmatter/babel-plugin-const-enum#readme). Babel now ignores the `const` modifier when compiling enums, which matches TypeScript\'s behavior when using the `--isolatedModules` option.\\n\\nIf you want a more optimized output similar to the default code produced by TypeScript, you can enable the [`optimizeConstEnums`](https://babeljs.io/docs/en/babel-preset-typescript#optimizeconstenums) option of `@babel/plugin-tranform-typescript` or `@babel/preset-typescript`.\\n\\n```typescript\\n// Input\\nconst enum Animals { Dog }\\nconsole.log(Animals.Dog);\\n\\n// Output (default)\\nvar Animals;\\n(function (Animals) {\\n  Animals[Animals[\\"Dog\\"] = 0] = \\"Dog\\";\\n})(Animals || (Animals = {}));\\n\\nconsole.log(Animals.Dog);\\n\\n// Output with `optimizeConstEnums`\\nconsole.log(0);\\n```\\n### Hack-style pipeline operator support ([#13191](https://github.com/babel/babel/pull/13191), [#13416](https://github.com/babel/babel/pull/13416))\\n\\n[\\"Hack-style pipelines\\"](https://github.com/js-choi/proposal-hack-pipes/) is a new flavor of the [pipeline operator](https://github.com/tc39/proposal-pipeline-operator) proposal, intended to replace the \\"smart mix\\" variant.\\n\\nHack-style pipelines require you to _always_ use a \\"topic token\\" (such as `#`) to reference the value of the previous pipeline step:\\n\\n```js title=\\"JavaScript\\"\\n// Input\\n\\"World\\"\\n  |> `Hello, ${#}!`\\n  |> alert(#);\\n\\n// output\\nvar _ref, _ref2;\\n\\n_ref2 = (_ref = \\"World\\", `Hello, ${_ref}!`), alert(_ref2);\\n```\\n\\nYou can test this proposal by enabling the [`proposal: \\"hack\\"`](https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator#usage) option in `@babel/plugin-proposal-pipeline-operator`. You must also choose which topic token to use, between `\\"#\\"` and `\\"%\\"`:\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\n    [\\"@babel/plugin-proposal-pipeline-operator\\", {\\n      \\"proposal\\": \\"hack\\",\\n      \\"topicToken\\": \\"#\\"\\n    }]\\n  ]\\n}\\n```\\n\\n### Preparing `@babel/eslint-parser` for Babel 8 ([#13398](https://github.com/babel/babel/pull/13398))\\n\\nWe have been slowly continuing to work on Babel 8 in the past months. We are not ready for a Babel 8 beta release yet, but we are starting to expose the first experimental changes.\\n\\nWe plan to fully convert Babel from CommonJS to ECMAScript modules, but this has a problem: configuration loading will be asynchronous _more often_, and `@babel/eslint-parser` can only work synchronously (because ESLint only supports synchronous parsers).\\n\\n`@babel/eslint-parser` 7.15.0 exposes a new entry-point: `@babel/eslint-parser/experimental-worker`. It moves the Babel config loading and parsing task to a separate worker which is managed synchronously from the main thread, while still supporting async configuration loading. As an immediate advantage for Babel 7, it allows using native ECMAScript modules for Babel configuration files even when using `@babel/eslint-parser`.\\n\\nYou can help us by testing it now in your existing projects, and reporting any bug [on our issues page](https://github.com/babel/babel/issues/new?assignees=&labels=i%3A+needs+triage&template=bug_report.yml&title=%5BBug%5D%3A+):\\n\\n```js title=\\"JavaScript\\"\\n// .eslintrc.js\\nmodule.exports = {\\n  parser: \\"@babel/eslint-parser/experimental-worker\\"\\n};\\n```\\n\\n> \u2139\ufe0f This entry-point requires Node.js >= 12.3.0"},{"id":"/2021/05/10/funding-update","metadata":{"permalink":"/babel-website/blog/2021/05/10/funding-update","source":"@site/blog/2021-05-10-funding-update.md","title":"Babel is used by millions, so why are we running out of money?","description":"Since 2018, Babel has been doing a funding experiment: can full time work on Babel be sustained? We\'ve learned the answer might be no.","date":"2021-05-10T00:00:00.000Z","formattedDate":"May 10, 2021","tags":[],"readingTime":7.45,"hasTruncateMarker":true,"authors":[{"name":"Babel Core Team"}],"frontMatter":{"layout":"post","title":"Babel is used by millions, so why are we running out of money?","author":"Babel Core Team","date":"2021-05-10T00:00:00.000Z","categories":"announcements","image":"https://i.imgur.com/tJ9p4uS.png","share_text":"Babel is used by millions, so why are we running out of money?"},"prevItem":{"title":"7.15.0 Released: Hack-style pipelines, TypeScript const enums and Rhino target support","permalink":"/babel-website/blog/2021/07/26/7.15.0"},"nextItem":{"title":"7.14.0 Released: New class features enabled by default, TypeScript 4.3, and better CommonJS interop","permalink":"/babel-website/blog/2021/04/29/7.14.0"}},"content":"<head>\\n  <meta property=\\"og:site\\" content=\\"@babeljs\\" />\\n</head>\\n\\nSince 2018, Babel has been doing a [funding experiment](https://babeljs.io/blog/2019/11/08/babels-funding-plans): can full time work on Babel be sustained? We\'ve learned the answer might be no.\\n\\n\x3c!-- truncate --\x3e\\n\\nIn November 2019, after successfully paying [Henry](https://twitter.com/left_pad) a salary for over a year, we [expanded our goal](https://babeljs.io/blog/2019/11/08/babels-funding-plans) to also support three additional maintainers: [J\xf9nli\xe0ng](https://twitter.com/JLHwung), [Kai](https://twitter.com/kai_cataldo), and [Nicol\xf2](https://twitter.com/NicoloRibaudo).\\n\\nPart of the Babel team ([Nicol\xf2](https://twitter.com/NicoloRibaudo), [J\xf9nli\xe0ng](https://twitter.com/JLHwung) and [Henry](https://twitter.com/left_pad)) is still being paid a salary to work on Babel, but we now need to make some adjustments in light of the donations we are currently receiving. This update is to talk about that and ask for further support from the community.\\n\\n## Looking Back\\n\\nIn 2018, Henry [left his job](https://www.henryzoo.com/in-pursuit-of-open-source-part-1/) to see if he could make a living working on open source and Babel, looking to people like [Evan You](https://twitter.com/youyuxi) as an example and for advice. He had already started work on getting more funding through the [Open Collective](https://opencollective.com/babel) that we had set up in 2017 to support the project and specifically our previous core team member [Logan Smyth](https://github.com/loganfsmyth), but it was difficult to do so early on while working half-time.\\n\\nAfter a few months, the fundraising efforts allowed paying Henry every month: we settled on \\\\$11,000 per month as a baseline salary for working full-time on open source. We had a large grant (\\\\$10k for 10 months) from [Handshake](https://handshake.org/grant-sponsors/) which initially helped boost our funds, but even when it ended we didn\'t have problems paying our team thanks to some amazing sponsors such as Airbnb, Trivago, Gatsby, AMP, and Salesforce.\\n\\nWe didn\'t want to stop there. We thought that by demonstrating our ability to create and _pay_ a strong team, more features and improvements (and in turn, value) would be delivered via Babel, which would continue the momentum of funding and sponsorship. We decided to start paying [J\xf9nli\xe0ng](https://twitter.com/jlhwung), [Nicol\xf2](https://twitter.com/NicoloRibaudo) and [Kai](https://twitter.com/kai_cataldo) a \\"part-time\\" rate: we could initially afford \\\\$2,000 USD per month. Our hope was by [announcing this plan](https://babeljs.io/blog/2019/11/08/babels-funding-plans) and continuing our fundraising efforts, we would be able to increase the budget and raise them to the full-time rate.\\n\\n## Where Babel is Today\\n\\nIt has been more than a year since then and we\'ve both done and learned a lot.\\n\\n[We\'ve implemented](https://babel.dev/docs/en/features-timeline) support for many new ECMAScript proposals, kept up with every new TypeScript and Flow release, and designed [new features](https://babel.dev/assumptions) to allow producing smaller compiled output. We are now nearing the next major release, Babel 8.\\n\\nBabel continues to be used by thousands of [companies all over the world](https://babeljs.io/en/users.html). It\'s integrated into all kinds of frameworks in the JavaScript ecosystem, whether it\'s React, Next.js, Vue, Ember, Angular, etc. We are hitting over [117 million downloads/month](https://www.npmjs.com/package/@babel/core). It powers custom plugins and optimizations in varied scenarios like CSS-in-JS, GraphQL, or localization across enormous code bases.\\n\\nBabel also has become the intersection where practioners and language designers meet. We believe that it\'s become a vital part of the process used to test new ECMAscript proposals (hopefully, not with too many unstable proposals in production!). This creates the ability for JavaScript developers to try new features and give feedback to the TC39 committee and ultimately influence how the language evolves. Babel doesn\'t represent any individual company\'s interest but hopefully the JavaScript users eagerness to participate in new ideas. Even if you or your company don\'t directly use Babel, you can still directly benefit from how it can help standardizing language features.\\n\\n## Our Current Funding Situation\\n\\nEvery project has unique funding propositions and problems. For Babel, people often don\'t directly interact with it: like most build tools, you set them up once at the beginning and then forget about them (until you find a bug, sometimes!).\\n\\nYou won\'t see job offers for a \\"Babel developer\\", even if most of the major JS frameworks are used with Babel. Additionally, with the growth of pre-configured frameworks such as Next.js that lift the responsibility of managing the underlying build tools from their users, it\'s not uncommon to use Babel without even knowing it. This makes it harder for our users to justify sponsoring us to their companies.\\n\\nFrom the beginning, we knew we wouldn\'t have enough to pay anyone a full time salary, so Henry has been spending a lot of time attempting to get continued funding, giving talks at conferences and talking to companies. However, 2020 has negatively affected our funding, despite the tech industry\'s growth during this time. We lost some big sponsors, and Kai had to step down to get full-time work at another job.\\n\\nWe were hoping to see a continued increase in donations to be able to increase what J\xf9nli\xe0ng and Nicol\xf2 where taking, but it didn\'t happen.\\n\\n\x3c!-- Image source: https://observablehq.com/@nicolo-ribaudo/babel-opencollective-donations as of Apr 20, accounting -18k to spend this month (3*6k) --\x3e\\n\\n![Chart showing our OpenCollective balance decreasing since mid 2020](https://i.imgur.com/bsSHoRF.png)\\n\\n## The Future\\n\\nDespite these funding difficulties, we still want to keep paying our core team, in order to continue improving Babel. We want to focus on making Babel easier to configure, more performant, and produce more optimized output. We want to continue implementing new proposals while also ensuring that existing features are rock solid. We want to be able to spend time on better documentation of not just Babel itself but JavaScript and language design, creating an environment where any developer can tinker with making their own syntax if they choose. There\'s a large scope not in terms of the code we write but opportunities to bring more people into the language design space for people who might not have ever considered it. We have also published [a roadmap](https://babeljs.io/docs/en/roadmap#babel-2021-roadmap) to better communicate our medium-term goals.\\n\\nWe strongly believe that working in open source should be a viable and sustainable career path. We should be bringing everyone _up_ to the same level, not _down_. However, we need to face the fact that this would mean draining [our current balance](https://opencollective.com/babel#category-BUDGET) in just a few months.\\n\\nEveryone taking smaller and smaller amounts ends up creating a false sense of sustainability. It lowers how we value our own work, and what sponsors perceive to be sustainable amount of funding.\\n\\nThe reality is that, without more funding, we risk not being able to maintain the high standard of support and development that Babel and its users deserve. We risk losing more team members, who deserve to make a decent living in line with their skill level. The open source ecosystem also risks under-supporting a critical and widely used piece of technology.\\n\\n## Our Ask\\n\\nFor now, Nicol\xf2, Henry, and J\xf9nli\xe0ng will all be paid a temporary rate of \\\\$6,000 per month. This doesn\'t solve the problem, but it gives us time while increasing the initial temporary \\\\$2,000 USD salaries. The burn rate will still be more than the donations we currently receive each month, but our current balance allows us to sustain this amount until the end of 2021.\\n\\nWe\'ll do our best to balance all the priorities, while at reduced capacity due to being able to fund less of people\'s time and needing to spend some of that time finding new sponsors. Babel is not a company, a product, or service. And we have a small team, so we are the same people working on engineering and on funding. But it\'s a compromise we don\'t think we should have to make, considering the huge value that Babel delivers.\\n\\nTo fully fund the currently paid maintainers (but we would like to expand who is being paid, to include the whole core team), we need at least \\\\$333,000 per year, which is 2x what we\'re currently bringing in. Considering the amounts of money in the tech sector, this seems tiny in comparison\u2014but it would make a big difference to Babel. Our story and stories like it make a big difference to the health and sustainability of the open source ecosystem overall.\\n\\n**So, our ask is to help fund our work**, via [Open Collective](https://opencollective.com/babel) and [GitHub Sponsors](https://github.com/sponsors/babel). Though individual contributions do matter (and we deeply appreciate them), we are really looking for more companies to step up and become [corporate sponsors](https://opencollective.com/babel/contribute), alongside our current sponsors like AMP, Airbnb, Salesforce, GitPod, and others. If it would be better for your company to sustain us in other ways, we are also open to hearing any ideas. Reach out to us directly or by email at team@babeljs.io.\\n\\nWe intensely hope that we\'ll reach our goals: more and more companies use Babel to deliver their products, and what we are asking for is a tiny fraction of the value we provide. Babel is relied upon by a big part of the web, and it\'s in the interests of everyone to ensure that the project continues being maintained at the same quality levels as it is now.\\n\\n<div style={{display:\\"flex\\", justifyContent:\\"space-around\\", alignItems:\\"center\\"}}>\\n  <a href=\\"https://opencollective.com/babel/donate\\" target=\\"_blank\\" style={{all:\\"unset\\",\xa0cursor:\\"pointer\\"}}>\\n    <img alt=\\"Donate to our OpenCollective!\\" src=\\"https://opencollective.com/babel/donate/button@2x.png?color=blue\\" width=\\"300\\" />\\n  </a>\\n  <iframe src=\\"https://github.com/sponsors/babel/button\\" title=\\"Sponsor Babel on GitHub\\" height=\\"35\\" width=\\"300\\" style={{border: \\"0\\", background: \\"transparent\\"}}></iframe>\\n</div>"},{"id":"/2021/04/29/7.14.0","metadata":{"permalink":"/babel-website/blog/2021/04/29/7.14.0","source":"@site/blog/2021-04-29-7.14.0.md","title":"7.14.0 Released: New class features enabled by default, TypeScript 4.3, and better CommonJS interop","description":"Babel 7.14.0 is out!","date":"2021-04-29T00:00:00.000Z","formattedDate":"April 29, 2021","tags":[],"readingTime":4.845,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs"}],"frontMatter":{"layout":"post","title":"7.14.0 Released: New class features enabled by default, TypeScript 4.3, and better CommonJS interop","author":"Babel Team","authorURL":"https://twitter.com/babeljs","date":"2021-04-29T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.14.0 Released"},"prevItem":{"title":"Babel is used by millions, so why are we running out of money?","permalink":"/babel-website/blog/2021/05/10/funding-update"},"nextItem":{"title":"7.13.0 Released: Records and Tuples, granular compiler assumptions, and top-level targets","permalink":"/babel-website/blog/2021/02/22/7.13.0"}},"content":"Babel 7.14.0 is out!\\n\\nThis release enables class fields and private methods by default (they were promoted to Stage 4 during the recent April [TC39 meeting](https://github.com/tc39/agendas/blob/master/2021/04.md)!) and adds brand checks for private fields and static class blocks to `@babel/preset-env`\'s `shippedProposals` option.\\n\\nWe added support for Stage 1 [async do expressions](https://github.com/tc39/proposal-async-do-expressions) (using `@babel/plugin-proposal-async-do-expressions`), which extends the Stage 1 [do expression](https://github.com/tc39/proposal-do-expressions) proposal.\\n\\nThanks to [Sosuke Suzuki](https://github.com/sosukesuzuki) and [Pig Fang](https://github.com/g-plane), Babel can now handle [TypeScript 4.3](https://devblogs.microsoft.com/typescript/announcing-typescript-4-3-beta/) features. `@babel/parser`  also has a new option to correctly parse [TypeScript declaration](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html) files.\\n\\nFinally, we introduced a new `importInterop: node` option to make it easier to produce dual modules by compiling ECMAScript imports to CommonJS that follow Node.js semantics.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.14.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## Highlights\\n\\n### New class features enabled by default\\n\\nThe class fields and private methods proposals just reached Stage 4 and will be officially included in ECMAScript 2022! This was more of a formality since the semantics were already finalized and they\'ve already been implemented in all the major browsers.\\n\\nYou can read more details about this new syntax on MDN ([public fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields), [private fields and methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields)).\\n\\n```js title=\\"JavaScript\\"\\nclass Check {\\n  static className = \\"Check\\"; // static public class field\\n\\n  #value = 3; // # means private!\\n\\n  get #double() { // private getter\\n    return this.#value * 2; // using a private field\\n  }\\n}\\n```\\n\\nThus, you can remove `@babel/plugin-proposal-class-properties` and `@babel/plugin-proposal-private-methods`, since they are now enabled by default in [`@babel/preset-env`](https://babeljs.io/docs/en/babel-preset-env).\\n\\n> \u26a0\ufe0f Webpack supports this syntax natively as of [v5.36.0](https://github.com/webpack/webpack/releases/tag/v5.36.0).\\n> For older versions, a workaround that works with simpler Webpack setups is to manually enable the `acorn-stage3` plugin, by installing `acorn-stage3` and adding these lines at the beginning of your `webpack.config.js` file:\\n> ```js title=\\"JavaScript\\"\\n> const acorn = require(require.resolve(\\"acorn\\", { paths: [require.resolve(\\"webpack\\")] })); // Require webpack\'s acorn dependency\\n> acorn.Parser = acorn.Parser.extend(require(\\"acorn-stage3\\")); // Enable the Stage 3 plugin\\n> ```\\n> If this doesn\'t work for you, or if you use a different tool that doesn\'t support class fields, you still need to use the Babel plugins to transform them.\\n\x3c!-- Tested at https://github.com/nicolo-ribaudo/romajs-todo-app/blob/d5e38f2189d0ed7a7cf87cd2c35de5b4af7d2f6a/webpack.config.js#L6 --\x3e\\n\\nIf you are using `@babel/preset-env`\'s [`shippedProposals`](https://babeljs.io/docs/en/babel-preset-env#shippedproposals) option, it now also includes the `@babel/plugin-proposal-private-property-in-object` (introduced in [7.10](https://babel.dev/blog/2020/05/25/7.10.0#private-fields-in-in-11372httpsgithubcombabelbabelpull11372)) and `@babel/plugin-proposal-class-static-block` (introduced in [7.12](https://babel.dev/blog/2020/10/15/7.12.0#class-static-blocks-12079httpsgithubcombabelbabelpull12079-12143httpsgithubcombabelbabelpull12143)) plugins: you can safely remove them from your configuration.\\n\\n```js title=\\"JavaScript\\"\\nclass Foo {\\n  #bar = \\"bar\\";\\n\\n  test(obj) {\\n    return #bar in obj; // private-property-in-object\\n  }\\n\\n  static #x = 42;\\n  static y;\\n  static { // static block\\n    try {\\n      this.y = doSomethingWith(this.#x);\\n    } catch {\\n      this.y = \\"unknown\\";\\n    }\\n  }\\n}\\n```\\n\\n### Better ESM-CJS interop\\n\\nWhen importing a CommonJS file from an ECMAScript module, Node.js has different semantics than most of the tools in the JavaScript ecosystem.\\n\\nSuppose that you are depending on the following library:\\n\\n```js title=\\"JavaScript\\"\\nexport default function two() {\\n  return 2;\\n}\\n```\\n\\nAnd the author of this library doesn\'t publish it as-is, but compiles it to CommonJS:\\n\\n```js title=\\"JavaScript\\"\\n\\"use strict\\";\\n\\nObject.defineProperty(exports, \\"__esModule\\", { value: true });\\nexports.default = two;\\n\\nfunction two() {\\n  return 2;\\n}\\n```\\n\\nWhen importing this library with Babel (or TypeScript, Rollup or similar tools) and compiling your code to CommonJS, it will look like:\\n\\n```js title=\\"JavaScript\\"\\nimport two from \\"two\\";\\nconsole.log(two());\\n```\\n\\nOne day, you decide to provide two versions of your code: a compiled CommonJS one, and one using native ECMAScript modules.\\n\\nWhile the compiled version works, the ESM one will throw `TypeError: two is not a function`. This is because in Node.js, the default import is _not_ the dependency\'s `exports.default`, but the whole `module.exports` object instead.\\n\\nYou could change your code to:\\n\\n```js title=\\"JavaScript\\"\\nimport two from \\"two\\";\\nconsole.log(two.default());\\n```\\n\\nHowever, this new code has a problem: it now doesn\'t work when compiled, because `two.default` is not a function.\\n\\nBabel v7.14.0 adds a new `importInterop: \\"node\\"` option in the [`@babel/plugin-transform-modules-commonjs`](https://babeljs.io/docs/en/babel-plugin-transform-modules-commonjs) plugin that allows `import` statements to match the native Node.js behavior. You can read more about this option [in the docs](https://babeljs.io/docs/en/babel-plugin-transform-modules-commonjs#importInterop).\\n\\n[Nicol\xf2](https://github.com/nicolo-ribaudo) from our team also [contributed](https://github.com/rollup/plugins/pull/838) a similar option to `@rollup/plugin-commonjs`, which will be out in the next release. Our goal is to help the ecosystem migrate to native ECMAScript modules by providing an easier migration path.\\n\\n### TypeScript 4.3\\n\\nThe new TypeScript version, which will be released as stable in May, supports a few new features:\\n\\n- `override` modifiers in class elements\\n- static index signatures (`[key: KeyType]: ValueType`) in classes\\n- `get`/`set` in type declarations\\n\\nYou can read more about them in the [TypeScript 4.3 release post](https://devblogs.microsoft.com/typescript/announcing-typescript-4-3/). This is supported through [@babel/preset-typescript](https://babeljs.io/docs/en/babel-preset-typescript).\\n\\n### `async do` expressions\\n\\n[`async do` expressions](https://github.com/tc39/proposal-async-do-expressions) are a Stage 1 proposal built on top of the [`do` expressions](https://github.com/tc39/proposal-do-expressions) proposal.\\n\\nThey allow using asynchronous blocks within synchronous code, and those blocks are evaluated as a promise:\\n\\n```js title=\\"JavaScript\\"\\nfunction sync() {\\n  let x = async do {\\n    let res = await Promise.resolve(\\"Third!\\");\\n    console.log(\\"Second!\\");\\n    res;\\n  };\\n  console.log(\\"First!\\");\\n  x.then(console.log);\\n}\\n\\nconsole.log(sync());\\n// Logs:\\n// - \\"First!\\"\\n// - \\"Second!\\"\\n// - \\"Third!\\"\\n```\\n\\nYou can test this proposal (and report feedback!) by adding the [`@babel/plugin-proposal-do-expressions`](https://babeljs.io/docs/en/babel-plugin-proposal-do-expressions) and [`@babel/plugin-proposal-async-do-expressions`](https://babeljs.io/docs/en/babel-plugin-proposal-async-do-expressions) plugins to your Babel configuration.\\n\\n> \u26a0\ufe0f These proposals are _highly experimental_. They can, and likely will continue to evolve. It could take years before they are standardized, and may even be rejected altogether. You are welcome to test them, but we do not recommend using them in production.\\n\\n---\\n\\nDo you have any comment or question? Discuss [on GitHub](https://github.com/babel/babel/discussions/13230)!"},{"id":"/2021/02/22/7.13.0","metadata":{"permalink":"/babel-website/blog/2021/02/22/7.13.0","source":"@site/blog/2021-02-22-7.13.0.md","title":"7.13.0 Released: Records and Tuples, granular compiler assumptions, and top-level targets","description":"We just published Babel 7.13.0, the first minor release of 2021!","date":"2021-01-01T00:00:00.000Z","formattedDate":"January 1, 2021","tags":[],"readingTime":6.185,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.13.0 Released: Records and Tuples, granular compiler assumptions, and top-level targets","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2021-01-01T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.13.0 Released"},"prevItem":{"title":"7.14.0 Released: New class features enabled by default, TypeScript 4.3, and better CommonJS interop","permalink":"/babel-website/blog/2021/04/29/7.14.0"},"nextItem":{"title":"7.12.0 Released: TypeScript 4.1, strings as import/export names, and class static blocks","permalink":"/babel-website/blog/2020/10/15/7.12.0"}},"content":"We just published Babel 7.13.0, the first minor release of 2021!\\n\\nThis release includes some important features to `@babel/core`: a `targets` option (similar to `@babel/preset-env`\'s one) that can be shared across different plugins, an `assumptions` option to precisely tune your configuration to produce a smaller compilation output, and support for plugins and presets written using native ECMAScript modules.\\n\\nBabel now supports transforming the [Records and Tuples](https://github.com/tc39/proposal-record-tuple) ECMAScript proposal, which brings immutable data structures and structural equality to JavaScript, and parsing the [Module Blocks](https://github.com/tc39/proposal-js-module-blocks) proposal.\\n\\nAdditionally, we added support for some new Flow and TypeScript features.\\n\\nYou can read the full changelog on [GitHub](https://github.com/babel/babel/releases/tag/v7.13.0).\\n\\n\x3c!-- truncate --\x3e\\n\\n### Funding Update\\n\\nWe have joined the \\"GitHub Sponsors for organizations\\" program, so you can now sponsor us directly through GitHub \ud83d\ude0a.\\n\\n<iframe src=\\"https://github.com/sponsors/babel/button\\" title=\\"Sponsor Babel on GitHub\\" height=\\"35\\" width=\\"116\\" style={{border: \\"0\\", margin: \\"auto\\", display: \\"block\\"}}></iframe>\\n\\nThese funds are used to support our team\'s (currently one full-time and three part-time maintainers) continued efforts in improving stability and developing new features.\\n\\nBoth our donations and expenses are openly tracked through our [Open Collective](https://opencollective.com/babel) page, where we will also track donations coming from GitHub Sponsors.\\n\\nWe welcome donations from both individual and companies. If your company is interested in becoming a Gold tier sponsor (\\\\$1k/month) and wants to discuss more, please reach out to [team@babeljs.io](mailto:team@babeljs.io)!\\n\\n## Highlights\\n\\n### Top-level `targets` option ([#12189](https://github.com/babel/babel/pull/12189), [RFC](https://github.com/babel/rfcs/pull/2))\\n\\n`@babel/preset-env`\'s `targets` option allows users to specify their target environments, automatically choosing which syntax to transform and what polyfills to inject. Since releasing `@babel/preset-env`, we\'ve learned that plugins _themselves_ can also benefit from knowing your targets. Currently, this can a bit cumbersome, as you have to specify your targets twice (for example, if you are using our [new polyfill plugins](https://github.com/babel/babel-polyfills)). By introducing `targets` as a top level option, you now only have to specify your targets once:\\n\\n<table>\\n<tbody style={{width: \\"100%\\", display: \\"table\\", tableLayout: \\"fixed\\"}}>\\n<tr>\\n<th>Old configuration</th>\\n<th>New configuration</th>\\n</tr>\\n<tr>\\n<td>\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"presets\\": [\\n    [\\"@babel/preset-env\\", {\\n        \\"targets\\": \\">1%, not ie 11\\"\\n    }]\\n  ],\\n  \\"plugins\\": [\\n    [\\"polyfill-es-shims\\", {\\n      \\"targets\\": \\">1%, not ie 11\\"\\n    }]\\n  ]\\n}\\n```\\n\\n</td>\\n<td>\\n\\n```json title=\\"JSON\\"\\n{\\n  \\"targets\\": \\">1%, not ie 11\\",\\n  \\"presets\\": [\\"@babel/preset-env\\"],\\n  \\"plugins\\": [\\"polyfill-es-shims\\"]\\n}\\n```\\n\\n</td>\\n</tr>\\n</tbody>\\n</table>\\n\\nWe recommended converting your Babel config to use the new top-level `targets` option, as it has the following additional benefits:\\n\\n1. It has better handling of the [`esmodules: true`](https://babel.dev/docs/en/options#targetsesmodules) target. (it\'s intersected with the other targets, rather than replacing them)\\n2. As we introduce additional `targets`-related support in our plugins, you\'ll automatically benefit from more optimized output!\\n\\nYou can read the details about this new option in its [RFC](https://github.com/babel/rfcs/blob/master/rfcs/0002-top-level-targets.md).\\n\\n> \ud83d\udd2e In the future we might explore moving `@babel/preset-env` into `@babel/core` so that you don\'t have to install an additional package to get started with Babel. This new option can be seen as the first step in that direction!\\n\\n### Top-level `assumptions` option ([#12219](https://github.com/babel/babel/pull/12219), [RFC](https://github.com/babel/rfcs/pull/5))\\n\\nMany of our plugins have a `loose` option, which tells Babel to generate smaller/faster output by making certain assumptions about your code and ignoring certain edge cases in the JavaScript spec.\\n\\nHowever, `loose` has some problems that lead to user confusion: the term itself does not help to describe how exactly it affects the compiler\'s behavior and, worse, sometimes requires setting configuration for multiple plugins to ensure everything compiles.\\n\\nTo help fix these problems, we\'ve added a new top level option to tell Babel which assumptions it can make about your code: `assumptions`! Similar to the new `targets` option, every plugin will now receive the assumptions you\'ve enabled, eliminating the need to set the option individually. This is really valuable since a plugin can be influenced by multiple assumptions, and an assumption can influence multiple plugins.\\n\\n> \u26a0\ufe0f This is **advanced** functionality. Like the previous `loose` option, please be careful when enabling assumptions, because they are _not_ spec-compliant and may break your code in unexpected ways.\\n\\nFor example, when transforming classes, Babel will generate this output by default:\\n\\n<table>\\n<tbody style={{width: \\"100%\\", display: \\"table\\", tableLayout: \\"fixed\\"}}>\\n<tr>\\n<th>Input</th>\\n<th>Output</th>\\n</tr>\\n<tr>\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nclass Test {\\n  constructor() {\\n    this.x = 2;\\n  }\\n}\\n\\n// You can test the thrown error in the console:\\n// Uncaught TypeError: class constructors must be invoked with \'new\'\\nTest();\\n```\\n\\n</td>\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nfunction _classCallCheck(instance, Constructor) {\\n  if (!(instance instanceof Constructor)) {\\n    throw new TypeError(\\"Cannot call a class as a function\\");\\n  }\\n}\\n\\nlet Test = function Test() {\\n  _classCallCheck(this, Test);\\n\\n  this.x = 2;\\n};\\n\\n// You can test the thrown error in the console:\\n// Uncaught TypeError: class constructors must be invoked with \'new\'\\nTest();\\n```\\n\\n</td>\\n</tr>\\n</tbody>\\n</table>\\n\\nHowever, enabling the `noClassCalls` assumption tells Babel \\"I\'m never trying to call classes without `new`, so you can compile without worrying about it\\":\\n\\n```json title=\\"JSON\\"\\n{\\n  \\"targets\\": \\"firefox 30\\",\\n  \\"assumptions\\": { \\"noClassCalls\\": true },\\n  \\"presets\\": [\\"@babel/preset-env\\"]\\n}\\n```\\n\\n<table>\\n<tbody style={{width: \\"100%\\", display: \\"table\\", tableLayout: \\"fixed\\"}}>\\n<tr>\\n<th>Input</th>\\n<th>Output</th>\\n</tr>\\n<tr>\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nclass Test {\\n  constructor() {\\n    this.x = 2;\\n  }\\n}\\n\\n// Won\'t throw since we violated the assumption\\nTest();\\n```\\n\\n</td>\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nlet Test = function Test() {\\n  this.x = 2;\\n};\\n\\n// Won\'t throw since we violated the assumption\\nTest();\\n```\\n\\n</td>\\n</tr>\\n</tbody>\\n</table>\\n\\nCheck out the full list of assumptions [over in our documentation](https://babeljs.io/assumptions), where you can individually enable or disable them to see how they affect the compiled output.\\n\\n### Records and Tuples support ([#12145](https://github.com/babel/babel/pull/12145))\\n\\nThanks to a collaboration with [Bloomberg](https://www.techatbloomberg.com/), Babel now supports transforming the [\\"Records and Tuples\\" stage 2 proposal](https://github.com/tc39/proposal-record-tuple).\\n\\nThe Babel plugin transforms records and tuples syntax using the global `Record` and `Tuple` functions:\\n\\n<table>\\n<tbody style={{width: \\"100%\\", display: \\"table\\", tableLayout: \\"fixed\\"}}>\\n<tr>\\n<th>Input</th>\\n<th>Output</th>\\n</tr>\\n<tr>\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nlet data = #{\\n  name: \\"Babel\\",\\n  ids: #[1, 2, 3]\\n};\\n```\\n\\n</td>\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nlet data = Record({\\n  name: \\"Babel\\",\\n  ids: Tuple(1, 2, 3),\\n});\\n```\\n\\n</td>\\n</tr>\\n</tbody>\\n</table>\\n\\nThis means that you will need to load a polyfill for those global functions, such as [`@bloomberg/record-tuple-polyfill`](https://www.npmjs.com/package/@bloomberg/record-tuple-polyfill), either by importing it in your code or with a `<script>` tag:\\n\\n```html\\n<script src=\\"https://unpkg.com/@bloomberg/record-tuple-polyfill@0.0.3/lib/index.umd.js\\" />\\n```\\n\\n> **NOTE**: No engine currently supports records and tuples, so you always need to load the polyfill.\\n\\nIn order to enable this transform, you need to add `@babel/plugin-proposal-record-and-tuple` to your configuration.\\n\\n### New Flow features ([#12193](https://github.com/babel/babel/pull/12193), [#12234](https://github.com/babel/babel/pull/12234))\\n\\nBabel 7.13.0 has support for two new Flow features:\\n\\n- `this` type annotation in functions, that allow you to specify the type of the `this` object as if it was a parameter\\n\\n  ```js title=\\"JavaScript\\"\\n  function getPerson(this: Database, id: string): Person {\\n    this instanceof Database; // true\\n  }\\n  ```\\n\\n- `enum` declarations with unknown members\\n\\n  ```js title=\\"JavaScript\\"\\n  enum PetKind {\\n    Dog,\\n    Cat,\\n    Snake,\\n    ...\\n  }\\n  ```\\n\\n### TypeScript 4.2 support ([#12628](https://github.com/babel/babel/pull/12628))\\n\\n[TypeScript 4.2](https://devblogs.microsoft.com/typescript/announcing-typescript-4-2-rc/) supports some new syntax features such as abstract constructor signatures.\\n\\nYou can read more about the changes in [the TypeScript release post](https://devblogs.microsoft.com/typescript/announcing-typescript-4-2-beta/).\\n\\n### Automatic ES modules in `@babel/runtime` ([#12632](https://github.com/babel/babel/pull/12632))\\n\\n`@babel/runtime` contains all of the Babel runtime helpers in both CommonJS and ECMAScript module formats.\\n\\nUntil now, you had to manually choose which one you wanted to use, specifying the `useESModules` option of `@babel/plugin-transform-runtime`.\\n\\nWe have now reorganized `@babel/runtime`\'s internal structure, leveraging the new [`\\"exports\\"`](https://nodejs.org/api/packages.html#packages_package_entry_points) `package.json` field supported by Node.js and bundlers, so that they are able to automatically choose between CJS and ESM.\\n\\nFor this reason, the `useESModules` option is now deprecated and will be removed in Babel 8."},{"id":"/2020/10/15/7.12.0","metadata":{"permalink":"/babel-website/blog/2020/10/15/7.12.0","source":"@site/blog/2020-10-15-7.12.0.md","title":"7.12.0 Released: TypeScript 4.1, strings as import/export names, and class static blocks","description":"We just published a new minor version of Babel!","date":"2020-10-12T00:00:00.000Z","formattedDate":"October 12, 2020","tags":[],"readingTime":3.945,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.12.0 Released: TypeScript 4.1, strings as import/export names, and class static blocks","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2020-10-12T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.12.0 Released"},"prevItem":{"title":"7.13.0 Released: Records and Tuples, granular compiler assumptions, and top-level targets","permalink":"/babel-website/blog/2021/02/22/7.13.0"},"nextItem":{"title":"7.11.0 Released: ECMAScript 2021 support in preset-env, TypeScript 4.0 support, printing config and the future of `babel-eslint`","permalink":"/babel-website/blog/2020/07/30/7.11.0"}},"content":"We just published a new minor version of Babel!\\n\\nThis release includes support for the new TypeScript 4.1 beta features: [template literal types](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#template-literal-types) and [key remapping in mapped types](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#key-remapping-mapped-types).\\n\\nAdditionally, we implemented two new ECMAScript proposals: [class static blocks](https://github.com/tc39/proposal-class-static-block) and [imports and exports with string names](https://github.com/tc39/ecma262/pull/2154).\\n\\nLastly, we renamed `@babel/plugin-syntax-module-attributes` (and the corresponding parser plugin `moduleAttributes`) to `@babel/plugin-syntax-import-assertions` (and `importAssertions`), to match the recent [proposal](https://github.com/tc39/proposal-import-assertions) updates. The old plugin will work until Babel 8, but it\'s deprecated now.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.12.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## Highlights\\n\\n### TypeScript 4.1 ([#12129](https://github.com/babel/babel/pull/12129), [#12131](https://github.com/babel/babel/pull/12131))\\n\\nTypeScript 4.1 beta [was announced](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#key-remapping-mapped-types) a few weeks ago, and it includes new syntax features for types.\\n\\n**Template literal types** allow concatenating strings at the type-level, using the template literal syntax:\\n\\n```typescript\\ntype Events = \\"Click\\" | \\"Focus\\";\\n\\ntype Handler = {\\n  [K in `on${Events}`]: Function\\n};\\n\\nconst handler: Handler = {\\n    onClick() {}, // Ok\\n    onFocus() {}, // Ok\\n    onHover() {}, // Error!\\n};\\n```\\n\\nTogether with **key remapping in mapped types**, they can be used to represent complex object transformations:\\n\\n```typescript\\ntype Getters<T> = {\\n    [K in keyof T as `get${Capitalize<K>}`]: () => T[K]\\n};\\n\\ninterface Dog { name: string; age: number; }\\n\\nconst lazyDog: Getters<Dog> = /* ... */;\\nlazyDog.getName(); // string\\nlazyDog.age; // error!\\n```\\n\\nYou can read more about TypeScript 4.1 in the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/), or check [other examples](https://github.com/ghoullier/awesome-template-literal-types) of what capabilities these new features unlock. However, remember that TypeScript 4.1 is still experimental!\\n\\n### Class static blocks ([#12079](https://github.com/babel/babel/pull/12079), [#12143](https://github.com/babel/babel/pull/12143))\\n\\n> [Example on Babel REPL](https://babel.dev/repl/build/29530/#?browsers=&build=&builtIns=false&spec=false&loose=true&code_lz=MYGwhgzhAEDC0G8BQ1oQC5nQS2NAHtALzQAsATANwpqY54Ce1qGWuiNq6ATgx6gOjoAFtggA6PiQAmAewDKsgLYBTEdgB2AcwDq2EQAp1E_AEpmAgL6dowLMGH9BQ0RKnQARAFcNAaw2yAO4aHhao1uFIlkA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=stage-2%2Ctypescript&prettier=true&targets=&version=7.11.6%2Bpr.12143&externalPlugins=)\\n\\n```js title=\\"JavaScript\\"\\nclass C {\\n  static #x = 42;\\n  static y;\\n  static {\\n    try {\\n      this.y = doSomethingWith(this.#x);\\n    } catch {\\n      this.y = \\"unknown\\";\\n    }\\n  }\\n}\\n```\\n\\nThis stage 2 proposal allows you to apply additional static initializations when a class definition is evaluated. It is not intended to replace static fields but to enable new use cases that could not be accomplished before. In the example above, the static property `y` is initialized using `#x`. If `doSomethingWith(this.#x)` throws, `y` will be assigned by a default value `\\"unknown\\"`.\\n\\nYou can read more about it in the [proposal\'s description](https://github.com/tc39/proposal-class-static-block/blob/master/README.md).\\n\\nThanks to [J\xf9nli\xe0ng](https://twitter.com/JLHwung), you can test this proposal by installing\\nthe `@babel/plugin-proposal-class-static-block` plugin and adding it to your Babel config. Since it is likely you\'re already using other class feature plugins, be sure to place this plugin _before_ the others:\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\n    \\"@babel/plugin-proposal-class-static-block\\",\\n    \\"@babel/plugin-proposal-class-properties\\"\\n  ]\\n}\\n```\\n\\n> \u2139\ufe0f Babel implements an [updated](https://github.com/tc39/proposal-class-static-block/pull/15) version of spec, which addresses [feedback](https://github.com/tc39/proposal-class-static-block/issues?q=is%3Aissue+author%3AJLHwung+created%3A%3C2020-10-07) we have provided based on the [current](https://github.com/tc39/proposal-class-static-block/commit/1bfccb28a8174f6ca3f92242bd9589985190100c) spec.\\n\\n### Imports and exports with string names ([#12091](https://github.com/babel/babel/pull/12091))\\n\\nConsensus was achieved during the last TC39 meeting with [a PR](https://github.com/tc39/ecma262/pull/2154) to allow strings as the name of imported and exported variables:\\n\\n```js title=\\"JavaScript\\"\\n// emojis.js\\nlet happy = \\"wooo!\\";\\nexport { happy as \\"\ud83d\ude03\\" };\\n\\n// main.js\\nimport { \\"\ud83d\ude03\\" as smile } from \\"./emojis.js\\";\\nconsole.log(smile); // wooo!\\n```\\n\\nThis allows using any valid UTF-16 name across modules, making JavaScript fully compatible with other languages such as WebAssembly.\\n\\nYou can enable _parsing_ support for this feature by adding `@babel/plugin-syntax-module-string-names` to your configuration:\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"presets:\\" [\\"@babel/preset-env\\"],\\n  \\"plugins\\": [\\n    \\"@babel/syntax-module-string-names\\"\\n  ]\\n}\\n```\\n\\nThis feature will be enabled by *default* as soon as the syntax is merged into the main ECMAScript specification.\\n\\nPlease note that it\'s not possible to transpile arbitrary strings to ES2015-style imports and exports: they will only be transpiled when targeting a different modules system such as CommonJS.\\n\\n## Import assertions parsing ([#12139](https://github.com/babel/babel/pull/12139))\\n\\nThe \\"module attributes\\" proposal has been significantly changed and also renamed to \\"import assertions\\".\\n\\nWe\'ve implemented parsing support for this new version of the proposal, which can be enabled using the `@babel/plugin-syntax-import-assertions` plugin (or, if you are directly using `@babel/parser`, `importAssertions`):\\n\\n```diff\\n {\\n   \\"plugins\\": [\\n-    [\\"@babel/syntax-module-attributes\\", { \\"version\\": \\"may-2020\\" }]\\n+    \\"@babel/syntax-import-assertions\\"\\n   ]\\n }\\n```\\n\\nThe most significant syntax changes are that the `with` keyword has been replaced with `assert` and assertions are now wrapped in curly braces:\\n\\n```js title=\\"JavaScript\\"\\nimport json from \\"./foo.json\\" assert { type: \\"json\\" };\\n\\nimport(\\"foo.json\\", { assert: { type: \\"json\\" } });\\n```\\n\\nYou can read more about these changes in the [proposal\'s README](https://github.com/tc39/proposal-import-assertions#readme).\\n\\n> \u26a0\ufe0f `@babel/plugin-syntax-module-attributes` will continue working until we release Babel 8.0.0, but will no longer be maintained, so we highly recommended migrating to the new plugin."},{"id":"/2020/07/30/7.11.0","metadata":{"permalink":"/babel-website/blog/2020/07/30/7.11.0","source":"@site/blog/2020-07-30-7.11.0.md","title":"7.11.0 Released: ECMAScript 2021 support in preset-env, TypeScript 4.0 support, printing config and the future of `babel-eslint`","description":"We just released a new minor version of Babel!","date":"2020-07-30T00:00:00.000Z","formattedDate":"July 30, 2020","tags":[],"readingTime":4.92,"hasTruncateMarker":true,"authors":[{"name":"Hu\xe1ng J\xf9nli\xe0ng","url":"https://twitter.com/JLHwung"}],"frontMatter":{"layout":"post","title":"7.11.0 Released: ECMAScript 2021 support in preset-env, TypeScript 4.0 support, printing config and the future of `babel-eslint`","author":"Hu\xe1ng J\xf9nli\xe0ng","authorURL":"https://twitter.com/JLHwung","date":"2020-07-30T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.11.0 Released"},"prevItem":{"title":"7.12.0 Released: TypeScript 4.1, strings as import/export names, and class static blocks","permalink":"/babel-website/blog/2020/10/15/7.12.0"},"nextItem":{"title":"The State of babel-eslint","permalink":"/babel-website/blog/2020/07/13/the-state-of-babel-eslint"}},"content":"We just released a new minor version of Babel!\\n\\nThis 7.11 release includes:\\n\\n- `preset-env` support for Logical Assignments (`??=`), Numeric Separators (`1_2`) and Namespace re-exports (`export * as ns from ...`)\\n- TypeScript 4.0 support\\n- Parser support for the Stage-1 [Decimal proposal](https://github.com/tc39/proposal-decimal) (`7.11m`)\\n- An environment flag to print the resolved Babel configuration for a given file (`BABEL_SHOW_CONFIG_FOR`)\\n\\nIn addition to this, we are now releasing the successor of `babel-eslint`: `@babel/eslint-parser`!\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.11.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nAlso if you have any questions or something you want to discuss, we\'ve enabled [GitHub Discussions](https://github.com/babel/babel/discussions) on our repository!\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## ECMAScript 2021 support ([#11864](https://github.com/babel/babel/pull/11864))\\n\\nDuring the last [meeting](https://github.com/tc39/agendas/blob/master/2020/09.md), TC39 moved both the logical assignment and numeric separator proposals to Stage 4! Babel already had support these proposals via the `@babel/plugin-proposal-logical-assignment-operators` and `@babel/plugin-proposal-numeric-separators` plugins. They are now included in `@babel/preset-env` and compiled based on your targets, like any other ECMAScript feature.\\n\\n### [Logical Assignment](https://babeljs.io/docs/en/babel-plugin-proposal-logical-assignment-operators)\\n\\nLogical assignment offers a shorthand notation combining logical operators and assignment expression:\\n\\n```js title=\\"JavaScript\\"\\nthis.disabled ??= false;\\nthis.disabled ?? (this.disabled = false);\\n\\nclicked &&= !isDoubleClicked();\\nclicked = clicked && !isDoubleClicked();\\n\\nhasDups ||= (prev === cur);\\nif (!hasDup) hasDups = (prev === cur);\\n```\\n\\n### [Numeric Separator](https://babeljs.io/docs/en/babel-plugin-proposal-numeric-separator)\\n\\nThe numeric separator (`_`) is a character you can insert between digits in numeric literals to help with visual separation:\\n\\n```js title=\\"JavaScript\\"\\n1_000_000_000\\n0.000_000_000_1\\n```\\n\\n### [Export namespace from](https://babeljs.io/docs/en/babel-plugin-proposal-export-namespace-from) ([#11849](https://github.com/babel/babel/pull/11849))\\n\\nAn imported module can be re-exported as a new namespace:\\n\\n```js title=\\"JavaScript\\"\\nexport * as ns from \\"mod\\";\\n```\\n\\n> \u2139\ufe0f This was already included in ECMAScript 2020, but it wasn\'t supported by `@babel/preset-env` yet\\n\\nSince version 7.11, `@babel/preset-env` skips `@babel/plugin-proposal-export-namespace-from` if the `caller` supports it: this can leave `export * as ns` as-is to be directly processed by the bundlers. *Note*: `babel-loader` and `@rollup/plugin-babel` don\'t yet tell Babel they supports this syntax, but we are working on it with the relevant maintainers.\\n\\nIf `{ modules: false }` is set, Babel will assume that the transpiled code will be run in engines that have native ESM support. `export * as ns` will be compiled based on `targets`, like any other ECMAScript feature.\\n\\nIf you intend to bundle the transpiled code, please remove `{ modules: false }` option. By default `preset-env` will determine the module transforms from `caller` data passed from `babel-loader` and `@rollup/plugin-babel`.\\n\\n```diff\\n{\\n  \\"presets\\": [\\n    [\\"@babel/env\\", {\\n      \\"targets\\": [\\"defaults\\"],\\n-     \\"modules\\": false,\\n    }]\\n}\\n```\\n\\nIf you provide a different value for the `modules` option, `export * as ns` will always be transformed.\\n\\n---\\n\\nIf you were directly using any of\\n- `@babel/plugin-proposal-export-namespace-from`\\n- `@babel/plugin-proposal-logical-assignment-operators`\\n- `@babel/plugin-proposal-numeric-separators`\\n\\nyou can remove them from your config as they will be included by default:\\n\\n```diff\\n{\\n  \\"presets\\": [\\n    [\\"@babel/env\\", { \\"targets\\": [\\"defaults\\"] }]\\n  ],\\n  \\"plugins\\": [\\n-   \\"@babel/plugin-proposal-export-namespace-from\\",\\n-   \\"@babel/plugin-proposal-logical-assignment-operators\\",\\n-   \\"@babel/plugin-proposal-numeric-separators\\"\\n  ]\\n}\\n```\\n\\n## TypeScript 4.0 support ([#11760](https://github.com/babel/babel/pull/11760))\\n\\nTypeScript 4.0 introduces several [new features](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-beta/).\\n\\n### Variadic Tuple Types\\n\\nYou can now specify generic spreads in tuple types, and the spreads can be at any location:\\n\\n```typescript\\ntype Arr = readonly any[];\\n\\nfunction collect<L extends Arr, M extends Arr>(b: boolean, l: L, m: M): [boolean, ...L, ...M] {\\n  return [b, ...l, ...m];\\n}\\n```\\n\\n### Labeled Tuple Elements\\n\\nTuple elements can now be labeled:\\n\\n```typescript\\ntype Log = [failed: boolean, reason?: Error, ...stacks?: string[]]\\n// same as\\ntype Log = [boolean, Error?, string[]?];\\n```\\n\\n### `unknown` on `catch` Clause Bindings\\n\\nYou can specify `unknown` type of `catch` clause variables:\\n\\n```typescript\\ntry {\\n  // ...\\n} catch (e: unknown) {\\n  // type error! Error() only accepts string | undefined\\n  throw new Error(e);\\n\\n  if (typeof e === \\"string\\") {\\n    // e is a string\\n    throw new Error(e);\\n  }\\n}\\n```\\n\\nNote that only `unknown` and `any` are currently allowed in catch binding type annotations. `@babel/parser` does not enforce this check because neither type aliases (`type ANY = any`) nor intersections (`any | unknown`) are not evaluated at compile-time.\\n\\nStarting from Babel 7.11, you can use these new features without any config changes. For more information, please checkout [TypeScript 4.0 Announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-beta).\\n\\n## Decimal Literal parser support ([#11640](https://github.com/babel/babel/pull/11640))\\n\\nThe [Decimal Literal Proposal](https://github.com/tc39/proposal-decimal) (Stage 1) provides a notation for decimal numbers, analogous to BigInt and integers.\\n\\n```js title=\\"JavaScript\\"\\n0.1m + 0.2m === 0.3m; // true\\n```\\n\\nBabel now supports parsing these literals: you can add `@babel/plugin-syntax-decimal` plugin to your Babel config or, if you use `@babel/parser` directly, you can enable the `decimal` plugin. Babel doesn\'t provide polyfill implementations for decimals.\\n\\n## Print config ([#11588](https://github.com/babel/babel/pull/11588))\\n\\nBabel can be configured in a number of ways (programmatically and via JSON/JavaScript configs). This flexibility, however, does not come for free: it can be difficult to understand what are the applicable config files within your project and how Babel merges these configs. You may also indirectly use Babel and the config is generated by a package residing within your node_modules. All these use cases show the need for a way to output config information to help debug any compilation problems.\\n\\nBabel 7.11 offers an environment variable for this purpose:\\n\\n```sh title=\\"Shell\\"\\n# *nix or WSL\\nBABEL_SHOW_CONFIG_FOR=./src/myComponent.jsx npm start\\n```\\n\\n```powershell\\n$env:BABEL_SHOW_CONFIG_FOR = \\".\\\\src\\\\myComponent.jsx\\"; npm start\\n```\\nwill print the effective config applied on `src/myComponent.jsx`.\\n\\nCheckout [configuration](https://babel.dev/docs/en/configuration#print-effective-configs) for the detailed usage and example output.\\n\\n## `@babel/eslint-parser` ([#10709](https://github.com/babel/babel/issues/10709))\\n\\n`babel-eslint` has been moved to the Babel monorepo under a new name: `@babel/eslint-parser`. It offers better integration between Babel and ESLint, and features complete ES2020 support. In the [State of `babel-eslint`](https://babel.dev/blog/2020/07/13/the-state-of-babel-eslint) blog post, Kai has added more about the state of `@babel/eslint-parser`."},{"id":"/2020/07/13/the-state-of-babel-eslint","metadata":{"permalink":"/babel-website/blog/2020/07/13/the-state-of-babel-eslint","source":"@site/blog/2020-07-13-the-state-of-babel-eslint.md","title":"The State of babel-eslint","description":"babel-eslint is moved to @babel/eslint-parser!","date":"2020-07-13T00:00:00.000Z","formattedDate":"July 13, 2020","tags":[],"readingTime":4.15,"hasTruncateMarker":true,"authors":[{"name":"Kai Cataldo","url":"https://kaicataldo.com"}],"frontMatter":{"layout":"post","title":"The State of babel-eslint","author":"Kai Cataldo","authorURL":"https://kaicataldo.com","date":"2020-07-13T00:00:00.000Z","categories":"announcements","share_text":"The State of babel-eslint"},"prevItem":{"title":"7.11.0 Released: ECMAScript 2021 support in preset-env, TypeScript 4.0 support, printing config and the future of `babel-eslint`","permalink":"/babel-website/blog/2020/07/30/7.11.0"},"nextItem":{"title":"7.10.0 Released: Class Fields in preset-env, \'#private in\' checks and better React tree-shaking","permalink":"/babel-website/blog/2020/05/25/7.10.0"}},"content":"`babel-eslint` is moved to `@babel/eslint-parser`!\\n\\n\x3c!-- truncate --\x3e\\n\\n## The Past\\n\\nExisting as a compatibility layer between Babel and ESLint \u2013 two projects maintained by two separate teams \u2013 `babel-eslint` has been a difficult package to maintain since the beginning. Some of the challenges the team has faced while maintaining `babel-eslint`:\\n\\n* `babel-eslint` has historically been maintained by the Babel team, and ensuring that ESLint\'s core rules (which are released every two weeks) work with experimental syntax is a monumental task.\\n* Babel\'s internal AST representation differs from [ESTree](https://github.com/estree/estree), the AST specification used by ESLint. As a result, ESLint-compatibility requires that Babel\'s parser has a plugin that outputs ASTs that are ESTree-compatible.\\n* While Babel enables the use of experimental syntax, ESLint core only supports syntax once it reaches [Stage 4](https://tc39.es/process-document/) and is finalized in the spec. This means that ESLint\'s core rules aren\'t designed to work with syntax that is Stage 3 and below. Additionally, ESLint has been blocked by the finalizing of the ESTree spec, leading to an even larger discrepancy in the syntax the two projects support.\\n* The version of Babel\'s parser that `babel-eslint` relies on is a direct dependency in its `package.json` and the plugins it enables are hardcoded, leading to a potential mismatch in versions and enabled language features between compiling and linting. This has historically led to a lot of confusion and hard-to-debug issues, and we believe solving this issue is a big win for both maintainers and end users.\\n* `babel-eslint` has to be updated to handle changes in both upstream projects, and has often been out of sync with one or the other.\\n\\nThe challenges above have added up to `babel-eslint` requiring more resources than the team has at its disposal, resulting in `babel-eslint` not getting the attention a widely used project (6M downloads a week at the time of this writing) requires to stay up-to-date.\\n\\n## The Present\\n\\nWith the next iteration of `babel-eslint`, we have decided to publish the package under a new name: `@babel/eslint-parser`. To alleviate some of the challenges discussed above, we are doing the following:\\n\\n* `@babel/eslint-parser` will require `@babel/core` as a peer dependency and will now use Babel core\'s APIs to read and apply your Babel configuration. This means that the same version of Babel with the same settings will be used for both compiling and linting. This is consistent with what we recommend and do with other packages in the Babel ecosystem.\\n* `@babel/eslint-parser` will live in the main [`babel/babel`](https://github.com/babel/babel/tree/main/eslint/babel-eslint-parser) monorepo with other Babel packages. We hope this will help to mitigate some of the syncing issues `babel-eslint` has seen in the past and allow us to lint the repo with the latest source code in GitHub, shortening the feedback loop of how changes in Babel affect linting.\\n* [ESTree](https://github.com/estree/estree) - the AST specification that ESLint follows - has recently become active again, and the Babel team is now actively involved in the project. This will hopefully allow us to share what we learn about the AST representation of experimental syntax and help make the integration between tools easier.\\n* [Kai Cataldo](https://kaicataldo.com) has been helping out with `babel-eslint` for a number of years now, and as a result of being a maintainer of both Babel and ESLint, is uniquely positioned to focus on the interoperability of these two tools. Over the past few months, he has been working on the code changes discussed above and will continue to support the new packages once they are released.\\n\\n## The Future\\n\\nWe believe that these packages are ready to be released. Because of all the integrations and projects involved (Babel, ESLint, Prettier, frameworks, various plugins, text editor integrations, command-line tools, etc.), we\'re sure there will be things that need to be fixed, and we plan to iterate quickly.\\n\\nPlease note that `@babel/eslint-parser` will rely on `@babel/core` as a peer dependency and this package must be in your project\'s `node_modules`.\\n\\nOnce you have ensured that `@babel/core` has been installed, you can run the following commands to upgrade from `babel-eslint` and `babel-eslint-plugin` to the new packages:\\n\\n```shell npm2yarn\\nnpm uninstall babel-eslint babel-eslint-plugin\\nnpm install --save-dev @babel/eslint-parser @babel/eslint-plugin\\n```\\n\\n```diff title=\\".eslintrc.js\\"\\nmodule.exports = {\\n---  parser: \\"babel-eslint\\",\\n+++  parser: \\"@babel/eslint-parser\\"\\n    plugins: [\\n---   \\"babel\\"\\n+++   \\"@babel\\n    ]\\n};\\n```\\n\\n`@babel/eslint-parser` expects a standard Babel configuration file (`.babelrc` or `babel.config.js`). For cases where users might not want to use a Babel configuration file or are running Babel through another tool (such as Webpack with babel-loader), `@babel/eslint-parser` also supports applying [Babel configuration](https://babeljs.io/docs/en/options) through your ESLint configuration. Please see the [`babelOptions`](https://github.com/babel/babel/tree/main/eslint/babel-eslint-parser#additional-parser-configuration) configuration option for more details.\\n\\n## Moving Forward Together\\n\\nOur short-term goal in making the changes outlined above is to make it easier for `@babel/eslint-parser` to maintain and to make linting Babel-compiled code with ESLint easier and more reliable. We would love your help in this endeavor! Contributions on [GitHub](https://github.com/babel/babel) and [financial donations](https://opencollective.com/babel) go a long way in helping us make this integration the best it can be for the community."},{"id":"/2020/05/25/7.10.0","metadata":{"permalink":"/babel-website/blog/2020/05/25/7.10.0","source":"@site/blog/2020-05-25-7.10.0.md","title":"7.10.0 Released: Class Fields in preset-env, \'#private in\' checks and better React tree-shaking","description":"We just released a new minor version of Babel!","date":"2020-05-25T00:00:00.000Z","formattedDate":"May 25, 2020","tags":[],"readingTime":8.275,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.10.0 Released: Class Fields in preset-env, \'#private in\' checks and better React tree-shaking","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2020-05-25T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.10.0 Released"},"prevItem":{"title":"The State of babel-eslint","permalink":"/babel-website/blog/2020/07/13/the-state-of-babel-eslint"},"nextItem":{"title":"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform","permalink":"/babel-website/blog/2020/03/16/7.9.0"}},"content":"We just released a new minor version of Babel!\\n\\nThis 7.10 release includes:\\n- Full support for the new Stage 1 proposal, `#prop in obj` checks for private fields [proposal](https://github.com/tc39/proposal-private-fields-in-in).\\n- `@babel/preset-env` now compiles ES2015-style Unicode escapes (`\\\\u{Babe1}`) to the equivalent legacy syntax (`\\\\uDAAA\\\\uDFE1`).\\n- Two improvements to the [Optional Chaining](https://github.com/tc39/proposal-optional-chaining) operator (`?.`)\\n- Parser support for the new Stage 1 [Module Attributes proposal](https://github.com/tc39/proposal-module-attributes) (`import a from \\"./a.json\\" with type: \\"json\\"`).\\n- Better tree-shaking support for React code (i.e. `React.memo`)!\\n- Setting up [RFCs](https://github.com/babel/rfcs) repo and [GitHub Discussions](https://github.com/babel/babel/discussions) pages!\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.10.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nAlongside this Babel release, we are releasing the first experimental version of our new [polyfills compatibility architecture](https://github.com/babel/babel-polyfills) (see below for more details), thanks to [Nicol\xf2](https://twitter.com/NicoloRibaudo) and some awesome folks in the community! We began discussions about this over a year ago in a [RFC issue](https://github.com/babel/babel/issues/10008) within the Babel repository.\\n\\nAs an aside, we now have an official RFC process for discussing changes that significantly impact our users: please check it out over in the [`babel/rfcs`](https://github.com/babel/rfcs) repository! In addition, we\'ve enabled [GitHub Discussions](https://github.com/babel/babel/discussions) on our repository if you have feedback or questions!\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## New features enabled by default\\n\\n### Parsing for `import.meta`\\n\\nNow that it has reached Stage 4, _parsing_ for [`import.meta`](https://github.com/tc39/proposal-import-meta) is enabled by default, thanks to [Kiko](https://github.com/kik-o). Please note that `@babel/preset-env` doesn\'t have any default support for _transforming_ it, because what that object contains is up to the engine and is not defined in the ECMAScript specification.\\n\\n```js title=\\"JavaScript\\"\\nconsole.log(import.meta); // { url: \\"file:///home/user/my-module.js\\" }\\n```\\n\\n### Transforming <code>\\\\&#x200B;u{...}</code>-style Unicode escapes ([#11377](https://github.com/babel/babel/pull/11377))\\n\\nWe also discovered that we didn\'t have support for compiling a 5-year-old ECMAScript feature: `\\\\u{...}`-style Unicode escapes! Thanks to [Justin](https://github.com/jridgewell), `@babel/preset-env` can now compile them in strings and identifiers by default.\\n\\n> [Example on CodeSandbox](https://codesandbox.io/embed/beautiful-sammet-msuiw?fontsize=18&hidenavigation=1&theme=dark&view=preview)\\n\\n```js title=\\"JavaScript\\"\\nvar \\\\u{1d49c} = \\"\\\\u{Babe1}\\";\\nconsole.log(\\\\u{1d49c});\\n```\\n\\n```js title=\\"JavaScript\\"\\nvar _ud835_udc9c = \\"\\\\uDAAA\\\\uDFE1\\";\\nconsole.log(_ud835_udc9c);\\n```\\n\\n### Class Properties and Private Methods to `shippedProposals` option of `@babel/preset-env` ([#11451](https://github.com/babel/babel/pull/11451))\\n\\nLastly, thanks to [J\xf9nli\xe0ng](https://github.com/JLHwung) we have added `@babel/plugin-proposal-class-properties` and `@babel/plugin-proposal-private-methods` to the [`shippedProposals`](https://babeljs.io/docs/en/babel-preset-env#shippedproposals) option of `@babel/preset-env`. These proposals are not Stage 4 (i.e. part of the ECMAScript standard) yet, but they are already enabled by default in [many JavaScript engines](https://github.com/tc39/proposal-class-fields#implementations).\\n\\nIf you aren\'t familiar:\\n\\n```js title=\\"JavaScript\\"\\nclass Bork {\\n  // Public Fields\\n  instanceProperty = \\"bork\\";\\n  static staticProperty = \\"babelIsCool\\";\\n  // Private Fields\\n  #xValue = 0;\\n  a() {\\n    this.#xValue++;\\n  }\\n\\n  // Private methods\\n  get #x() { return this.#xValue; }\\n  set #x(value) {\\n    this.#xValue = value;\\n  }\\n  #clicked() {\\n    this.#x++;\\n  }\\n}\\n```\\n\\nIf you missed it from the last release, in 7.9 we added a new [option](https://babeljs.io/blog/2020/03/16/7.9.0#babel-preset-env-s-bugfixes-option-11083-https-githubcom-babel-babel-pull-11083): `\\"bugfixes\\": true` which can greatly reduce your code output.\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"presets\\": [\\n    [\\"@babel/preset-env\\", {\\n      \\"targets\\": { \\"esmodules\\": true }, // Use the targets that you was already using\\n      \\"bugfixes\\": true // will be default in Babel 8\\n    }]\\n  ]\\n}\\n```\\n\\n## Improved optional chaining `?.` ergonomics ([#10961](https://github.com/babel/babel/pull/10961), [#11248](https://github.com/babel/babel/pull/11248))\\n\\nIn [TypeScript 3.9](https://devblogs.microsoft.com/typescript/announcing-typescript-3-9/), the interaction between non-null assertions (postfix `!`) and optional chaining [has been changed](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#parsing-differences-in-optional-chaining-and-non-null-assertions) to make it more useful.\\n\\n```ts\\nfoo?.bar!.baz\\n```\\n\\nIn TypeScript 3.8 and Babel 7.9, the above would be read as `(foo?.bar)!.baz`: \\"If `foo` is not nullish, get `.bar` from it. Then trust that `foo?.bar` is never nullish and always get `.bar` from it\\". This means that when `foo` is nullish that code would always throw, because we are trying to get `.baz` from `undefined`.\\n\\nIn TypeScript 3.9 and Babel 7.10, the code behaves similarly to `foo?.bar.baz`: \\"If `foo` is not nullish, get `.bar.baz` from it and trust me that `foo?.bar` isn\'t nullish\\". Thanks to [Bruno](https://github.com/macabeus) for helping to implement this!\\n\\n---\\n\\nAdditionally, the class fields proposal [recently added support](https://github.com/tc39/proposal-class-fields/pull/301) for mixing optional chaining `?.` with private fields. This means that the following code is now valid:\\n\\n```js title=\\"JavaScript\\"\\nobj?.property.#priv;\\nobj?.#priv;\\n```\\n\\nNote that in the second example, if `obj` is not nullish and does not have the `#priv` field, it would still throw an error (exactly as `obj.#priv` would throw). You can read the next section to see how to avoid it!\\n\\n## Private Fields in `in` ([#11372](https://github.com/babel/babel/pull/11372))\\n\\n> [Example on CodeSandbox](https://i12c7.csb.app/)\\n\\n```js title=\\"JavaScript\\"\\nclass Person {\\n  #name;\\n\\n  hug(other) {\\n    if (#name in other) console.log(`${this.#name} \ud83e\udd17 ${other.#name}`);\\n    else console.log(\\"It\'s not a person!\\")\\n  }\\n}\\n```\\n\\nThis Stage 1 proposal allows you to statically check if a given object has a specific private field.\\n\\nPrivate fields have a built-in \\"brand check\\": if you try to access them in an object where they aren\'t defined, it will throw an exception. You can determine if an object has a particular private field by leveraging this behavior with a `try`/`catch` statement, but this proposal gives us a more compact and robust syntax to do so.\\n\\nYou can read more about it in the [proposal\'s description](https://github.com/tc39/proposal-private-fields-in-in/blob/master/README.md) and test this proposal by installing the `@babel/plugin-proposal-private-property-in-object` plugin and adding it to your Babel config. Thanks to [Justin](https://github.com/jridgewell) for the PR!\\n\\n## Module Attributes parser support ([#10962](https://github.com/babel/babel/pull/10962))\\n\\nThe Modules Attributes proposal (Stage 1) allows providing the engine, module loader or bundler some additional information about the imported file. For example, you could explicitly specify that it should be parsed as JSON:\\n\\n```js title=\\"JavaScript\\"\\nimport metadata from \\"./package.json\\" with type: \\"json\\";\\n```\\n\\nAdditionally, they can also be used with dynamic `import()`. Note the support for trailing commas to make it easier to add or remove the second parameter!\\n```js title=\\"JavaScript\\"\\nconst metadata = await import(\\n  \\"./package.json\\",\\n  { with: { type: \\"json\\" } },\\n);\\n```\\n\\nThanks to [Vivek](https://twitter.com/VivekNayyar09/), Babel now supports parsing these attributes: you can add the `@babel/plugin-syntax-module-attributes` plugin to your Babel config or, if you are using `@babel/parser` directly, you can enable the `moduleAttributes` plugin. Currently, we only accept the `type` attribute but we might relax this restriction in the future depending on how the proposal evolves.\\n\\n> \u2139\ufe0f Babel doesn\'t _transform_ these attributes, and they should be handled directly by your bundler or a custom plugin. Currently babel module transformers _ignore_ these attributes. We are [discussing](https://github.com/airbnb/babel-plugin-dynamic-import-node/issues/92) whether we should pass through these attributes in the future.\\n\\n## Better tree-shaking for React components ([#11428](https://github.com/babel/babel/pull/11428))\\n\\nReact exposes [many](https://github.com/babel/babel/blob/97f0b7c4a0589cf3cf1dae62fb09d1b7f1253829/packages/babel-plugin-transform-react-pure-annotations/src/index.js#L10) pure functions used to annotate or wrap elements, for example `React.forwardRef`, `React.memo` or `React.lazy`. However, minifiers and bundlers aren\'t aware that these functions are pure and thus they cannot remove them.\\n\\nThanks to [Devon](https://twitter.com/devongovett) from the Parcel team, `@babel/preset-react` now injects `/*#__PURE__*/` annotations in those functions calls to mark them as being safe to be tree-shaken away. We had only previously done this with JSX itself (`<a></a>` => `/*#__PURE__*/React.createElement(\\"a\\", null)`)\\n\\n```js title=\\"JavaScript\\"\\nimport React from \'react\';\\nconst SomeComponent = React.lazy(() => import(\'./SomeComponent\'));\\n```\\n\\n```js title=\\"JavaScript\\"\\nimport React from \'react\';\\nconst SomeComponent = /*#__PURE__*/React.lazy(() => import(\'./SomeComponent\'));\\n```\\n\\n## New experimental polyfills architecture ([#10008](https://github.com/babel/babel/issues/10008), [`babel-polyfills`](https://github.com/babel/babel-polyfills))\\n\\nIn the last three years, `@babel/preset-env` has helped users reduce bundle sizes by only transpiling the syntax features and including the `core-js` polyfills needed by their target environments.\\nCurrently Babel has three different ways to inject `core-js` polyfills in the source code:\\n- By using `@babel/preset-env`\'s `useBuiltIns: \\"entry\\"` option, it is possible to inject polyfills for every ECMAScript functionality not natively supported by the target browsers;\\n- By using `useBuiltIns: \\"usage\\"`, Babel will only inject polyfills for unsupported ECMAScript features but _only_ if they are actually used in the input souce code;\\n- By using `@babel/plugin-transform-runtime`, Babel will inject po<i>n</i>yfills (which are \\"pure\\" and don\'t pollute the global scope) for every used ECMAScript feature supported by `core-js`. This is usually used by library authors.\\n\\nOur position in the JavaScript ecosystem allows us to push these optimizations even further. `@babel/plugin-transform-runtime` has big advantages for some users over `useBuiltIns`, but it doesn\'t consider target environments: it\'s 2020 and probably very few people need to load an `Array.prototype.forEach` polyfill.\\n\\nAdditionally, why should we limit the ability to automatically inject only the necessary polyfills to `core-js`? There are also DOM polyfills, Intl polyfills, and polyfills for a myriad of other web platform APIs. Not everyone wants to use `core-js`; there are many other valid ECMAScript polyfills which have different tradeoffs (e.g. source size versus spec compliancy), and users should have the ability to use the polyfill of their choice. For example, we are actively working on an [**`es-shims`**](https://github.com/es-shims/) integration.\\n\\nWhat if the logic to inject them was not related to the actual data about the available or required polyfills, so that they can be used and developed independently?\\n\\nWe are now releasing the first experimental version of four new packages:\\n- [`babel-plugin-polyfill-corejs3`](https://github.com/babel/babel-polyfills/blob/main/packages/babel-plugin-polyfill-corejs3/README.md)\\n- [`babel-plugin-polyfill-es-shims`](https://github.com/babel/babel-polyfills/blob/main/packages/babel-plugin-polyfill-es-shims/README.md)\\n- [`babel-plugin-polyfill-regenerator`](https://github.com/babel/babel-polyfills/blob/main/packages/babel-plugin-polyfill-regenerator/README.md)\\n- [`babel-plugin-polyfill-corejs2`](https://github.com/babel/babel-polyfills/blob/main/packages/babel-plugin-polyfill-corejs2/README.md) (legacy)\\n\\nThese packages all support a `method` option for adjusting how they\'re injected (analogous to what `@babel/preset-env` and `@babel/plugin-transform-runtime` currently offer). You can inject a polyfill into an entry point (global scope only) or by direct usage in your code (both global scope and \\"pure\\" options). Below is a custom [CodeSandbox](https://001iy.csb.app/) where you can try out the differences between the polyfill options.\\n\\n[![image](https://user-images.githubusercontent.com/588473/82951506-4a043080-9f75-11ea-969b-3ac2cd0007ed.png)](https://001iy.csb.app/)\\n\\nWe are also releasing [`@babel/helper-define-polyfill-provider`](https://github.com/babel/babel-polyfills/blob/main/packages/babel-helper-define-polyfill-provider/README.md): a new helper package which makes it possible for polyfill authors and users to define _their own_ polyfill provider plugins.\\n\\nBig thanks to [Jordan](https://twitter.com/ljharb) for working with [Nicol\xf2](https://twitter.com/NicoloRibaudo) to make it possible to build the [**`es-shims`**](https://github.com/es-shims/) plugin!\\n\\n> \u2139\ufe0f If you want to read more about these packages, and learn how to set them up, you can check out the project\'s [`README`](https://github.com/babel/babel-polyfills/blob/main/README.md).\\n\\n> \u26a0\ufe0f These packages are still experimental. We would appreciate feedback about them either on Twitter or on GitHub, but they are not ready for production yet. For example, we still need to wire some polyfills, and we haven\'t tested the plugins in production applications yet."},{"id":"/2020/03/16/7.9.0","metadata":{"permalink":"/babel-website/blog/2020/03/16/7.9.0","source":"@site/blog/2020-03-16-7.9.0.md","title":"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform","description":"While preparing the Babel 8.0.0 release (in the next months), we just finished working on a new minor release which includes updates related to @babel/preset-env, TypeScript 3.8, Flow, and JSX!","date":"2020-03-20T00:00:00.000Z","formattedDate":"March 20, 2020","tags":[],"readingTime":8.11,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2020-03-20T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.9.0 Released"},"prevItem":{"title":"7.10.0 Released: Class Fields in preset-env, \'#private in\' checks and better React tree-shaking","permalink":"/babel-website/blog/2020/05/25/7.10.0"},"nextItem":{"title":"7.8.0 Released: ECMAScript 2020, .mjs configuration files and @babel/cli improvements","permalink":"/babel-website/blog/2020/01/11/7.8.0"}},"content":"While preparing the Babel 8.0.0 [release](https://github.com/babel/babel/issues/10746) (in the next months), we just finished working on a new minor release which includes updates related to `@babel/preset-env`, TypeScript 3.8, Flow, and JSX!\\n\\nA few months ago, [Jason Miller](https://twitter.com/_developit) started working on [`@babel/preset-modules`](https://github.com/babel/preset-modules): an experiment to greatly reduce bundle sizes when using the [`module`/`nomodule` pattern](https://css-tricks.com/differential-serving/). We are excited to announce that its functionality has now been merged into `@babel/preset-env`! This means that its optimizations can be applied to all `preset-env` targets values, without a separate preset.\\n\\n*Note: These optimizations will be enabled by default in Babel 8. They can be manually enabled in Babel 7.9 by passing in the option `{ bugfixes: true }` to `preset-env`.*\\n\\nThis release also has full support for [TypeScript 3.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html), which introduced explicit type-only imports and exports (i.e. `export type { foo }`), and for [Flow 0.120](https://github.com/facebook/flow/blob/master/Changelog.md#01201), which introduced the `declare` modifier for class fields (i.e. `class C { declare foo: string }`).\\n\\nWe also worked with the React team to provide a new [JSX transform](https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md), which will make it possible for React and React-like libraries to further optimize the creation of JSX elements with the addition of the `jsx` function vs. `React.createElement`.\\n\\nLastly, `@babel/parser` now supports an additional ECMAScript proposal: [Record & Tuple](https://github.com/tc39/proposal-record-tuple). Please note that this is only parser support, and the transforms are still being worked on.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.9.0).\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\nSpecial thanks go to [Luna Ruan](https://twitter.com/lunaruan) from the React Team ([Facebook](https://opensource.facebook.com/)) for contributing the new JSX transform, and [Rick Button](https://twitter.com/rickbutton) ([Bloomberg](https://www.techatbloomberg.com/)) who implemented parser support for the [Record & Tuple](https://github.com/tc39/proposal-record-tuple) proposal!\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n## `@babel/preset-env`\'s `bugfixes` option ([#11083](https://github.com/babel/babel/pull/11083))\\n\\nThe new `bugfixes` option in `@babel/preset-env` is the successor to using `@babel/preset-modules` directly.\\n\\n> If you want more context about the issues that this change helps with, we\'d suggest you listen to (or read) the recently published podcast episodes with Jason: [#2 Modern JavaScript and the Future of preset-env](https://podcast.babeljs.io/preset-env/) and [#3 Compiling Your Dependencies](https://podcast.babeljs.io/dependencies).\\n\\nUntil now, `@babel/preset-env` (and Babel plugins in general) grouped ECMAScript syntax features into collections of closely related smaller features. These groups can be large and include a lot of edge cases. For example, the \\"function arguments\\" group and plugin includes destructured, default and rest parameters.\\n\\nFrom this grouping information, Babel enables or disables each group based on the browser support target you specify to `@babel/preset-env`\u2019s `targets` option.\\n\\nHere\'s the *problem*: if any version of any browser in that list contains a bug triggered by modern syntax, the only solution (that we considered at the time) was to enable the corresponding transform group that fixes that bug.\\n\\nOver time more bugs would eventually be uncovered and reported to our issues, which caused `preset-env` to output more code for the sake of these edge cases. In the worst case, it meant that the output was the same as  just compiling everything to ES5, which `preset-env` was created to help prevent.\\n\\nWhen the `bugfixes: true` option is enabled, `@babel/preset-env` takes a different approach: it transpiles the broken syntax to the closest *non-broken modern syntax*.\\n\\nFor example: all of the new syntax features relating to function parameters are grouped into the same Babel plugin (`@babel/plugin-transform-function-parameters`). When targeting `edge 16`, it has a bug related to parsing shorthand destructured parameters with default values within arrow functions:\\n\\n```js title=\\"JavaScript\\"\\n// this breaks in Edge 16:\\nconst foo = ({ a = 1 }) => {};\\n\\n// .. but this doesn\'t:\\nfunction foo({ a = 1, b }, ...args) {}\\n\\n// ... and neither does this:\\nconst foo = ({ a: a = 1 }) => {};\\n```\\n\\nThis means that if we give `@babel/preset-env` this input and targeted Edge 16:\\n```js title=\\"JavaScript\\"\\nconst foo = ({ a = 1 }, b = 2, ...args) => [a, b, args];\\n```\\n\\nIt transforms it down to ES5-like parameters:\\n```js title=\\"JavaScript\\"\\nconst foo = function foo(_ref, b) {\\n let { a = 1 } = _ref;\\n\\n if (b === void 0) { b = 2; }\\n\\n for (\\n   var _len = arguments.length,\\n     args = new Array(_len > 2 ? _len - 2 : 0),\\n     _key = 2;  _key < _len; _key++\\n ) {\\n   args[_key - 2] = arguments[_key];\\n }\\n\\n return [a, b, args];\\n};\\n```\\n\\n\\nHowever, if we enable the `bugfixes` option, it only transforms the broken syntax:\\n```js title=\\"JavaScript\\"\\nconst foo = ({ a: a = 1 }, b = 2, ...args) => [a, b, args];\\n```\\n\\n> You can see this example in action at our [REPL](https://babeljs.io/repl#?browsers=Edge%2016&code_lz=PTAEFEBMHMFNQIwDZQAsCGBnU7QCMBXaUAdzAAd0AnTASwDtjNUB7KgFw3slElk3ZUCAY3YEqsSACgQoSlXQBbWO1g1SYPgDN0BADbtQAN3R6C_UrU4McVKixKgtBeqNot6mKcI8CnLFlAAXlAACgBvHGDEUABfABp8aIAmRIA6DOpoTABKYIA-UABtdES8RKzMAF0AbiA&sourceType=unambiguous&lineWrap=true&presets=env%2Cenv&prettier=true&version=7.9.0)\\n\\nYou can enable this option today by adding it to `@babel/preset-env` in your configuration:\\n\\n```jsonls\\n{\\n  \\"presets\\": [\\n    [\\"@babel/preset-env\\", {\\n      \\"targets\\": { \\"esmodules\\": true }, // Use the targets that you was already using\\n      \\"bugfixes\\": true\\n    }]\\n  ]\\n}\\n```\\n\\n> \u2139\ufe0f Currently, the `bugfixes` option gives the best results when using the `esmodules: true` target, which allows you to target the browsers with native ES modules support and use the [`module`/`nomodule` pattern](https://css-tricks.com/differential-serving/). We hope to continue improving it over the next few releases, and enable it by default in Babel 8.\\n\\nMoving forward, we would like to work with the community (including browsers) to allow for this kind of approach to work smoothly as we continually transition in JavaScript\'s development. In the ideal scenario, Babel would be able to implement and help influence the future of new proposals as they are suggested and refined, and smooth over these edge cases for existing standards so that the minimum compiled output is possible for all users of JavaScript based on their targets.\\n\\n## TypeScript 3.8: type-only imports and exports ([#11171](https://github.com/babel/babel/pull/11171))\\n\\nYou can now explicitly mark imports and exports as type-only, similarly to what you can already do in Flow:\\n\\n```typescript\\nimport type { SomeThing } from \\"./some-module.js\\";\\n\\nexport type { SomeThing };\\n```\\n\\nBy doing so, Babel can safely decide which imports or exports are used for types and which are values.\\n\\nSince Babel doesn\'t analyze types and works on a per-file basis (similarly to TypeScript\'s `--isolatedModules` option), until now `@babel/plugin-transform-typescript` handled imports not used as values as if they were type-only.\\n\\nStarting from Babel 7.9 you can use the new `type` modifier without any configuration change.\\n\\nWe recommend configuring `@babel/preset-typescript` or `@babel/plugin-transform-typescript` so that it only considers imports as type-only when there is the explicit `type` keyword, similarly to TypeScript\'s `--importsNotUsedAsValues preserve` option:\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"presets\\": [\\n    [\\"@babel/preset-typescript\\", {\\n      \\"onlyRemoveTypeImports\\": true\\n    }]\\n  ]\\n}\\n```\\n\\n> \u2139\ufe0f These features were contributed by the Babel team together, and by [Siddhant N Trivedi](https://twitter.com/sidntrivedi012/). If you have interested in seeing how it\'s all done, please check how we did it [on YouTube](https://www.youtube.com/playlist?list=PLoB4QYcbtyGbpTpRs_ZZLTVxi96iCl7-A)!\\n\\n## Flow `declare` fields ([#11178](https://github.com/babel/babel/pull/11178))\\n\\nThe class fields proposal specifies uninitialized class fields are initialized to `undefined`: this is different from what Babel does with Flow, because it simply ignores them.\\n\\nFor this reason, the Flow team has added support for the `declare` modfier for class fields:\\n\\n```js title=\\"JavaScript\\"\\nclass Foo {\\n  x: ?string; // A \\"real\\" field\\n  declare y: number; // A type-only field\\n}\\n```\\n\\nIn the above example, only `y` should be completely removed by Babel.\\n\\nTo avoid breaking changes, we introduced support for declare in class fields behind a flag: `\\"allowDeclareFields\\"`, supported by both `@babel/plugin-transform-flow` and `@babel/preset-flow`. This will become default behavior in Babel 8, so it is recommended that you migrate your config to use it:\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"presets\\": [\\n    [\\"@babel/preset-flow\\", {\\n      \\"allowDeclareFields\\": true\\n    }]\\n  ]\\n}\\n```\\n\\n## A new JSX transform ([#11154](https://github.com/babel/babel/pull/11154))\\n\\nThe React team created an [RFC](https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md) back in February of last year to discuss simplifying element creation.\\n\\nIn a future stable release, React will support a group of new functions for instantiating JSX elements as an alternative to the legacy general-purpose `React.createElement` function. This will allow optimizing them better in the future.\\n\\n> \u2139\ufe0f While it\'s not released in a stable release yet, you can try it out on the [experimental](https://reactjs.org/blog/2019/10/22/react-release-channels.html#experimental-channel) React release channel:\\n> ```sh title=\\"Shell\\"\\n> npm install react@experimental react-dom@experimental\\n> ```\\n\\nWe worked with the team to finish a new transform that supports compiling JSX to these new functions. It also automatically imports `\\"react\\"` (or other libraries which support the new API) when needed, so you don\'t have to manually include it anymore.\\n\\nAs an example, this input:\\n\\n```jsx title=\\"JSX\\"\\nfunction Foo() {\\n  return <div />;\\n}\\n```\\n\\nwould turn into:\\n\\n```jsx title=\\"JSX\\"\\nimport { jsx as _jsx } from \\"react/jsx-runtime\\";\\nfunction Foo() {\\n  return _jsx(\\"div\\", ...);\\n}\\n```\\n\\n> **Note:** The functions inside `react/jsx-runtime` and `react/jsx-dev-runtime` are not meant to be used outside the `@babel/plugin-transform-react-jsx` and `@babel/plugin-transform-react-jsx-development` plugins themselves.\\n\\nIn summary (and please check the [RFC](https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md) for more information), the transform will:\\n\\n- Always pass children as props.\\n- Pass `key` separately from other props.\\n- In DEV,\\n  - Pass a flag determining if it was static or not.\\n  - Pass `__source` and `__self` separately from other props.\\n\\nUsage: You can enable this new transform by passing `{ \\"runtime\\": \\"automatic\\" }` (as opposed to `\\"classic\\"`) to `@babel/preset-react` (or `@babel/plugin-transform-react-jsx`):\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"presets\\": [\\n    [\\"@babel/preset-react\\", {\\n      \\"runtime\\": \\"automatic\\"\\n    }]\\n  ]\\n}\\n```\\n\\nAnd starting from Babel 8, `\\"automatic\\"` will be the default runtime.\\n\\nYou can also enable development mode for this new transform by using the new `@babel/plugin-transform-react-jsx-development` transform or by passing `{ \\"development\\": true, \\"runtime\\": \\"automatic\\" }` to `@babel/preset-react`.\\n\\nYou can read mode about this new transform in [the docs](https://babeljs.io/docs/en/babel-preset-react)."},{"id":"/2020/01/11/7.8.0","metadata":{"permalink":"/babel-website/blog/2020/01/11/7.8.0","source":"@site/blog/2020-01-11-7.8.0.md","title":"7.8.0 Released: ECMAScript 2020, .mjs configuration files and @babel/cli improvements","description":"This is the first release of the year! \ud83c\udf89","date":"2020-01-11T20:00:00.000Z","formattedDate":"January 11, 2020","tags":[],"readingTime":7.42,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.8.0 Released: ECMAScript 2020, .mjs configuration files and @babel/cli improvements","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2020-01-11T20:00:00.000Z","categories":"announcements","share_text":"Babel 7.8.0 Released"},"prevItem":{"title":"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform","permalink":"/babel-website/blog/2020/03/16/7.9.0"},"nextItem":{"title":"Babel\'s Funding Plans","permalink":"/babel-website/blog/2019/11/08/babels-funding-plans"}},"content":"This is the first release of the year! \ud83c\udf89\\n\\nBabel 7.8.0 supports the new [ECMAScript 2020](https://github.com/tc39/proposals/blob/master/finished-proposals.md) features by default: you don\'t need to enable individual plugins for nullish coalescing (`??`), optional chaining (`?.`) and dynamic `import()` anymore with preset-env.\\n\\nWe also finished aligning our different configuration files with the formats natively supported by Node.js, a process that we started in the [7.7.0 release](https://babeljs.io/blog/2019/11/05/7.7.0#new-configuration-file-extensions-10501-https-githubcom-babel-babel-pull-10501-10599-https-githubcom-babel-babel-pull-10599).\\n\\nLastly, Babel\'s CLI now supports two new options: `--out-file-extension` and `--copy-ignored`.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.8.0).\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\nShoutout to [Abdul Ali](https://github.com/AbdulAli19), [Jack Isherwood](https://github.com/jackisherwood), [Jayen Ashar](https://github.com/jayenashar), [James Beavers](https://github.com/Druotic), [Klaus Meinhardt](https://github.com/ajafff), [Oleksandr Fediashov](https://github.com/layershifter), [Siddhant N Trivedi](https://github.com/sidntrivedi012), [Tsubasa Nakayama](https://github.com/bassaer), [Yordis Prieto](https://github.com/yordis) and [ZYSzys](https://github.com/ZYSzys) for their first PRs!\\n\\nWe also want to thank [Thomas Smith](https://github.com/Thom1729) for volunteering to help us maintain the important [`babel-sublime`](https://packagecontrol.io/packages/Babel) syntax highlighter plugin, and welcome [Raja Sekar](https://github.com/rajasekarm), our newest addition to the Babel organization!\\n\\nIf you or your company wants to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on our [Open Collective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to fund our efforts in supporting the wide range of JavaScript users. Reach out at [team@babeljs.io](mailto:team@babeljs.io) if you\'d like to discuss more!\\n\\n> We recently published a [funding post](https://babeljs.io/blog/2019/11/08/babels-funding-plans) detailing our funding plans and our goals. Check it out!\\n\\n## ECMAScript 2020 default support ([#10811](https://github.com/babel/babel/pull/10811), [#10817](https://github.com/babel/babel/pull/10817), [#10819](https://github.com/babel/babel/pull/10819), [#10843](https://github.com/babel/babel/pull/10843))\\n\\nDuring the last [meeting](https://github.com/tc39/agendas/blob/master/2019/12.md), TC39 moved both the nullish coalescing and optional chaining proposals to Stage 4!\\n\\nThe nullish coalescing operator allows you to provide a fallback value when an expression evaluates to `null` or `undefined`:\\n\\n```js title=\\"JavaScript\\"\\nconst name = person.fullName ?? \\"Anonymous\\";\\nconsole.log(`Hello, ${name}!`);\\n```\\n\\nThis is similar to how the logical OR (`||`) operator works. The difference is that while `||` checks for \\"falsy\\" values (i.e. `undefined`, `null`, `false`, `0`, `0n` and `\\"\\"`), `??` only checks for \\"nullish\\" values. This better matches the \\"value not provided\\" mental model, and works better with possibly falsy, but valid, values:\\n\\n```js title=\\"JavaScript\\"\\nconst element = { index: 0, value: \\"foo\\" };\\n\\nconst index = element.index ?? -1; //  0 :D\\nconst index = element.index || -1; // -1 :(\\n```\\n\\nThe optional chaining proposal uses the same concept of \\"nullish values\\", allowing optional property accesses on values which could be nullish. It also supports optional function calls and computed properties.\\n\\n```js title=\\"JavaScript\\"\\nconst city = person.address?.city; // person.address could be not defined\\nconst isNeighbor = person.address?.isCloseTo(me);\\n\\nperson.sayHayUsing?.(\\"Twitter\\"); // The person.sayHayUsing method could be not defined\\n```\\n\\nYou can now safely use these new features in your code! If you are already using `@babel/preset-env`, you can use these two operators and they will be compiled based on your targets, just like any other ECMAScript feature. If you were using the `@babel/plugin-proposal-nullish-coalescing-operator` or `@babel/plugin-proposal-optional-chaining` directly, you can remove them from your config:\\n\\n```diff\\n{\\n  \\"presets\\": [\\n    [\\"@babel/env\\", { \\"targets\\": [\\"last 2 versions\\"] }]\\n  ],\\n  \\"plugins\\": [\\n-   \\"@babel/proposal-optional-chaining\\",\\n-   \\"@babel/proposal-nullish-coalescing-operator\\"\\n  ]\\n}\\n```\\n\\nThese features are now also enabled by default in `@babel/parser`: if you were using it directly, you can remove the `nullishCoalescingOperator` and `optionalChaining` parser plugins. We also enabled parsing for dynamic `import()` (which has been included in `@babel/preset-env` since [v7.5.0](https://babeljs.io/blog/2019/07/03/7.5.0#dynamic-import-9552-https-githubcom-babel-babel-pull-9552-and-10109-https-githubcom-babel-babel-pull-10109)), so you can safely remove the `dynamicImport` plugin.\\n\\n## Support every configuration file extension ([#10783](https://github.com/babel/babel/pull/10783) and [#10903](https://github.com/babel/babel/pull/10903))\\n\\nBabel 6 supported a single, JSON-based, configuration file: `.babelrc`.\\n\\nIn Babel 7.0.0, we introduced `babel.config.js` (which has [different resolution logic](https://babeljs.io/docs/en/config-files)) and `.babelrc.js`. JavaScript config files can be useful for scenarios needing higher flexibility. This was the situation:\\n\\n<div style={{margin: \\"auto\\",width: \\"fit-content\\"}}>\\n\\n| **Node.js file type** | **babel.config.\\\\_\\\\_** |           **.babelrc.\\\\_\\\\_**           |\\n| :-------------------: | :-------------------: | :-----------------------------------: |\\n|         `.js`         |     \u2714\ufe0f Supported      |             \u2714\ufe0f Supported              |\\n|        `.json`        |   \u274c Not supported    | \u2754 Supported, with implicit extension |\\n\\n</div>\\n\\n> \u2139\ufe0f We strongly recommend reading about the differences between [`babel.config.js` and `.babelrc.js`](https://babeljs.io/docs/en/config-files)!\\n\\nMore recently, Node.js 13.2.0 was released, adding support for native ECMAScript modules and the `.cjs` and `.mjs` file extensions. In Babel 7.7.0 we added support for `.cjs` config files to allow users to enable `\\"type\\": \\"module\\"` in their `package.json` without breaking Babel, as well as support for `babel.config.json`, which allows for static project-wide configuration.\\n\\n<div style={{margin: \\"auto\\",width: \\"fit-content\\"}}>\\n\\n| **Node.js file type** |                **babel.config.\\\\_\\\\_**                |                  **.babelrc.\\\\_\\\\_**                  |\\n| :-------------------: | :-------------------------------------------------: | :-------------------------------------------------: |\\n|         `.js`         | \u2714\ufe0f Supported when `\\"type\\": \\"module\\"` is not enabled | \u2714\ufe0f Supported when `\\"type\\": \\"module\\"` is not enabled |\\n|        `.json`        |                    \u2714\ufe0f Supported                     |        \u2754 Supported, with implicit extension        |\\n|        `.cjs`         |                    \u2714\ufe0f Supported                     |                    \u2714\ufe0f Supported                     |\\n|        `.mjs`         |                  \u274c Not supported                   |                  \u274c Not supported                   |\\n\\n</div>\\n\\nThis release aligns Babel with the file types natively supported by Node.js by allowing `.babelrc.json`, `babel.config.mjs`, and `.babelrc.mjs`.\\n\\n<div style={{margin: \\"auto\\",width: \\"fit-content\\"}}>\\n\\n| **Node.js file type** | **babel.config.\\\\_\\\\_** | **.babelrc.\\\\_\\\\_** |\\n| :-------------------: | :-------------------: | :---------------: |\\n|         `.js`         |     \u2714\ufe0f Supported      |   \u2714\ufe0f Supported    |\\n|        `.json`        |     \u2714\ufe0f Supported      |   \u2714\ufe0f Supported    |\\n|        `.cjs`         |     \u2714\ufe0f Supported      |   \u2714\ufe0f Supported    |\\n|        `.mjs`         |     \u2714\ufe0f Supported      |   \u2714\ufe0f Supported    |\\n\\n</div>\\n\\nPlease remember that ECMAScript modules are **asynchronous**: that\'s why, for example, you can\'t `require()` them and instead have to use `import()`, which returns a promise.\\n\\nFor these reasons, they can only be used when calling Babel via the promise-based or callback-based entry points. They already work with `@babel/cli`, `babel-loader` and `gulp-babel`, and they will work with the next release of `rollup-plugin-babel`. Note that they are not supported by `babel-eslint` yet.\\n\\n## New CLI options ([#9144](https://github.com/babel/babel/pull/9144) and [#10887](https://github.com/babel/babel/pull/10887))\\n\\nWe added two new flags to `@babel/cli`: `--copy-ignored` and `--out-file-extension`.\\n\\n`--copy-ignored` can be used to copy files that are not transpiled by Babel, either because they are ignored using the `--ignore` CLI option, or because `\\"ignore\\"` is set in a configuration file.\\n\\n> \u26a0\ufe0f To maintain backward compatibility, in Babel 7.8.4 the default value of the `--copy-ignored` option has been changed to `true`. If you want to disable it, you can use `--no-copy-ignored`.\\n\\nThis is similar to how the `--copy-files` option works, but `--copy-files` is meant to copy anything which is not transpiled because it isn\'t a JavaScript file (for example, `.css` or `.json`), rather than explicitly ignored files.\\n\\n`--out-file-extension` can be used to configure the extension of the files generated by Babel. For example, if you are transpiling `.js` files containing native ECMAScript modules in Node.js and want to generate CommonJS files, you might need to use the `.cjs` extension:\\n\\n```shell title=\\"Shell\\"\\n$ babel src --out-dir lib-cjs --out-file-extension cjs\\n```\\n\\n## Preparing for Babel 8\\n\\nWe are starting to work on the Babel 8.0.0 release in our umbrella issue: [#10746](https://github.com/babel/babel/issues/10746).\\n\\nBabel 8 will only contain breaking changes: we will release a minor version the same day, containing all the bug fixes and new features that would otherwise be released in 8.0.0.\\n\\nWhile we don\'t anticipate a huge migration path, there are two issues which we want to bring to your attention:\\n\\n### Extract targets parser and compat data from preset-env ([#10899](https://github.com/babel/babel/pull/10899))\\n\\nVarious 3rd party presets are currently using `@babel/preset-env`\'s internal logic to parse compilation targets or to retrieve information about necessary plugins and polyfills.\\n\\nWe have decided to officially support these two use cases by providing two new public packages:\\n\\n- `@babel/helper-compilation-targets`, which exports a function to normalize the specified targets and a few other related utilities:\\n\\n  ```js title=\\"JavaScript\\"\\n  import getTargets from \\"@babel/helper-compilation-targets\\";\\n\\n  getTargets({\\n    browsers: [\\"last 2 chrome versions\\"],\\n    node: 10,\\n  }) ==\\n    {\\n      chrome: \\"77.0.0\\",\\n      node: \\"10.0.0\\",\\n    };\\n  ```\\n\\n- `@babel/compat-data`, which contains a collection of JSON files where we store all the browsers versions for which each plugin or `core-js@2` polyfill is required. It\'s mostly generated from [`compat-table`](https://kangax.github.io/compat-table/), but we might add other data sources in the future.\\n  If you need data for `core-js@3` polyfills, you can use [`core-js-compat`](https://www.npmjs.com/package/core-js-compat).\\n\\nWe plan to disallow using internal files starting from Babel 8. If you are relying on other internal APIs, please let us know!\\n\\n### Introduce opt-in stricter AST validation ([#10917](https://github.com/babel/babel/pull/10917))\\n\\n`@babel/types` already performs many checks to ensure that the AST you are building is valid. For example, this code will throw because you can\'t use a statement in place of an expression:\\n\\n```js title=\\"JavaScript\\"\\n// foo = if (true) {}\\n\\nt.assignmentExpression(\\n  \\"=\\",\\n  t.identifier(\\"foo\\"),\\n  t.ifStatement(t.booleanLiteral(true), t.blockStatement([]))\\n);\\n```\\n\\nWe are introducing stricter validation to prevent even more invalid ASTs: not only from a tree shape point of view but also ensuring that nodes in the correct position carry valid information. For example, starting from Babel 8 `t.identifier(\\"123\\")` will be disallowed, because `123` is not a valid identifier.\\n\\nWe can\'t enable these checks in Babel 7.8.0 because the risk of breaking existing plugins is too high, but we highly encourage you to enable these stricter checks using the `BABEL_TYPES_8_BREAKING=true` environment variable and open issues (or better, PRs!) to fix the plugins that you are using which won\'t work with Babel 8."},{"id":"/2019/11/08/babels-funding-plans","metadata":{"permalink":"/babel-website/blog/2019/11/08/babels-funding-plans","source":"@site/blog/2019-11-08-babels-funding-plans.md","title":"Babel\'s Funding Plans","description":"One of the greatest strengths of open source software is that it is open and free for anyone to contribute. This also leads to one of its greatest challenges, which is to support consistent, sustainable maintenance.","date":"2019-11-08T12:00:00.000Z","formattedDate":"November 8, 2019","tags":[],"readingTime":8.32,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"Babel\'s Funding Plans","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2019-11-08T12:00:00.000Z","categories":"announcements","share_text":"Babel\'s Funding Plans"},"prevItem":{"title":"7.8.0 Released: ECMAScript 2020, .mjs configuration files and @babel/cli improvements","permalink":"/babel-website/blog/2020/01/11/7.8.0"},"nextItem":{"title":"7.7.0 Released: Error recovery and TypeScript 3.7","permalink":"/babel-website/blog/2019/11/05/7.7.0"}},"content":"One of the greatest strengths of open source software is that it is open and free for anyone to contribute. This also leads to one of its greatest challenges, which is to support consistent, sustainable maintenance.\\n\\nBabel isn\'t a company. As mentioned in the [7.0.0 post](https://babeljs.io/blog/2018/08/27/7.0.0#maintainers-are-people), the all-volunteer Babel team (sans Henry) has been doing its best to steward the project and handle all the expectations of the community. We\'re glad that we have continued to make releases, but even keeping up-to-date with reported issues is difficult to manage, let alone our integrations with other tools, new proposals, and effect on the greater ecosystem.\\n\\nIn March 2018, Henry [left his job](https://www.henryzoo.com/leaving-behance/) to start [working on securing more funding for Babel](https://www.henryzoo.com/in-pursuit-of-open-source-part-1/). After a lot of work and support from the community, the team was able to fund Henry as a full-time maintainer.\\n\\nThis has been a big win for the team, but we\'re finding that it is not enough.\\n\\n\x3c!-- truncate --\x3e\\n\\n## New Challenges\\n\\nBabel has come a long way from [its origins as \\"6to5\\"](https://www.youtube.com/watch?v=fntd0sPMOtQ), growing beyond just the *adoption* and implementation of language features in JavaScript. It has become a key part in its _development_:\\n\\n- Babel\'s popularity has increased exponentially, going from 3M downloads per week in March 2018 to 16M downloads per week today.\\n\\n- Babel is now involved in the [TC39](https://tc39.es) standards process as participating members in meetings and discussions. \\"Is there a Babel plugin already?\\" is a common question for new proposals.\\n\\n- Babel has become so embedded as underlying infrastructure that most developers interact with it indirectly, including in CLIs such as [`create-react-app`](https://github.com/facebook/create-react-app), bundlers like [Parcel](https://parceljs.org), frameworks like [Next.js](https://nextjs.org), and many npm libraries.\\n\\nWidespread adoption brings with it new challenges, and the team has been grappling with issues around maintenance and sustainability. The project has grown beyond the resources the team has available, and we\'d like to share our plan for addressing this problem.\\n\\n## Funding Plans\\n\\nWe believe that Babel would benefit immensely from more than one person being funded to work on the project, and want to secure funding for three additional team members, [Nicol\xf2](https://twitter.com/NicoloRibaudo), [J\xf9nli\xe0ng](https://twitter.com/JLHwung), and [Kai](https://twitter.com/kai_cataldo) as part-time maintainers.\\n\\nWe are setting up an additional funding goal of $12,000/month through [Open Collective](https://opencollective.com/babel). This is $4,000/month each, which is the target we have defined for a part-time salary.\\n\\nWe discussed a number of different approaches as a team \u2013 creating an hourly rate for contributors, setting aside grants for features, bug bounties for specific issues \u2013 and ultimately decided that a stable income would lead to higher quality work (no pressure to rush development), the ability to dedicate time to plan for a roadmap in a more holistic manner, being able to take time for breaks and vacation, and not having to worry about where their next paycheck is coming from.\\n\\nThat being said, we will continue to evaluate and be open/transparent with making changes as needed.\\n\\nWe\'d like to give a huge shoutout to our Open Collective sponsors: [Handshake](https://handshake.org/), [Airbnb](https://twitter.com/airbnbeng), [AMP](https://amp.dev/), [Facebook](https://opensource.facebook.com), [trivago](https://tech.trivago.com/opensource/), [Salesforce](https://twitter.com/salesforceeng), [Frontend Masters](https://frontendmasters.com/), [RunKit](https://runkit.com/home), [Webflow](https://webflow.com/), [Adobe](https://www.adobe.com/), [Coinbase](https://www.coinbase.com/), [BitMEX](https://www.bitmex.com/), and everyone else who has donated!\\n\\n![Babel Open Collective monthly donations graph](https://i.imgur.com/C76KsKZ.png)\\n\\n__One thing we\'d like to note:__ Collectives currently only show the total annual amount donated, which may work better with a one-time grant donation model. We believe that showcasing the monthly recurring amount is a more accurate description of the financial health of our project, and the team is hoping to help out with this [issue](https://github.com/opencollective/opencollective/issues/1585).\\n\\n## How You Can Help\\n\\nYou can financially contribute to Babel on our [Open Collective](https://opencollective.com/babel)!\\n\\nOur team is using [Open Collective](https://opencollective.com/babel) to fund our team members. Both companies and individuals and donate to the team, either as a one-time or recurring donation.\\n\\nIf you have any questions or concerns about financially contributing to Babel we\'d be happy to discuss by [email](mailto:team@babeljs.io).\\n\\nAnd in case your company is located in one of the cities that the core team lives in we\'d also love to meet in-person!\\n\\n- [Henry](https://twitter.com/left_pad) is based in NYC and will be in the Bay Area November 4th-15th.\\n- [Nicol\xf2](https://twitter.com/NicoloRibaudo) is based in Italy and will be in Moscow November 6th-10th.\\n- [Brian](https://twitter.com/existentialism) is based in Houston, TX.\\n- [J\xf9nli\xe0ng](https://twitter.com/JLHwung) is based in Ontario.\\n- [Kai](https://twitter.com/kai_cataldo) is based in the New York City area.\\n\\nThe team would appreciate hearing about how you are using Babel or how you are looking to get involved.\\n\\n## Our Goals\\n\\nWe will be writing up more in-depth posts on these topics, but here are some general areas where we aim to continue focusing on:\\n\\n- **Stability**: This includes checking against the official [test262](https://github.com/tc39/test262) tests. This [support](https://github.com/babel/babel/issues/4987) gives us a better sense of our spec compliance so we know what is missing, adding smoke tests using Babel itself and our top dependents, in addition to our own tests. Reliability is extremely important to us given our position in the ecosystem.\\n\\n- **Debuggability**: We would like to implement better warnings/errors on [configuration](https://github.com/babel/babel/issues/10617) and explain what is being outputted to help users make decisions on code size. Given the complexity of a pluggable tool tracking an ever-changing specification, it can be hard to hide the complexity. We would really like to spend time on making our usage more accessible.\\n\\n- **General ecosystem support**: This includes what we can do to help libraries publish ES2015+ code and for developers to target new browsers and ship less code (your own code, node_modules, [polyfills](https://github.com/babel/babel/issues/10008)) when possible, while still making it accessible for all browser users.\\n\\n- **Codemods**: We would like to put more emphasis on the opposite direction of code transformation (aka 5to6, [Lebab](https://github.com/lebab/lebab)), which is a powerful idea that we can help educate the community about. This would help with the transition between changes in the proposal (or if it\'s dropped/stalled) via an upgrade tool.\\n\\nAnd long term:\\n\\n- **Proposal Advancement**: Our goal is to enable a feedback loop for proposal champions to get validation through \\"real world\\" use cases within the JavaScript community. This will ultimately only happen if the plugin is adopted, there\'s enough time for people to use it and learn its implications, and for there to be a workflow in place for dialogue with and giving feedback to the TC39 committee. We would like to figure out how to best be a resource for more community members to understand the TC39 process and get involved in the improvement of JavaScript from the ground up. This requires plugins tracking the proposals to be created in a timely fashion and maintained, which requires a considerable amount of effort. This is especially true with plugins for early stage proposals, since these plugins require continued maintenance as proposals are updated.\\n- **Education**: Related to this is an aspiration to help more developers understand the tools they use. Many tools and frameworks, particularly in the JavaScript ecosystem, operate over similar core concepts (such as ASTs). Leveling the playing field empowers more people to contribute, fix issues, and bring new ideas to the table. Language development has a high barrier to entry that our project can help lower.\\n\\n## How Companies and Individuals Have Helped Before\\n\\nWe know that as maintainers we need to do outreach for our project and for open source as a whole. Our efforts up to this point have consisted of the following:\\n\\n- [Thinkmill](https://www.thinkmill.com.au/) funded 3 months of part-time work on Babel for Sebastian, the creator of Babel, while he was employed there. This was followed by 3 months working part-time on Babel at [Cloudflare](https://www.cloudflare.com/). And then almost 12 months of full-time work while employed by [Facebook](https://opensource.facebook.com/), which included the entire release of Babel 6.\\n- Adobe funded 50% of Henry\'s work on Babel during his time working there.\\n- We\'ve helped companies during internal open source-oriented hackathons, including [Cond\xe9 Nast](https://technology.condenast.com/) and [Bloomberg](https://www.techatbloomberg.com/) and hosting workshops on open source and Babel development at companies like Netflix.\\n- Speaking at [companies](https://twitter.com/left_pad/status/1190398587538202624?s=20) like Spotify/Facebook, local [meetups](https://twitter.com/left_pad/status/1184301596437549056?s=20), bootcamps, [universities](https://twitter.com/left_pad/status/1191515333347004416?s=20) like Berkeley, and participating in [Hacktoberfest](https://twitter.com/bendhalpern/status/1050181229910331392?s=20) events.\\n\\nSupporting the project is not limited to just financial means. Different companies have allowed their employees to implement some specific features during their working time:\\n\\n- [Bloomberg](https://www.techatbloomberg.com/)\'s folks have implemented support for different class features (like private fields), and are currently working on automatic testing of Babel\'s transforms using the official ECMAScript test suite (Test262)\\n\\n- [Trivago](https://tech.trivago.com/), which was also a Base Support Sponsor, has implemented the partial application proposal\\n\\n- [RunKit](https://runkit.com/) has been working with Nicol\xf2 as a contractor to implement syntactic placeholders in `@babel/template`.\\n\\nSupport can ultimately an opportunity to talk and learn from maintainers, provide real-world feedback to the project, and build a long-term relationship.\\n\\n> We get a lot of valuable ideas from our relationships with maintainers. It\'s almost a proxy for hiring the best people in the world, only for a limited amount of time. Open Collective gives a business like ours access to a diverse talent pool that would be impossible to build internally. - [Guillermo Rauch](https://blog.opencollective.com/zeit/)\\n\\nWant to get involved? Learn more in the [How You Can Help section](#how-you-can-help).\\n\\n## Conclusion\\n\\nIn an ideal world, Babel wouldn\'t even be necessary. However, in practice, there may always be gaps between where JavaScript is at with future proposals, when vendors can implement them (after Stage 3), what browsers a given website supports, and what Node.js versions are supported for a given library. In that sliding window of functionality is where a tool like Babel can provide significant value.\\n\\nWhile we are excited for where Babel will go in the future, the team has been struggling to keep up with the current demands of the project for quite some time.  Meeting our funding goals will allow us to not only better meet the current needs of the project, but also help push it into the future.\\n\\nWe hope you will join us in [supporting](https://opencollective.com/babel) this community, whether through sponsorship of the core team or getting involved in the project.\\n\\nThanks and we hope to see you around, whether in-person or on GitHub!"},{"id":"/2019/11/05/7.7.0","metadata":{"permalink":"/babel-website/blog/2019/11/05/7.7.0","source":"@site/blog/2019-11-05-7.7.0.md","title":"7.7.0 Released: Error recovery and TypeScript 3.7","description":"Today we are releasing Babel 7.7.0!","date":"2019-11-05T10:00:00.000Z","formattedDate":"November 5, 2019","tags":[],"readingTime":8.435,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.7.0 Released: Error recovery and TypeScript 3.7","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2019-11-05T10:00:00.000Z","categories":"announcements","share_text":"Babel 7.7.0 Released"},"prevItem":{"title":"Babel\'s Funding Plans","permalink":"/babel-website/blog/2019/11/08/babels-funding-plans"},"nextItem":{"title":"7.6.0 Released: Private static accessors and V8 intrinsic syntax","permalink":"/babel-website/blog/2019/09/05/7.6.0"}},"content":"Today we are releasing Babel 7.7.0!\\n\\nThis release includes new parser features like top-level await (`await x()`, [Stage 3](https://github.com/tc39/proposal-top-level-await)) and Flow `enum` declarations ([Flow proposal](https://github.com/gkz/enums)). And now, `@babel/parser` has the option of recovering from certain syntax errors!\\n\\nWe\'ve also added support for [TypeScript 3.7](https://devblogs.microsoft.com/typescript/announcing-typescript-3-7-rc/): Babel can parse and transform private class fields with type annotations, public class fields annotations defined using the `declare` keyword, type assertion function signatures and template literals in `enum` declarations.\\n\\nBabel now understands three new configuration files: `babel.config.json`, `babel.config.cjs` and `.babelrc.cjs`, which behave the same as `babel.config.js` and `.babelrc.js` files.\\n\\nLastly, Babel 7.7.0 uses 20% less memory than 7.6.0.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.7.0).\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\nShoutout to [Alejandro S\xe1nchez](https://github.com/alejo90), [Chris Garrett](https://github.com/pzuraq), [\u5f6d\u9a70](https://github.com/chris-peng-1244), [Daniel Arthur Gallagher](https://github.com/DanArthurGallagher), [ExE-Boss](https://twitter.com/ExE_Boss), [Eugene Myunster](https://github.com/t0lkman), [Georgii Dolzhykov](https://github.com/thorn0), [Gerald](https://twitter.com/gera2ld), [Linus Unneb\xe4ck](https://github.com/LinusU), [Martin Forsgren](https://github.com/dentrado), [Matthew Whitworth](https://github.com/mwhitworth), [Micah Zoltu](https://github.com/MicahZoltu), [Mohammad Ahmadi](https://github.com/m-ahmadi) and [Samuel Kwok](https://github.com/samMeow) for their first PRs!\\n\\nThis release has also been made possible thanks to collaboration with teams of other open source projects: thanks to [Devon Govett](https://twitter.com/devongovett) ([Parcel](https://parceljs.org/)) for implementing support for `babel.config.json` files, and to [George Zahariev](https://twitter.com/gkzahariev) ([Flow](https://flow.org/)) for adding Flow `enum` declarations to `@babel/parser`!\\n\\nAnother special thanks goes to [Bloomberg](https://www.techatbloomberg.com/) for organizing an Open Source Hackaton to encourage their engineers to give back to the community! In particular, [Robin Ricard](https://twitter.com/r_ricard) and [Jaideep Bhoosreddy](https://twitter.com/jbhoosreddy) who are actively working on automating the testing of Babel transforms against the [Test262 suite](https://github.com/tc39/test262).\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on [OpenCollective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to both fund our efforts in supporting the wide range of JavaScript users and taking ownership of the code. Reach out to Henry at [henry@babeljs.io](mailto:henry@babeljs.io) if you\'d like to talk more!\\n\\n## Top-level `await` parsing ([#10449](https://github.com/babel/babel/pull/10449))\\n\\nThe top-level `await` [proposal](https://github.com/tc39/proposal-top-level-await) allows you to `await` promises in modules as if they were wrapped in a big async function. This is useful, for example, to conditionally load a dependency or to perform app initialization:\\n\\n```js title=\\"JavaScript\\"\\n// Dynamic dependency path\\nconst strings = await import(`./i18n/${navigator.language}.mjs`);\\n\\n// Resource initialization\\nconst connection = await dbConnector();\\n```\\n\\n`@babel/parser` has supported using `await` outside of async functions via the `allowAwaitOutsideFunction` option since version 7.0.0.\\n\\nVersion 7.7.0 introduces a new `topLevelAwait` parser plugin, which has a few key differences:\\n\\n- It only allows top-level `await` inside modules and not inside scripts, as the proposal mandates. This is needed because synchronous script-based module systems (like CommonJS) cannot support an async dependency.\\n- It allows to detect the correct `sourceType` when `sourceType: \\"unambiguous\\"` is used. Note that, since `await` is a valid identifier in scripts, many constructs which may seem unambiguously modules are actually ambiguous and Babel will parse them as scripts.\\n For example, `await -1` could either be an await expression which waits for `-1`, or a difference between `await` and `1`.\\n\\nIf you are using `@babel/parser` directly, you can enable the `topLevelAwait` plugin:\\n```js title=\\"JavaScript\\"\\nparser.parse(inputCode, {\\n  plugins: [\\"topLevelAwait\\"]\\n});\\n```\\n\\nWe also created the `@babel/plugin-syntax-top-level-await` package, which you can add to your Babel configuration:\\n```javascript babel.config.js\\n\\nmodule.exports = {\\n  plugins: [\\n    \\"@babel/plugin-syntax-top-level-await\\"\\n  ]\\n}\\n```\\n\\nPlease note that usage of top-level `await` assumes support within your module bundler. Babel itself isn\'t doing transformations: if you are using Rollup you can enable the [`experimentalTopLevelAwait`](https://rollupjs.org/guide/en/#experimentaltoplevelawait) option, and webpack 5 supports the [`experiments.topLevelAwait`](https://github.com/webpack/webpack/releases/tag/v5.0.0-alpha.15) option.\\n\\nStarting from this release, `@babel/preset-env` will automatically enable `@babel/plugin-syntax-top-level-await` if the `caller` supports it. *Note*: `babel-loader` and `rollup-plugin-babel` don\'t yet tell Babel that they support this syntax, but we are working on it with the respective maintainers.\\n\\n## Parser error recovery ([#10363](https://github.com/babel/babel/pull/10363))\\n\\nLike many other JavaScript parsers, `@babel/parser` throws an error whenever some invalid syntax is encountered. This behavior works well for Babel, since in order to transform a JavaScript program to another program we must first be sure that the input is valid.\\n\\nGiven Babel\'s popularity, there are many other tools relying on `@babel/parser`: above all `babel-eslint` and Prettier. For both these tools, a parser which bails out on the first error is suboptimal.\\n\\nConsider this code, which is invalid because of the duplicated `__proto__` property:\\n\\n```js title=\\"JavaScript\\"\\nlet a = {\\n  __proto__: x,\\n  __proto__: y\\n}\\n\\nlet a = 2;\\n```\\n\\nThe current workflow with ESLint and Prettier is the following:\\n1. Prettier can\'t format the file\\n1. ESLint reports an `Redefinition of __proto__ property` parser error\\n1. You remove the second `__proto__` property\\n1. Prettier can\'t format the file\\n1. ESLint reports an `Identifier \'a\' has already been declared` error\\n1. You remove the second `let` keyword\\n1. Prettier formats the file\\n\\nWouldn\'t it better if it was more like this?\\n1. Prettier formats the file\\n1. ESLint reports two errors: `Redefinition of __proto__ property` and `Identifier \'a\' has already been declared`\\n1. You remove the second `__proto__` property and the second `let` keyword\\n\\nIn this release, we are adding a new option to `@babel/parser`: `errorRecovery`. When it is set to true, the resulting AST will have an `errors` property containing all the errors which `@babel/parser` was able to recover from:\\n\\n```js title=\\"JavaScript\\"\\nconst input = `\\nlet a = {\\n  __proto__: x,\\n  __proto__: y\\n}\\n\\nlet a = 2;\\n`;\\n\\nparser.parse(input); // Throws \\"Redefinition of __proto__ property\\"\\n\\nconst ast = parser.parse(input, { errorRecovery: true });\\nast.errors == [\\n  SyntaxError: \\"Redefinition of __proto__ property\\",\\n  SyntaxError: \\"Identifier \'a\' has already been declared\\",\\n];\\n```\\n\\n`@babel/parser` can still throw as not every error is currently recoverable. We\'ll continue to improve these cases!\\n\\n## New configuration file extensions ([#10501](https://github.com/babel/babel/pull/10501), [#10599](https://github.com/babel/babel/pull/10599))\\n\\nBabel 6 only supported a single configuration file: `.babelrc`, whose contents must be specified using JSON.\\n\\nBabel 7 changed the meaning of `.babelrc`s and introduced two new configuration files: `babel.config.js` and `.babelrc.js` (you can read about the difference between them in the [docs](https://babeljs.io/docs/en/config-files)). We added configuration files with JavaScript to allow defining your own logic when enabling/disabling plugins/options.\\n\\nHowever a big benefit of JSON files is easier _cacheability_. The same JavaScript file can produce different values when called two times, while a JSON file is guaranteed to always evaluate to the same object. Also, JSON configurations are easily serializable, while it\'s not possible to serialize JavaScript values like functions or JavaScript objects with implicit data or relationships.\\n\\nNote that Babel also caches transforms when using JavaScript-based configurations, but the config file must be evaluated (in order to know if the cache is still valid) and the cache [manually configured](https://babeljs.io/docs/en/config-files#apicache).\\n\\nFor these reasons, Babel 7.7.0 introduces support for a new configuration file: `babel.config.json`, whose behavior is the same as `babel.config.js`.\\n\\nWe also added support for two different configuration files: `babel.config.cjs` and `.babelrc.cjs`, which must be used when using node\'s [`\\"type\\": \\"module\\"`](https://nodejs.org/api/esm.html#esm_code_package_json_code_code_type_code_field) option in `package.json` (because Babel doesn\'t support ECMAScript modules in config files). Apart from this `\\"type\\": \\"module\\"` difference, they behave exactly like `babel.config.js` and `.babelrc.js`.\\n\\n## TypeScript 3.7 ([#10543](https://github.com/babel/babel/pull/10543), [#10545](https://github.com/babel/babel/pull/10545))\\n\\n[TypeScript 3.7 RC](https://devblogs.microsoft.com/typescript/announcing-typescript-3-7-rc) includes support for optional chaining, nullish coalescing operator, assertion functions, type-only field declarations and many more type-related features.\\n\\nOptional chaining (`a?.b`) and nullish coalescing (`a ?? b`) have been supported in Babel since 7.0.0 via `@babel/plugin-proposal-optional-chaining` and `@babel/plugin-proposal-nullish-coalescing-operator`.\\n\\nIn Babel 7.7.0, you can now use assertion functions and `declare` in class fields:\\n\\n```typescript\\nfunction assertString(x): assert x is string {\\n  if (typeof x !== \\"string\\") throw new Error(\\"It must be a string!\\");\\n}\\n\\nclass Developer extends Person {\\n  declare usingBabel: boolean;\\n}\\n```\\n\\nTo avoid breaking changes, we introduced support for `declare` in class fields behind a flag: `\\"allowDeclareFields\\"`, supported by both `@babel/plugin-transform-typescript` and `@babel/preset-typescript`. This will likely become default behavior, so it is recommended that you migrate your config to use it:\\n\\n```jsonld\\n{\\n  \\"presets\\": [\\n    [\\"@babel/preset-typescript\\", {\\n      \\"allowDeclareFields\\": true\\n    }]\\n  ]\\n}\\n```\\n\\n## Use object spread in compiled JSX ([#10572](https://github.com/babel/babel/pull/10572))\\n\\nWhen using spread properties in JSX elements, Babel injects a runtime helper by default:\\n\\n```jsx title=\\"JSX\\"\\n<a x {...y} />\\n\\n// \ud83e\udc47 \ud83e\udc47 \ud83e\udc47\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nReact.createElement(\\"a\\", _extends({\\n  x: true\\n}, y));\\n```\\n\\nIn 2016, as support for native ES6 improved, we added the `useBuiltIns` option to `@babel/plugin-transform-react-jsx` which allowed the compiled output to directly use `Object.assign` and removed excess code:\\n\\n```jsx title=\\"JSX\\"\\n<a x {...y} />\\n\\n// \ud83e\udc47 \ud83e\udc47 \ud83e\udc47\\n\\nReact.createElement(\\"a\\", Object.assign({\\n  x: true\\n}, y));\\n```\\n\\nHowever given the native support for object spread, it allows us to produce even more optimized code:\\n\\n```jsx title=\\"JSX\\"\\n<a x {...y} />\\n\\n// \ud83e\udc47 \ud83e\udc47 \ud83e\udc47\\n\\nReact.createElement(\\"a\\", { x: true, ...y });\\n```\\n\\nYou can enable it using the `useSpread` option with either `@babel/preset-react` or `@babel/plugin-transform-react-jsx`:\\n\\n```jsonld\\n{\\n  presets: [\\n    [\\"@babel/react\\", { useSpread: true }]\\n  ]\\n}\\n```\\n\\n## Memory usage improvements ([#10480](https://github.com/babel/babel/pull/10480))\\n\\nSince the beginning, we have been making efforts ([#433](https://github.com/babel/babel/pull/433), [#3475](https://github.com/babel/babel/pull/3475), [#7028](https://github.com/babel/babel/pull/7028), etc.) to improve performance. Babel 7.7.0 now uses 20% less memory, and transforms large files 8% faster when compared to 7.6.0.\\n\\nIn order to achieve these results, we optimized different operations done during the lifetime `NodePath` objects (used to wrap every AST node):\\n\\n1. We now avoid initializing some rarely used object properties until they are needed, allowing us to avoid an `Object.create(null)` allocation for almost every AST node.\\n\\n1. We reduced bookkeeping workload for every single node visit, by replacing a few uncommon properties with getters so that `@babel/traverse` can skip updating them.\\n\\n1. We optimized memory usage by compressing several boolean properties used to represent the status of a node traversal (i.e. skipped, stopped or removed) into a [bit array](https://en.wikipedia.org/wiki/Bit_array).\\n\\nAll these improvements add up to the following difference in transform performance and memory usage:\\n\\n| Performance | Memory usage |\\n|:-----------:|:------------:|\\n| ![](https://i.imgur.com/bs3DoOX.png) | ![](https://i.imgur.com/n1bQSj1.png) |\\n\\nYou can also checkout the [raw data](https://docs.google.com/spreadsheets/d/1lFUKviJwJP83SulEG7tHoaHO4bvxPt1u2UrEySrPAXc/edit?usp=sharing) of the charts above. If you want to read more about this topic, you can read [J\xf9nli\xe0ng\'s detailed write-up](https://hackmd.io/@VQ5Lhi9URomRC0KamZdyvw/ryuUaFGwS) about the changes he made to get those improvements!"},{"id":"/2019/09/05/7.6.0","metadata":{"permalink":"/babel-website/blog/2019/09/05/7.6.0","source":"@site/blog/2019-09-05-7.6.0.md","title":"7.6.0 Released: Private static accessors and V8 intrinsic syntax","description":"We just released a new minor Babel version!","date":"2019-09-06T00:00:00.000Z","formattedDate":"September 6, 2019","tags":[],"readingTime":3.65,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.6.0 Released: Private static accessors and V8 intrinsic syntax","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2019-09-06T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.6.0 Released"},"prevItem":{"title":"7.7.0 Released: Error recovery and TypeScript 3.7","permalink":"/babel-website/blog/2019/11/05/7.7.0"},"nextItem":{"title":"7.5.0 Released: dynamic import and F# pipelines","permalink":"/babel-website/blog/2019/07/03/7.5.0"}},"content":"We just released a new minor Babel version!\\n\\nIt includes support for static private accessors in classes, and parser support for the V8 intrinsics syntax. We also fixed a bunch of long-standing issues related to TDZ handling, and improved support for do-expressions. You can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.6.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nThanks to [Serhii Muryhin](https://github.com/skyiea), [Ashwin Ramaswami](https://github.com/epicfaace), [Sungmin Lee](https://github.com/ifsnow), [Serge Havas](https://github.com/Sinewyk), [Ziad El Khoury Hanna](https://github.com/zaygraveyard), [Even Alander](https://github.com/deificx), [Shrey Banga](https://github.com/banga), [Dylan Kirkby](https://github.com/dsgkirkby), [Ajay Sagar](https://github.com/ajaysagar), [Adam Ramberg](https://github.com/AdamRamberg), and [Bin Xin](https://github.com/rhyzx) for their first PRs! (And also thanks to [Codetriage README Bot](https://github.com/codetriage-readme-bot) and [dependabot](https://help.github.com/en/articles/configuring-automated-security-fixes) \ud83e\udd16)\\n\\n[**Bloomberg**](https://github.com/bloomberg) is continuing to sponsor the implementation of new class features in Babel: after giving us a lot of new class features ([static private fields](https://babeljs.io/blog/2018/09/17/7.1.0#private-static-fields-stage-3), [private instance methods](https://babeljs.io/blog/2018/12/03/7.2.0#private-instance-methods-8654-https-githubcom-babel-babel-pull-8654), [private instance accessors](https://babeljs.io/blog/2019/01/21/7.3.0#private-instance-accessors-getters-and-setters-9101-https-githubcom-babel-babel-pull-9101), and [static private methods](https://babeljs.io/blog/2019/03/19/7.4.0#static-private-methods-9446-https-githubcom-babel-babel-pull-9446)), they\'ve just implemented static private getters and setters.\\n\\nAnother big shout out goes to [**Frontend Masters**](https://frontendmasters.com/) for making two big donations this past month, as well as all [our other sponsors](https://opencollective.com/babel#contributors) who allow the Babel team to spend more time on the project!\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on [OpenCollective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to both fund our efforts in supporting the wide range of JavaScript users and taking ownership of the code. Reach out to Henry at [henry@babeljs.io](mailto:henry@babeljs.io) if you\'d like to talk more!\\n\\n## Private static accessors (getters and setters) ([#10217](https://github.com/babel/babel/pull/10217))\\n\\n```js title=\\"JavaScript\\"\\nclass Resource {\\n  static #loaderInstance = null;\\n\\n  static get #loader() {\\n    if (!this.#loaderInstance) this.#loaderInstance = new Loader();\\n    return this.#loaderInstance;\\n  }\\n\\n  status = null;\\n\\n  constructor(url) {\\n    this.status = Resource.#loader.load(url);\\n  }\\n}\\n```\\n\\nThanks to [Tim](https://github.com/tim-mc) (Bloomberg) for implementing this proposal!\\n\\nYou can test this new feature by adding `@babel/plugin-proposal-private-methods` to your config, if you haven\'t already added it, or by enabling the `stage-3` preset in the online [repl](https://babeljs.io/repl/build/main#?presets=stage-3).\\n\\nClass private features support is finally complete \ud83c\udf89\\n\\n<div style={{margin: \\"auto\\",width: \\"fit-content\\"}}>\\n\\n| Class Private  | **Instance** | **Static** |\\n|----------------|--------------|------------|\\n| **Fields** <br/> `class A { #a = 1 }`    | [7.0.0](https://babeljs.io/blog/2018/08/27/7.0.0#tc39-proposals-https-githubcom-tc39-proposals-support) | [7.1.0](https://babeljs.io/blog/2018/09/17/7.1.0#private-static-fields-stage-3) |\\n| **Methods** <br/> `class A { #a() {} }`   | [7.2.0](https://babeljs.io/blog/2018/12/03/7.2.0#private-instance-methods-8654-https-githubcom-babel-babel-pull-8654) | [7.4.0](https://babeljs.io/blog/2019/03/19/7.4.0#static-private-methods-9446-https-githubcom-babel-babel-pull-9446) |\\n| **Accessors** <br/> `class A { get #a() {} }` | [7.3.0](https://babeljs.io/blog/2019/01/21/7.3.0#private-instance-accessors-getters-and-setters-9101-https-githubcom-babel-babel-pull-9101) | 7.6.0 |\\n\\n</div>\\n\\n<div style={{margin: \\"auto\\",width: \\"fit-content\\"}}>\\n\\n![It\'s time to party!](https://media.giphy.com/media/3KC2jD2QcBOSc/source.gif)\\n\\n</div>\\n\\n## V8 intrinsic runtime functions parsing ([#10148](https://github.com/babel/babel/pull/10148))\\n\\n> \u26a0\ufe0f This is a non-standard extension to the language, which can only be used in V8 when enabling the `--allow-natives-syntax` command-line flag.\\n\\nV8, the JavaScript engine used by Node.js and Chromium-based browsers, can expose various pieces of internal functionality as JavaScript functions. Although these APIs must not be used in production JavaScript code, these special functions _can_ be useful in testing and debugging scenarios \u2014 for example, to understand how your JavaScript values are represented in memory, or to call some ECMAScript specification routines directly.\\n\\nThese so-called \u201cV8 intrinsics\u201d have a different syntax than normal functions: their name always starts with `%`. Also, they can only be directly called and never used as normal values (you can\'t, for example, assign them to another variable).\\n\\n```js title=\\"JavaScript\\"\\nfunction fn() { /* ... */ }\\n\\nconst status = %GetOptimizationStatus(fn);\\n\\nif (status === 2) {\\n  console.log(\\"The function is not optimized!\\");\\n}\\n```\\n\\nYou can find the whole list of existing V8 intrinsics in [V8\'s source code](https://github.com/v8/v8/blob/master/src/runtime/runtime.h).\\n\\nYou can enable this syntax in `@babel/parser` by using the `v8intrinsic` plugin:\\n\\n```js title=\\"JavaScript\\"\\nconst { parse } = require(\\"@babel/parser\\");\\n\\nparse(code, {\\n  plugins: [\\"v8intrinsic\\"]\\n})\\n```\\n\\n## Nullish coalescing operator (`??`) updates ([#10269](https://github.com/babel/babel/pull/10269))\\n\\nThe nullish coalescing stage 3 proposal recently got some updates: to avoid confusion over precedence with other logical operators (`&&` and `||`), the spec has been changed to disallow mixing them.\\n\\nThis means that the following expressions are now invalid:\\n\\n```js title=\\"JavaScript\\"\\na ?? b || c;\\na && b ?? c;\\n```\\n\\nInstead, you should add parentheses where appropriate:\\n\\n```js title=\\"JavaScript\\"\\n(a ?? b) || c; /* or */ a ?? (b || c);\\n(a && b) ?? c; /* or */ a && (b ?? c);\\n```\\n\\nThis is similar to how unary minus (`-`) and the exponentiation operator (`**`) interact: you can\'t write `-1 ** 2`, but you have to choose between `(-1) ** 2` and `-(1 ** 2)`."},{"id":"/2019/07/03/7.5.0","metadata":{"permalink":"/babel-website/blog/2019/07/03/7.5.0","source":"@site/blog/2019-07-03-7.5.0.md","title":"7.5.0 Released: dynamic import and F# pipelines","description":"Today we are releasing Babel 7.5.0!","date":"2019-07-03T00:00:00.000Z","formattedDate":"July 3, 2019","tags":[],"readingTime":6.97,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.5.0 Released: dynamic import and F# pipelines","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2019-07-03T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.5.0 Released"},"prevItem":{"title":"7.6.0 Released: Private static accessors and V8 intrinsic syntax","permalink":"/babel-website/blog/2019/09/05/7.6.0"},"nextItem":{"title":"The Babel Podcast","permalink":"/babel-website/blog/2019/07/02/the-babel-podcast"}},"content":"Today we are releasing Babel 7.5.0!\\n\\nThis release includes improved support for a few ECMAScript proposals: the F# variant of the Stage 1 pipeline operator and an official plugin for the Stage 4 dynamic `import()` proposal (along with `preset-env` support).\\nIt also has support for TypeScript `namespace`s (experimental) and for Browserslist\'s `default` query in `preset-env`.\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.5.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nThanks to [Wesley Wolfe](https://github.com/Wolvereness), [Martin Zl\xe1mal](https://github.com/mrtnzlml), [Blaine Bublitz](https://github.com/phated), [Letladi Sebesho](https://github.com/Letladi), [Paul Comanici](https://github.com/darkyndy), [Lidor Avitan](https://github.com/lidoravitan), [Artem Butusov](https://github.com/sormy), [Sebastian Johansson](https://github.com/ChlorideCull), and [Min ho Kim](https://github.com/minho42) for their first PRs!\\n\\nWe are always looking for help, especially with triaging issues, reviewing pull requests and helping people on Slack. We are experimenting with the new [triage](https://github.blog/changelog/2019-05-23-triage-and-maintain-roles-beta/) role implemented by GitHub, and we want to recognize people from the community who will stand up and help us! \ud83d\ude09\\n\\nA fantastic example of this are the newest additions to the Babel organization: [Tan Li Hau](https://github.com/tanhauhau), who has been a great help in triaging issues and fixing bugs, and [Thiago Arrais](https://twitter.com/thiagoarrais), who helped in implementing the pipeline operator!\\n\\nIn other news, we just [announced](https://twitter.com/left_pad/status/1146069623940558849) the start of our own podcast! If you missed it, please check out our [post](https://babeljs.io/blog/2019/07/02/the-babel-podcast) from yesterday!\\n\\nOur work has made been possible also by our sponsors. We want to thank both [Discord](https://discordapp.com/) and [clay](https://clay.global) for becoming Silver Sponsors on [OpenCollective](https://opencollective.com/babel), as well as [Linkedin](https://linkedin.com) for becoming a Silver Sponsor of Henry on GitHub!\\n\\n![](https://handshake.org/images/landing/logo-dark.svg)\\n\\nSpecial thanks go to [Handshake](https://handshake.org), a decentralized, permissionless naming protocol compatible with DNS, for donating $100,000 last year! As a part of their FOSS Community Grant, they pledged $10.2M to various open source communities like Apache, Debian, EFF, and Babel.\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can sponsor us on [Open Collective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to both fund our efforts in supporting the wide range of JavaScript users and taking ownership of the code. Reach out to Henry at henry@babeljs.io if you\'d like to talk more!\\n\\n## F# pipeline operator ([#9450](https://github.com/babel/babel/pull/9450) and [#9984](https://github.com/babel/babel/pull/9984))\\n\\n> \u26a0\ufe0f The pipeline operator proposal is still at Stage 1, and thus its specification is still being defined.\\n\\nThis [proposal](https://github.com/tc39/proposal-pipeline-operator) has a few variants that are being thought out. By testing this plugin, you can help the proposal authors gather feedback about how pipelines could work. But also note that refactoring will be required if the semantics change throughout the proposal process (and they will).\\n\\nSince version 7.3.0, Babel has supported the [Smart variant](https://github.com/tc39/proposal-pipeline-operator/wiki#proposal-4-smart-mix) of the pipeline operator proposal, and the [\\"minimal\\" variant](https://github.com/tc39/proposal-pipeline-operator/wiki#proposal0-original-minimal-proposal) since 7.0.0-beta.\\n\\nThanks to the joint efforts of [Thiago Arrais](https://twitter.com/thiagoarrais) and [James DiGioia](https://twitter.com/JamesDiGioia), you can now also test the [\\"# variant](https://github.com/tc39/proposal-pipeline-operator/wiki#proposal-1-f-sharp-style-only-with-await)! If you have thoughts or comments about this specific proposal variant, you can reach out to [James](https://twitter.com/JamesDiGioia).\\n\\nHow is the F# variant different from the Smart one? Instead of having the concept of \\"topic references\\" (`#`), arrow functions are used instead. This has the advantage of being more similar to current JavaScript, at the cost of a slightly less concise syntax.\\n\\n<table class=\\"danger-force-code-no-wrap\\">\\n  <thead>\\n    <tr>\\n      <th>Current JavaScript</th>\\n      <th>F# pipeline</th>\\n      <th>Smart pipeline</th>\\n    </tr>\\n  </thead>\\n  <tr>\\n\\n\x3c!-- DO NOT indent this table, or the code won\'t be highlighted --\x3e\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nlet newScore = boundScore(\\n  0,\\n  100,\\n  add(7, double(person.score))\\n);\\n```\\n</td>\\n\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nlet newScore = person.score\\n  |> double\\n  |> n => add(7, n)\\n  |> n => boundScore(0, 100, n);\\n\\n```\\n</td>\\n\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nlet newScore = person.score\\n  |> double\\n  |> add(7, #)\\n  |> boundScore(0, 100, #);\\n\\n```\\n</td>\\n\\n</tr>\\n</table>\\n\\nAlthough the two proposals aren\'t dependent on one another or being developed as a single proposal, you can use F# pipelines alongside with partial application (supported since Babel 7.4.0):\\n\\n```js title=\\"JavaScript\\"\\nlet newScore = person.score\\n  |> double\\n  |> add(7, ?)\\n  |> boundScore(0, 100, ?);\\n```\\n\\nNote that, while it may look the same as the \\"Smart\\" pipeline variant, the partial application proposal only supports `?` in function call parameters. This means that, for example, `person |> #.score` is a valid \\"Smart\\" pipeline whose F# equivalent must use an arrow function: `person |> p => p.score`.\\n\\nThe F# pipeline operator is also different regarding how `await` is handled:\\n\\n<table class=\\"danger-force-code-no-wrap\\">\\n  <thead>\\n    <tr>\\n      <th>Current JavaScript</th>\\n      <th>F# pipeline</th>\\n      <th>Smart pipeline</th>\\n    </tr>\\n  </thead>\\n  <tr>\\n\\n\x3c!-- DO NOT indent this table, or the code won\'t be highlighted --\x3e\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nlet id = (\\n  await (\\n    await fetch(url)\\n  ).json()\\n).ID;\\n```\\n</td>\\n\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nlet newScore = fetch(url)\\n  |> await\\n  |> r => r.json()\\n  |> await\\n  |> obj => obj.ID;\\n```\\n</td>\\n\\n<td>\\n\\n```js title=\\"JavaScript\\"\\nlet newScore = fetch(url)\\n  |> await #\\n  |> #.json()\\n  |> await #\\n  |> #.ID;\\n```\\n</td>\\n\\n</tr>\\n</table>\\n\\nIf you want to test this new proposal variant, you can add `@babel/plugin-proposal-pipeline-operator` to your Babel configuration:\\n\\n```js title=\\"JavaScript\\"\\nmodule.exports = {\\n  plugins: [\\n    [\\"@babel/proposal-pipeline-operator\\", { proposal: \\"fsharp\\" }]\\n  ]\\n};\\n```\\n\\nYou can also try it out in the [repl](https://babeljs.io/repl/version/%5E7.5.0#?presets=stage-1), by enabling the \\"Stage 1\\" preset.\\n\\n## Dynamic import ([#9552](https://github.com/babel/babel/pull/9552) and [#10109](https://github.com/babel/babel/pull/10109))\\n\\nAlthough Babel has had support for parsing dynamic imports `import(source)` for a long time, there hasn\'t been a consistent way of transforming it.\\n- If you used `webpack` or `rollup`, you would only include `@babel/plugin-syntax-dynamic-import` and not transform it with Babel\\n- If you used Node, you could use the [`babel-plugin-dynamic-import-node`](https://github.com/airbnb/babel-plugin-dynamic-import-node/) plugin to transform it\\n- If you used SystemJS, `@babel/plugin-transform-modules-systemjs` in conjunction with `@babel/plugin-syntax-dynamic-import` transformed it without explicitly enabling a transform plugin for `import()`\\n\\nSince the dynamic import proposal has been recently merged into the main specification, we have decided to unify these use-cases under a single entry point: `@babel/plugin-proposal-dynamic-import`. This plugin must be used alongside one of the module transform plugins because Babel needs to know which module loading system you are targeting. When targeting CommonJS, it internally delegates to [`babel-plugin-dynamic-import-node`](https://github.com/airbnb/babel-plugin-dynamic-import-node/).\\n\\nFor example, this is a valid configuration:\\n\\n```js title=\\"JavaScript\\"\\nmodule.exports = {\\n  plugins: [\\n    \\"@babel/plugin-proposal-dynamic-import\\",\\n    \\"@babel/plugin-transform-modules-amd\\"\\n  ]\\n};\\n```\\n\\nWhile this isn\'t:\\n\\n```js title=\\"JavaScript\\"\\nmodule.exports = {\\n  plugins: [\\n    \\"@babel/plugin-proposal-dynamic-import\\"\\n  ]\\n};\\n```\\n\\nIf you want to only allow parsing of `import()` expressions without transforming them, you can just include the `@babel/plugin-syntax-dynamic-import` package.\\n\\nIf you are using `@babel/preset-env`, dynamic import support will be enabled by default. You don\'t need to worry about `webpack` or `rollup` support, since both `babel-loader` and `rollup-plugin-babel` automatically disable the Babel transform to allow the bundler to handle it correctly.\\n\\n## `defaults` browserslist query in `@babel/preset-env` ([#8897](https://github.com/babel/babel/pull/8897))\\n\\nWhen `@babel/preset-env` is not passed any targets, it runs every syntax transform on your code (emulating the now deprecated `babel-preset-latest`).\\n\\nTo support this behavior, we had to work around the fact that Browserslist itself has [default choices](https://browserl.ist/?q=defaults). This caused `@babel/preset-env` to not allow usage of the `default` query.\\n\\n`@babel/preset-env` now supports the `defaults` query when passing targets directly to the preset:\\n\\n```js title=\\"JavaScript\\"\\nmodule.exports = {\\n  presets: [\\n    [\\"@babel/preset-env\\", {\\n      targets: { browsers: \\"defaults\\" }\\n    }]\\n  ]\\n};\\n```\\n\\nYou can also set it using a `.browserslistrc` file, which is also used by other tools like [Autoprefixer](https://github.com/postcss/autoprefixer) or [Stylelint](https://stylelint.io/).\\n\\nThe default behavior of `@babel/preset-env` is still to compile everything, but we might switch it in Babel 8 to use this `defaults` query.\\n\\n## Experimental TypeScript `namespaces` support ([#9785](https://github.com/babel/babel/pull/9785))\\n\\nUntil now, [namespaces](https://www.typescriptlang.org/docs/handbook/namespaces.html) were the second biggest TypeScript feature not supported by Babel (the first one is type-checking! \ud83d\ude1b). Thanks to the work done by community member [Wesley Wolfe](https://twitter.com/wolvereness), you can now enable _experimental_ support for them in the TypeScript plugin, using the `allowNamespaces` option of `@babel/plugin-transform-typescript`:\\n\\n```js title=\\"JavaScript\\"\\nmodule.exports = {\\n  plugins: [\\n    [\\"@babel/plugin-transform-typescript\\", {\\n      allowNamespaces: true\\n    }]\\n  ]\\n}\\n```\\n\\nThen, you can use namespaces in your code:\\n\\n```js title=\\"JavaScript\\"\\nnamespace Validation {\\n  const lettersRegexp = /^[A-Za-z]+$/;\\n  const numberRegexp = /^[0-9]+$/;\\n\\n  export class LettersOnlyValidator {\\n    isAcceptable(s: string) {\\n      return lettersRegexp.test(s);\\n    }\\n  }\\n}\\n```\\n\\n> ### \u26a0\ufe0f Warning \u26a0\ufe0f\\n>\\n> When TypeScript support was initially added to Babel, `namespaces` were not included since they require type information that only a full TypeScript compiler and type-checker can provide. For this reason, this current (experimental) support has some limitations:\\n>\\n> - Namespaces can only export immutable bindings\\n> - When merging multiple namespaces with the same name, their scope isn\'t shared\\n>\\n> You can find the full list of caveats in the `@babel/plugin-transform-typescript` [documentation](https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats)."},{"id":"/2019/07/02/the-babel-podcast","metadata":{"permalink":"/babel-website/blog/2019/07/02/the-babel-podcast","source":"@site/blog/2019-07-02-the-babel-podcast.md","title":"The Babel Podcast","description":"Today we\'re announcing the The Babel Podcast!","date":"2019-07-02T00:00:00.000Z","formattedDate":"July 2, 2019","tags":[],"readingTime":4.91,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"The Babel Podcast","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2019-07-02T00:00:00.000Z","categories":"announcements","share_text":"The Babel Podcast"},"prevItem":{"title":"7.5.0 Released: dynamic import and F# pipelines","permalink":"/babel-website/blog/2019/07/03/7.5.0"},"nextItem":{"title":"7.4.0 Released: core-js 3, static private methods and partial application","permalink":"/babel-website/blog/2019/03/19/7.4.0"}},"content":"Today we\'re announcing the [The Babel Podcast](https://podcast.babeljs.io)!\\n\\n> You probably use Babel, directly or as a dependency. But do you ever wonder who works on it? Henry Zhu chats with other members of the team, TC39, and the JS community about the future of JavaScript and how it\'s all maintained. Please join us in babbling about Babel (and everything else)!\\n\\n### Subscribe with: [Apple]( https://podcasts.apple.com/us/podcast/the-babel-podcast/id1470143101) | [Google](https://www.google.com/podcasts?feed=aHR0cHM6Ly9mZWVkcy50cmFuc2lzdG9yLmZtL3RoZS1iYWJlbC1wb2RjYXN0) | [Spotify](https://open.spotify.com/show/3TK8x8AGckeEQEtnJVZYAz) | [RSS](https://feeds.transistor.fm/the-babel-podcast)\\n\\n\x3c!-- truncate --\x3e\\n\\nTo start out, our first [episode](https://podcast.babeljs.io/rome) is with our good friend [Sebastian McKenzie](https://twitter.com/sebmck), the creator of Babel ([transcript](https://podcast.babeljs.io/rome/#transcript))!\\n \\n<iframe src=\'https://share.transistor.fm/e/b65dd0f9\' width=\'100%\' height=\'180\' frameborder=\'0\' scrolling=\'no\' seamless=\'true\' style={{width:\\"100%\\", height:\\"180px\\"}}></iframe>\\n\\n> It does take time to create and maintain these podcasts (equipment, research, editing, transcription), so consider [supporting](https://github.com/babel/babel?sponsor=1) us! We could also add specific podcast sponsors, so let [me](https://twitter.com/left_pad) know if you\'d be interested in doing so.\\n\\n## Why?\\n\\nPersonally, I\'ve been getting into podcasts a lot lately: first with [Hope in Source](https://hopeinsource.com) ([blog](https://www.henryzoo.com/living-out-in-faith)) and recently [Maintainers Anonymous](https://www.maintainersanonymous.com) ([blog](https://www.henryzoo.com/maintainers-podcast)). After years of just listening to them, I finally felt the urge to start some, and now we\'re here.\\n\\nI understand there are plenty of JavaScript podcasts, podcasts about open source, and maybe way too many podcasts in general; but I think there\'s room for a podcast about specific open source projects. We are in the interesting position to be able to talk about topics that level up the community as stewards of this infrastructure project.\\n\\nInstead of being interviewed to talk about our own project, why not do it ourselves and have a space to go deeper? Many times the questions and responses are high level because the audience is not specific to the tool being mentioned, not interested, or just doesn\'t have enough context to understand. It can be more comfortable to just be yourself and not need to craft a specific response online. Why wait to speak on another platform when we have the chance to do it on our own time? Having our own \\"official\\" content as well (whether it\'s documentation, videos, workshops, etc) makes it easier for everyone (searching, newcomers, ourselves, etc).\\n\\nIf anything, this could help our team to better communicate to our users and the greater JavaScript community about how things work and an opportunity for us all to level up in understanding so more people can get involved and help out.\\n\\nSo what does it all mean? What could be interesting about a podcast specifically about Babel? Is talking about random bugs or issues of the day relevant or worth listening to? Let\'s talk about purpose.\\n\\n## Goals\\n\\nPodcasting doesn\'t have a lot of rules and we can do whatever seems fun: it also gives the capacity to explain things in detail and give a more personal, intimate touch, unlike social media (including GitHub).\\n\\n- Inspire and inform would-be contributors to get involved (for more detailed topics I think I\'d continue to try livestreams/videos)\\n- Helping people understand the ecosystem JavaScript better (the language/specification itself, TC39, culture).\\n- Learning about the people and context behind the tools we use: Babel maintainers/contributors, related projects like webpack/ESLint, TC39 committee.\\n\\nCurrent non-goals: talk about news or a \\"this week in Babel\\", have a set weekly schedule, have a certain type of format (guests, 30 minutes, etc).\\n\\n## Help Us Brainstorm Ideas!\\n\\n> Please reach out to us at [@babeljs](https://twitter.com/babeljs) on Twitter or on the [repo](https://github.com/hzoo/podcast.babeljs.io) if you have guest suggestions, topic ideas, or feedback!\\n\\n### Some Guest/Topics Ideas\\n\\nWhat else do you want to hear about? Who do you want to hear from?\\n\\n- Interviewing the core team/contributors: how did you get involved, what is exciting about the project, your role, the future?\\n- High level concepts in Babel (ASTs, visitor pattern, compilers, testing, JS specification)\\n- Background/struggles in key decisions we\'ve made:\\n    - Removing stage presets\\n    - On private fields syntax (# instead of private)\\n    - Common questions: \\"Won\'t Babel be obsolete soon?\\"\\n    - Why did you do x?\\n- Chatting with various Babel plugin authors? [babel-macros](https://github.com/kentcdodds/babel-plugin-macros), i18n\\n- Babel alternatives: [traceur](https://github.com/google/traceur-compiler), [buble](https://github.com/bublejs/buble), [sucrase](https://github.com/alangpierce/sucrase), [swc](https://github.com/swc-project/swc)\\n    - It would be fun to chat about why the projects were made, what the differences/tradeoffs are, etc!\\n- Compile to JavaScript languages\\n    - Elm/Reason/etc (standalone language)\\n    - Coffeescript/Dart (explicitly recommends Babel for compiling down to ES5)\\n    - Fable (F#) (uses Babel itself)\\n    - TypeScript (we have an integration)\\n- Related tooling: CSSX, PostCSS\\n- Babel integrations (things that use Babel as infrastructure): Jest/Next.js/Parcel/CRA\\n\\n### Language Standards/TC39 Topics\\n\\n- Speak with folks on TC39 to explain how things are done, how to get involved, and what can change.\\n    - On Babel as a test bed for new features\\n    - How does it differ from other language standards like C or browser APIs?\\n    - History of a specific feature: how does it get finalized?\\n    - What\u2019s a meeting like: who goes, how it is organized? Is there much arguing or voting?\\n    - How has decision making evolved over time? (the Staging process)\\n    - How is \u201cfeedback\u201d received or taken?\\n    - How important are \u201cedge cases\u201d: why does it matter?\\n    - Perception of the language over time: moving too fast, moving too slow\\n    - Questions about language design: performance, usability, teachability, aesthetics, syntax budget, etc.\\n    - Ecosystem alignment: how is the language shaped by tools, libraries, other use cases other than the web?\\n- History of Committee Itself\\n    - Transitions: using a Word doc to GitHub, using TCQ, the \\"how we work\\" repo\\n    - Growth of committee over the years (language designers, implementers, practitioners, educators, combination)\\n    - Specific proposals: Object.observe, etc?\\n- Presenting a Proposal\\n    - Explaining the problem space\\n    - Scope: complexity of change, interactions with other features\\n    - Precedence: existing userland implementation, previous discussions, other languages, similar features\\n\\n> We asked on [Twitter](https://twitter.com/left_pad/status/1093529997162237952) about the name and got some fun suggestions including Lost in Transpilation, Babbling On, Babel Babble, etc. But in the end, \\"The Babel Podcast\\" is the most clear!"},{"id":"/2019/03/19/7.4.0","metadata":{"permalink":"/babel-website/blog/2019/03/19/7.4.0","source":"@site/blog/2019-03-19-7.4.0.md","title":"7.4.0 Released: core-js 3, static private methods and partial application","description":"Today we are releasing Babel 7.4.0!","date":"2019-03-19T21:30:00.000Z","formattedDate":"March 19, 2019","tags":[],"readingTime":10.3,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.4.0 Released: core-js 3, static private methods and partial application","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2019-03-19T21:30:00.000Z","categories":"announcements","share_text":"Babel 7.4.0 Released"},"prevItem":{"title":"The Babel Podcast","permalink":"/babel-website/blog/2019/07/02/the-babel-podcast"},"nextItem":{"title":"7.3.0 Released: Named capturing groups, private instance accessors and smart pipelines","permalink":"/babel-website/blog/2019/01/21/7.3.0"}},"content":"Today we are releasing Babel 7.4.0!\\n\\nThis release includes support for [TypeScript 3.4](https://devblogs.microsoft.com/typescript/announcing-typescript-3-4-rc), the proposal for partial application in function calls, and static private methods.\\n\\nWe added support for meaningful parenthesized expressions in `@babel/parser`, and also made it more spec compliant than _ever_!\\n\\nLast but not least, both `@babel/preset-env` and `@babel/transform-runtime` now support `core-js@3`, and `@babel/template` has some sweet new syntax!\\n\\nYou can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.4.0).\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\nSpecial thanks to all the new Babel contributors \ud83d\ude0a. Since we started generating release changelogs using GitHub actions we hadn\'t had the chance to thank them in each release, but since Babel 7.3.3 they have been a lot of people!\\n- Babel 7.3.3: [@Alec321](https://github.com/Alec321), [@mhcgrq](https://github.com/mhcgrq), [@ilyalesik](https://github.com/ilyalesik), [@yifei-fu](https://github.com/yifei-fu)\\n- Babel 7.3.4: [@elevatebart](https://github.com/elevatebart), [@ian](https://github.com/ian-craig), [@imjacobclark](https://github.com/imjacobclark), [@irohitb](https://github.com/irohitb)\\n- Babel 7.4.0: [@AmirS](https://github.com/AmirS), [@agoldis](https://github.com/agoldis), [@byara](https://github.com/byara), [@echenley](https://github.com/echenley), [@tanohzana](https://github.com/tanohzana), [@matt](https://github.com/matt-tingen), [@penielse](https://github.com/penielse), [@pnowak](https://github.com/pnowak)\\n\\nMany features in this release have been developed in collaboration with our sponsors. [**Bloomberg**](https://github.com/bloomberg) has contributed support for a new kind of private element in every release since 7.0 ([7.1](https://babeljs.io/blog/2018/09/17/7.1.0#private-static-fields-stage-3), [7.2](https://babeljs.io/blog/2018/12/03/7.2.0#private-instance-methods-8654-https-githubcom-babel-babel-pull-8654), [7.3](https://babeljs.io/blog/2019/01/21/7.3.0#private-instance-accessors-getters-and-setters-9101-https-githubcom-babel-babel-pull-9101)), and they\'ve now implemented static private methods! This leaves only static private getters and setters remaining.\\n\\nSimilarly, [**Trivago**](https://github.com/trivago) (a Base Support Sponsor on [OpenCollective](https://opencollective.com/babel)) took over the implementation of the partial application plugin.\\n\\nOver the last month, we have been experimenting with working more directly with companies on various features/optimizations that would benefit the community: [**RunKit**](https://github.com/runkitdev) has been sponsoring [Nicol\xf2](https://github.com/nicolo-ribaudo) to implement placeholder support in `@babel/template`.\\n\\nWhen managing a big open source project, not everything is code: we need to manage servers, continuous integration, social media accounts and... a lot of passwords! We really appreciate [**1Password**](https://github.com/1Password/) for accepting us into their [open source support program](https://github.com/1Password/1password-teams-open-source) and providing us a free 1Password Teams account!\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on [OpenCollective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to both fund our efforts in supporting the wide range of JavaScript users and taking ownership of the code. Reach out to Henry at henry@babeljs.io if you\'d like to talk more!\\n\\n## `core-js` 3 ([#7646](https://github.com/babel/babel/pull/7646))\\n\\nWe\'ve received lots of kudos for our work on `@babel/preset-env`, but much of that should really go to the awesome work done by [Denis](https://github.com/zloirock). He maintains `core-js` which provides all the polyfills loaded by `@babel/polyfill`, `@babel/runtime` and `@babel/preset-env`.\\n\\n`core-js@3` was just released, and includes a lot of new features: you can read about them at [\\"core-js@3, babel and a look into the future\\"](https://github.com/zloirock/core-js/blob/master/docs/2019-03-19-core-js-3-babel-and-a-look-into-the-future.md). Other than all the new proposals, it makes it possible to polyfill transform **instance** methods using `@babel/plugin-transform-runtime` so that they can be used in old browsers without polluting the global environment:\\n\\n```js title=\\"JavaScript\\"\\n// \'foo\' could be either a string or an array, or a custom object\\nfoo.includes(\\"a\\");\\n\\n// \u2b95\\n\\nimport _includesInstanceProperty from \\"@babel/runtime-corejs3/core-js-stable/instance/includes\\";\\n\\n_includesInstanceProperty(foo).call(foo, \\"a\\");\\n```\\n\\n`@babel/preset-env` and `@babel/plugin-transform-runtime` now support polyfilling proposals: you just need to use `corejs: { version: 3, proposals: true }` instead of `corejs: 3` in your configuration. Keep in mind that ECMAScript proposals are inherently unstable, and could change in `core-js@4`!\\n\\nPreviously, `@babel/preset-env` relied entirely on `compat-table` data for determining which polyfills needed to be loaded for a particular environment. `core-js@3` introduces its own compatibility data set with an exhaustive test suite that should result in much more accurate polyfilling!\\n\\n### Migration from `core-js@2`\\n\\nSince versions `2` and `3` of `core-js` are incompatible with each other (we don\'t want to break your code!), it isn\'t enabled by default.\\n\\n- If you are using `@babel/preset-env`, you need to enable the `corejs: 3` option:\\n\\n  ```js title=\\"JavaScript\\"\\n  presets: [\\n    [\\"@babel/preset-env\\", {\\n      useBuiltIns: \\"usage\\", // or \\"entry\\"\\n      corejs: 3,\\n    }]\\n  ]\\n  ```\\n\\n  Don\'t forget to update your installed version of `core-js`!\\n\\n  ```\\n  npm install --save core-js@3\\n  ```\\n\\n  When using `core-js` 3, the `useBuiltIns: \\"entry\\"` option not only transforms `import \\"core-js\\"` imports, but also `regenerator-runtime/runtime` and all the nested `core-js` entry points.\\n\\n  For example, when targeting Chrome 72, it will apply this transformation:\\n\\n  <details>\\n  <summary>Input</summary>\\n\\n  ```js title=\\"JavaScript\\"\\n  import \\"core-js/es\\";\\n  import \\"core-js/proposals/set-methods\\";\\n  import \\"core-js/features/set/map\\";\\n  ```\\n  </details>\\n  <details>\\n  <summary>Output</summary>\\n\\n  ```js title=\\"JavaScript\\"\\n  import \\"core-js/modules/es.array.unscopables.flat\\";\\n  import \\"core-js/modules/es.array.unscopables.flat-map\\";\\n  import \\"core-js/modules/es.object.from-entries\\";\\n  import \\"core-js/modules/esnext.set.difference\\";\\n  import \\"core-js/modules/esnext.set.intersection\\";\\n  import \\"core-js/modules/esnext.set.is-disjoint-from\\";\\n  import \\"core-js/modules/esnext.set.is-subset-of\\";\\n  import \\"core-js/modules/esnext.set.is-superset-of\\";\\n  import \\"core-js/modules/esnext.set.map\\";\\n  import \\"core-js/modules/esnext.set.symmetric-difference\\";\\n  import \\"core-js/modules/esnext.set.union\\";\\n  ```\\n  </details>\\n\\n  Unlike when using `core-js` 2, it doesn\'t transform `@babel/polyfill` imports because when used directly that package loads version 2 of `core-js`.\\n\\n- If you are using `@babel/plugin-transform-runtime`, you need to use the `corejs: 3` option:\\n  ```js title=\\"JavaScript\\"\\n  plugins: [\\n    [\\"@babel/transform-runtime\\", {\\n      corejs: 3,\\n    }]\\n  ]\\n  ```\\n  You can remove `@babel/runtime-corejs2`, but you need to install `@babel/runtime-corejs3`!\\n  ```\\n  npm remove @babel/runtime-corejs2\\n  npm install --save @babel/runtime-corejs3\\n  ```\\n\\n- `@babel/polyfill` isn\'t a plugin or preset, but a runtime package: if we added an option to switch between `core-js@2` and `core-js@3`, both the package versions would need to be included in your bundle. For this reason, we decided to deprecate it: you now should load `core-js` for polyfills, and `regenerator-runtime/runtime` if you are transforming generators:\\n\\n  ```js title=\\"JavaScript\\"\\n  // before\\n  import \\"@babel/polyfill\\";\\n\\n  // after\\n  import \\"core-js/stable\\";\\n  import \\"regenerator-runtime/runtime\\";\\n  ```\\n\\n  This gives you the ability to load any version you want, and to update those two package independently.\\n\\n  In case you are interested, you should check the old source of `@babel/polyfill` for `core-js@2`:  [packages/babel-polyfill/src/index.js](https://github.com/babel/babel/blob/cf4bd8bb8d7e9feb7de8d97ef0eabcdc7499fce2/packages/babel-polyfill/src/index.js).\\n\\n## Partial Application ([#9343](https://github.com/babel/babel/pull/9343) and [#9474](https://github.com/babel/babel/pull/9474))\\n\\nThis release includes both `@babel/parser` and transform support for the [partial application proposal](https://github.com/tc39/proposal-partial-application), which is currently at Stage 1 (last presented in July 2018). All the implementation work has been done by [Behrang Yarahmadi](https://github.com/byara), sponsored by Trivago.\\n\\nThis new feature allows you to bind some arguments and the `this` receiver function, similarly to the existing `Function#bind` method but with fewer limitations.\\n\\n```js title=\\"JavaScript\\"\\nconst half = divide(?, 2); // half = num => divide(num, 3)\\nhalf(6); // 3\\n\\n\\nelement.addEventListener(\\n  \\"click\\",\\n  // handleEvent will be called with the correct \\"this\\".\\n  this.handleEvent(\\"click\\", ?) // e => this.handleEvent(\\"click\\", e)\\n);\\n```\\n\\nIt is also really useful in conjunction with the pipeline operator proposal (especially when using the \\"minimal\\" or \\"F-sharp\\" variants), since it makes it possible to avoid a lot of arrow functions:\\n\\n```js title=\\"JavaScript\\"\\nlet newScore = player.score\\n  |> add(?, 7)\\n  |> clamp(0, 100, ?);\\n\\n// Without this proposal:\\nlet newScore = player.score\\n  |> (_ => add(_, 7))\\n  |> (_ => clamp(0, 100, _));\\n```\\n\\nYou can test it by adding `@babel/plugin-proposal-partial-application` to your config, or by enabling the `stage 1` preset in the online [repl](https://babeljs.io/repl/build/main#?presets=stage-1)!\\n\\n> \u2139\ufe0f NOTE: Although the proposal\'s readme also describes partial application for tagged template literals, it has not been implemented because [it will likely be removed](https://github.com/babel/babel/pull/9343#issuecomment-457307782).\\n\\n## Static private methods ([#9446](https://github.com/babel/babel/pull/9446))\\n\\n```js title=\\"JavaScript\\"\\nclass Person {\\n  static #is(obj) {\\n    return obj instanceof Person;\\n  }\\n\\n  constructor(name) {\\n    if (Person.#is(name)) {\\n      throw \\"It is already a person!\\";\\n    }\\n  }\\n}\\n```\\n\\nThanks again to [Tim](https://github.com/tim-mc) (Bloomberg) for implementing this proposal!\\n\\nIf you already use instance private methods you can use this new feature without any additional configuration, otherwise you need to add `@babel/plugin-proposal-private-methods` to your plugins list. When using the online [repl](https://babeljs.io/repl/build/main#?presets=stage-3) it is enabled by the `stage-3` preset.\\n\\nClass private features support is only one step away from being complete! \ud83d\ude04\\n\\n<div style={{margin: \\"auto\\",width: \\"fit-content\\"}}>\\n\\n| Class Private  | **Instance** | **Static** |\\n|----------------|--------------|------------|\\n| **Fields** <br/> `class A { #a = 1 }`    | [7.0.0](https://babeljs.io/blog/2018/08/27/7.0.0#tc39-proposals-https-githubcom-tc39-proposals-support) | [7.1.0](https://babeljs.io/blog/2018/09/17/7.1.0#private-static-fields-stage-3) |\\n| **Methods** <br/> `class A { #a() {} }`   | [7.2.0](https://babeljs.io/blog/2018/12/03/7.2.0#private-instance-methods-8654-https-githubcom-babel-babel-pull-8654) | 7.4.0 |\\n| **Accessors** <br/> `class A { get #a() {} }` | [7.3.0](https://babeljs.io/blog/2019/01/21/7.3.0#private-instance-accessors-getters-and-setters-9101-https-githubcom-babel-babel-pull-9101) | :heavy_multiplication_x: |\\n\\n</div>\\n\\n## TypeScript 3.4 RC support ([#9529](https://github.com/babel/babel/pull/9529) and [#9534](https://github.com/babel/babel/pull/9534))\\n\\nTypeScript 3.4 RC was [released](https://devblogs.microsoft.com/typescript/announcing-typescript-3-4-rc/) a few days ago, and thanks to [Tan Li Hau](https://github.com/tanhauhau) it is already supported by Babel!\\n\\nThere are two new features for type annotations: `const` contexts, which mark an object as \\"deeply frozen\\", and the `readonly` modifier for arrays and tuples.\\n\\n```js title=\\"JavaScript\\"\\nconst student = {\\n  name: \\"Joe Blogs\\",\\n  marks: [25, 23, 30]\\n} as const;\\n\\nconst vowels: readonly string[] = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"];\\n```\\n\\nKeep in mind that TypeScript 3.4 RC is not a stable release, so you should wait until TypeScript 3.4 is officially released: you can subscribe to the [TypeScript blog](https://devblogs.microsoft.com/typescript/) to be notified when it will be available. \ud83d\ude42\\n\\n## Parenthesized expressions ([#8025](https://github.com/babel/babel/issues/8025))\\n\\nParentheses are not usually meaningful for JavaScript compilers or code generators: they are only \\"hints\\" used to tell the parser that some nodes have different precedence from the default one:\\n\\n<div style={{margin: \\"auto\\",width: \\"fit-content\\"}}>\\n\\n| **Code** | `1 + 2 * 3` / `1 + (2 * 3)` | `(1 + 2) * 3` |\\n|----------|:---------------------------:|:-------------:|\\n| **AST structure** | ![](https://i.imgur.com/pcfIRPq.jpg) | ![](https://i.imgur.com/1CXk8BZ.jpg) |\\n\\n</div>\\n\\nWhen the AST has been generated, the precedence of operations is determined by the tree structure and not by the original parentheses: for this reason Babel did not track them.\\n\\nWhen printing an AST, `@babel/generator` has no knowledge about the original formatting and only generates parentheses where needed.\\n\\nThere are some situations where this causes problems for users. For example, when using Google Closure Compiler, parentheses are used to mark [type cast expressions](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#type-casting):\\n\\n```js title=\\"JavaScript\\"\\n/** @type {!MyType} */ (valueExpression)\\n```\\n\\nWe already had a `ParenthesizedExpression` node to represent parentheses, but it was never generated by `@babel/parser` and it could only be injected by custom plugins. Thanks to the work of [Erik Arvidsson](https://github.com/arv), you can now use the `createParenthesizedExpressions` [parser option](https://babeljs.io/docs/en/options#parseropts) to automatically track them!\\n\\n<div style={{margin: \\"auto\\",width: \\"fit-content\\"}}>\\n\\n| **Code** | `1 + (2 * 3)` | `(1 + 2) * 3` |\\n|----------|:-------------:|:-------------:|\\n| **AST structure** | ![](https://i.imgur.com/1uMC81f.jpg) | ![](https://i.imgur.com/mT7sk7P.jpg) |\\n\\n</div>\\n\\n## `@babel/parser` spec compliancy\\n\\n[Daniel](https://github.com/danez) is making `@babel/parser` more and more compliant to the ECMAScript specification: it is now passing 98.97% of the tests in the [Test262](https://github.com/tc39/test262) suite. \ud83d\ude0e\\n\\nThis release makes `@babel/parser` aware of JavaScript\'s scoping rules: it now knows which variables are declared, if there are conflicts, whether they are hoisted or not, and if a specific syntactic construct is allowed in the context where it is found.\\n\\nAll of these invalid examples are now correctly reported as errors, avoiding the need to manually disallow them in every tool that uses `@babel/parser` under the hood:\\n\\n```js title=\\"JavaScript\\"\\nlet a, a; // Duplicate declaration \ud83d\udca5\\n\\nif (foo) {\\n  if (bar) { var b }\\n  let b; // Duplicate declaration, again \ud83d\udca5\\n}\\n\\nexport { Foo }; // Error, Foo is not declared \u2753\\n\\nclass C {\\n  constructor() {\\n    super(); // Super in a non-derived class \ud83e\udd14\\n  }\\n\\n  method(d, d) {} // Duplicate parameter \ud83d\udca5\\n}\\n```\\n\\n## Code placeholders ([#9364](https://github.com/babel/babel/pull/9364))\\n\\nCode is not always meant to be directly written by humans: what if some code needs to be generated, maybe using a predefined template?\\n\\nTemplate files are often used to generate HTML code, either using a language like PHP or a template engine like Handlebars:\\n\\n```htmlmixed\\n\x3c!-- PHP --\x3e\\n<section>\\n  <h1><?= $title ?></h1>\\n  <main><?= $body ?></main>\\n</section>\\n\\n\x3c!-- Handlebars --\x3e\\n<section>\\n  <h1>{{ title }}</h1>\\n  <main>{{ body }}</main>\\n</section>\\n```\\n\\nIf you have ever developed a Babel plugin, you might have used `@babel/template`: it is a utility which allows you to do the same thing, but generating JavaScript code:\\n\\n```js title=\\"JavaScript\\"\\nconst buildAssign = template`\\n  var NAME = VALUE;\\n`;\\n\\nconst result = buildAssign({\\n  NAME: varName,\\n  VALUE: varValue,\\n});\\n```\\n\\nUntil now, `@babel/template` used uppercase identifier as \\"placeholders\\", which then needed to be replaced. While this approach worked well in most cases, it also had some caveats:\\n\\n- by default, every uppercase identifier was marked as a placeholder and `@babel/template` would threw an error if it was not replaced.\\n- it was not possible to put a placeholder where an identifier is not allowed, for example in place of a function body or an exported declaration.\\n\\nTo solve these problems, we introduced a new syntactic element, which can replace any node: `%%placeholder_name%%`.\\n\\n```js title=\\"JavaScript\\"\\nconst buildLazyFn = template`\\n  function %%name%%(%%params%%) {\\n    return function () %%body%%;\\n  }\\n`;\\n\\nconst result = buildLazyFn({\\n  name: functionName,\\n  params: functionParams,\\n  body: functionBody,\\n});\\n```\\n\\nThis feature has being sponsored by [Stripe](https://stripe.com) (via [Runkit](https://runkit.com)). We have been experimenting with new ways of sponsoring Babel, and for the first time a company directly sponsored the implementation of a feature by paying a member of the team to work on it. If your company wants to sponsor the implementation of an ECMAScript proposal, or a general improvement to Babel, please contact us!\\n\\n---\\n\\n[Discuss on Twitter](https://twitter.com/search?q=https%3A%2F%2Fbabeljs.io%2Fblog%2F2019%2F03%2F19%2F7.4.0)"},{"id":"/2019/01/21/7.3.0","metadata":{"permalink":"/babel-website/blog/2019/01/21/7.3.0","source":"@site/blog/2019-01-21-7.3.0.md","title":"7.3.0 Released: Named capturing groups, private instance accessors and smart pipelines","description":"After over 80 commits, the latest Babel minor release is here!","date":"2019-01-21T16:00:00.000Z","formattedDate":"January 21, 2019","tags":[],"readingTime":3.915,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.3.0 Released: Named capturing groups, private instance accessors and smart pipelines","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2019-01-21T16:00:00.000Z","categories":"announcements","share_text":"Babel 7.3.0 Released"},"prevItem":{"title":"7.4.0 Released: core-js 3, static private methods and partial application","permalink":"/babel-website/blog/2019/03/19/7.4.0"},"nextItem":{"title":"7.2.0 Released: Private Instance Methods","permalink":"/babel-website/blog/2018/12/03/7.2.0"}},"content":"After over 80 commits, the latest Babel minor release is here!\\n\\nThis release includes support for named capturing groups in regular expressions, private instance accessors, the smart pipeline operator and a bunch of improvements to TypeScript parsing. You can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.3.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nThanks to [@jamesgeorge007](https://github.com/jamesgeorge007) and [@armano2](https://github.com/armano2) for their first PR!\\n\\n[**Bloomberg**](https://github.com/bloomberg) is continuing to sponsor the implementation of new class features in Babel: after giving us [static private fields](https://babeljs.io/blog/2018/09/17/7.1.0#private-static-fields-stage-3) and [private instance methods](https://babeljs.io/blog/2018/12/03/7.2.0#private-instance-methods-8654-https-githubcom-babel-babel-pull-8654), they\'ve just implemented private instance getters and setters.\\n\\nAnother shout out goes to the [AMP Project](https://www.ampproject.org), which increased their [support of Babel](https://twitter.com/left_pad/status/1084955653389590533) to $24k/year becoming a Base Support Sponsor.\\n\\nIf you or your company want to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on [OpenCollective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly! As a volunteer-driven project, we rely on the community\'s support to both fund our efforts in supporting the wide range of JavaScript users and taking ownership of the code.\\n\\n## Private instance accessors (getters and setters) ([#9101](https://github.com/babel/babel/pull/9101))\\n\\n```js title=\\"JavaScript\\"\\nclass Person {\\n  #firstname = \\"Babel\\";\\n  #lastname = \\"JS\\";\\n\\n  get #name() {\\n    return this.#firstname + \\" \\" + this.#lastname;\\n  }\\n\\n  sayHi() {\\n    alert(`Hi, ${this.#name}!`);\\n  }\\n}\\n```\\n\\nThanks to [Tim](https://github.com/tim-mc) (Bloomberg) for implementing this proposal!\\n\\nYou can test this new feature by adding `@babel/plugin-proposal-private-methods` to your config, if you haven\'t already added it from Babel 7.2.0, or by enabling the `stage-3` preset in the online [repl](https://babeljs.io/repl/build/main#?code_lz=MYGwhgzhAEAKCmAnCB7AdtA3gKGtAxAGYCWyALmmALbzQC80ARAEJgBG8IjA3LgeBArVaDRgCkAyjz58A5vDIFKNABQBKLHzyIFAV0QYyAC2IQAdEVKDltANRMH946YsChNXngC-MvBDAAngASxOqaeHhgIEhkKgAGIQA00AAkmM7m-DZeAIRxap7QPl5AA&presets=stage-3).\\n\\nClass private features support is almost complete!\\n\\n<div style={{margin: \\"auto\\",width: \\"fit-content\\"}}>\\n\\n| Class Private  | **Instance** | **Static** |\\n|----------------|--------------|------------|\\n| **Fields** <br/> `class A { #a = 1}`    | [7.0.0](https://babeljs.io/blog/2018/08/27/7.0.0#tc39-proposals-https-githubcom-tc39-proposals-support) | [7.1.0](https://babeljs.io/blog/2018/09/17/7.1.0#private-static-fields-stage-3) |\\n| **Methods** <br/> `class A { #a() {} }`   | [7.2.0](https://babeljs.io/blog/2018/12/03/7.2.0#private-instance-methods-8654-https-githubcom-babel-babel-pull-8654) | \u2716 |\\n| **Accessors** <br/> `class A { get #a() {} }` | 7.3.0 | \u2716 |\\n\\n</div>\\n\\n## Smart pipeline operator ([#9179](https://github.com/babel/babel/pull/9179))\\n\\n> Babel implements multiple variants of this [proposal](https://github.com/tc39/proposal-pipeline-operator/wiki#proposal-1-f-sharp-only) to help TC39 test and gather feedback from the community. As with all proposals, expect changes in the future.\\n\\nIn [Babel 7.2.0](https://babeljs.io/blog/2018/12/03/7.2.0#smart-pipeline-operator-parsing-8289-https-githubcom-babel-babel-pull-8289) we landed parsing support for the [Smart Pipeline Operator](https://github.com/js-choi/proposal-smart-pipelines/) proposal. Thanks to the work of [Thiago Arrais](https://github.com/thiagoarrais), you can now transpile it down to standard ECMAScript and try it out!\\n\\nWe currently only support the main proposal, and none of the [additional features](https://github.com/js-choi/proposal-smart-pipelines#additional-features). Also, we don\'t support `yield` and `await` in pipelines yet.\\n\\n```js title=\\"JavaScript\\"\\nname\\n  |> # || throw new TypeError()\\n  |> doubleSay(#, \', \')\\n  |> capitalize\\n  |> # + \'!\'\\n  |> new User.Message(#)\\n  |> stream.write(#, { sync: true })\\n  |> console.log;\\n```\\n\\nYou can enable it in your project using the `@babel/plugin-proposal-pipeline-operator` plugin with the `proposal: \\"smart\\"` option:\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\n    [\\"@babel/plugin-proposal-pipeline-operator\\", { \\"proposal\\": \\"smart\\" }]\\n  ]\\n}\\n```\\n\\n> Previously, the \\"minimal\\" proposal was added in back in [v7.0.0-beta.3] via [#6335](https://github.com/babel/babel/pull/6335)\\n\\n## Named capturing groups ([#7105](https://github.com/babel/babel/pull/7105))\\n\\n```js title=\\"JavaScript\\"\\nlet stringRe = /(?<quote>\\"|\')(?<contents>.*?)\\\\k<quote>/;\\n\\nlet { contents } = `\\"foo bar\\"`.match(stringRe);\\n```\\n\\nSupport for the biggest ECMAScript 2018 feature missing in Babel is now here! Previously, partial support for named groups was available via the awesome [babel-plugin-transform-modern-regexp](https://github.com/DmitrySoshnikov/babel-plugin-transform-modern-regexp) community plugin by [Dmitry Soshnikov](https://twitter.com/DmitrySoshnikov). We also coordinated efforts with `core-js` to provide full support with the new `@babel/plugin-transform-named-capturing-groups-regex` package.\\n\\n`@babel/preset-env` has also been updated to include this, so many of you will be able to use it without making any changes!\\n\\nNote that the runtime features (i.e. the `groups` property) only work in browsers with proper support for ES6 regular expressions. If you need to support older environments, you can include a polyfill for `RegExp`\'s methods.\\n\\n## TypeScript updates ([#9302](https://github.com/babel/babel/pull/9302), [#9309](https://github.com/babel/babel/pull/9309))\\n\\nThanks to the work by [Armano](https://github.com/armano2) on `@babel/parser` and [Henry](https://github.com/hzoo)/[Brian](https://github.com/existentialism) on `@babel/generator` (have you seen the [live stream](https://www.youtube.com/watch?v=L-PxPBDUf6w&t=4s)?), we now support `let x: typeof import(\'./x\');`, added in [TypeScript 2.9](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-9.html). We now also support the `bigint` type keyword, added in [TypeScript 3.2](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-2.html).\\n\\n## `babel-eslint` v11.0.0-beta.0: Automatic Syntax Detection by Reading Config ([babel/babel-eslint#711](https://github.com/babel/babel-eslint/pull/711))\\n\\nThanks to [Kai](https://github.com/kaicataldo) (also on the ESLint TSC) for finishing this work!\\n\\nUp until now, `babel-eslint` has manually enabled all syntax plugins (with the list falling out of date frequently). It also meant that it could parse syntax that a configured instance of Babel itself didn\'t allow at compile time. We now require `@babel/core` as a peerDependency and assume that a Babel config exists when using `babel-eslint` and use that same config to modify itself (making this a breaking change). This change will hopefully make maintaining the module itself more manageable as well as re-using Babel\'s config which is a reasonable assumption for a user making use of `babel-eslint`.\\n\\nYou can help us by checking if this beta release works for your project \ud83d\ude42\\n\\n---\\n\\n[Discuss on Twitter](https://twitter.com/search?q=https%3A%2F%2Fbabeljs.io%2Fblog%2F2019%2F01%2F21%2F7.3.0)"},{"id":"/2018/12/03/7.2.0","metadata":{"permalink":"/babel-website/blog/2018/12/03/7.2.0","source":"@site/blog/2018-12-03-7.2.0.md","title":"7.2.0 Released: Private Instance Methods","description":"We just released a new minor version of Babel!","date":"2018-12-03T12:00:00.000Z","formattedDate":"December 3, 2018","tags":[],"readingTime":2.445,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"7.2.0 Released: Private Instance Methods","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"2018-12-03T12:00:00.000Z","categories":"announcements","share_text":"Babel 7.2.0 Released"},"prevItem":{"title":"7.3.0 Released: Named capturing groups, private instance accessors and smart pipelines","permalink":"/babel-website/blog/2019/01/21/7.3.0"},"nextItem":{"title":"7.1.0 Released: Decorators, Private Static Fields","permalink":"/babel-website/blog/2018/09/17/7.1.0"}},"content":"We just released a new minor version of Babel!\\n\\nThis release includes support for private instance methods and a bunch of bug fixes regarding Flow and TypeScript types. You can read the whole changelog [on GitHub](https://github.com/babel/babel/releases/tag/v7.2.0).\\n\\n\x3c!-- truncate --\x3e\\n\\nA lot of new contributors fixed bugs or implemented new features in this release: thanks to [Gcaufy](https://github.com/Gcaufy), [Grigory Moroz](https://github.com/morozRed), [Paul Happ](https://github.com/phapp88), [Tim McClure](https://github.com/tim-mc) and [Veaceslav Cotruta](https://github.com/katrotz)!\\n\\nA big shout out to Bloomberg for sponsoring the implementation of private class elements! This support for private _instance_ methods  is a follow-up to private _static_ fields released in Babel [7.1.0](https://babeljs.io/blog/2018/09/17/7.1.0#private-static-fields-stage-3).\\n\\nIf you or your company wants to support Babel and the evolution of JavaScript, but aren\'t sure how, you can donate to us on [OpenCollective](https://opencollective.com/babel) and, better yet, work with us on the implementation of [new ECMAScript proposals](https://github.com/babel/proposals) directly!\\n\\n## Private Instance Methods ([#8654](https://github.com/babel/babel/pull/8654))\\n\\n```js title=\\"JavaScript\\"\\nclass Person {\\n  #age = 19;\\n\\n  #increaseAge() {\\n    this.#age++;\\n  }\\n\\n  birthday() {\\n    this.#increaseAge();\\n    alert(\\"Happy Birthday!\\");\\n  }\\n}\\n```\\n\\nThanks to [Tim](https://github.com/tim-mc) for implementing this proposal, and to [Nicol\xf2](https://twitter.com/NicoloRibaudo) and [Justin](https://github.com/jridgewell) for the reviews!\\n\\nYou can test private methods by adding the `@babel/plugin-proposal-private-methods` plugin to your Babel configuration, or enabling the `stage-3` preset in the [repl](https://babeljs.io/repl/build/main#?presets=stage-3).\\n\\nPrivate accessors [are also coming](https://github.com/babel/babel/pull/9101), and we have done some big internal refactoring that allows us to add support for private elements to decorators soon \ud83c\udf89.\\n\\n## \\"Smart\\" Pipeline Operator Parsing ([#8289](https://github.com/babel/babel/pull/8289))\\n\\nThanks to the work of [James DiGioia](https://github.com/mAAdhaTTah) and [J. S. Choi](https://github.com/js-choi), `@babel/parser` now also can parse the [Smart Pipeline Operator](https://github.com/js-choi/proposal-smart-pipelines/), in addition to the [minimal version](https://github.com/tc39/proposal-pipeline-operator).\\n\\nWe currently only support the \\"core\\" of the smart pipeline proposal, and not any additional features. We also currently support only `#` as a preliminary placeholder. The [actual placeholder has not yet been decided](https://github.com/tc39/proposal-pipeline-operator/issues/91), and other possibilities such as `?`, `@`, and `%` may be experimentally supported by `@babel/parser` in the future.\\n\\n```js title=\\"JavaScript\\"\\n// \\"Smart\\"\\nconst result = 2 |> double |> 3 + # |> toStringBase(2, #); // \\"111\\"\\n\\n// \\"Simple\\"\\nconst result = 2 |> double |> (x => 3 + x) |> (x => toStringBase(2, x));\\n```\\n\\nBabel implements multiple variants of this proposal to help TC39 test and gather feedback from the community. As with all proposals, expect changes in the future.\\n\\nIf you are directly using `@babel/parser` and you want to test this proposal, you can pass the `proposal: \\"smart\\"` option to the pipeline plugin:\\n\\n```js title=\\"JavaScript\\"\\nconst ast = babel.parse(code, {\\n  plugins: [\\n    [\\"pipelineOperator\\", { proposal: \\"smart\\" }]\\n  ]\\n})\\n```\\n\\nWe don\'t support transpiling this syntax yet, but it will come soon.\\n\\n## Plugin Names ([#8769](https://github.com/babel/babel/pull/8769))\\n\\nEvery official plugin now provides Babel its name. Although this doesn\'t affect normal Babel use, it provides a consistent identifier for each plugin. This is particularly useful for things like [Time Travel](https://github.com/babel/website/pull/1736), which allows you to see exactly what each plugin is doing to your code. You can see this in effect via our [repl](https://babeljs.io/repl/build/main#?timeTravel=true):\\n\\n![](https://i.imgur.com/AzKc37i.gif)\\n\\n---\\n\\n[Discuss on Twitter](https://twitter.com/search?q=https%3A%2F%2Fbabeljs.io%2Fblog%2F2018%2F12%2F03%2F7.2.0)"},{"id":"/2018/09/17/7.1.0","metadata":{"permalink":"/babel-website/blog/2018/09/17/7.1.0","source":"@site/blog/2018-09-17-7.1.0.md","title":"7.1.0 Released: Decorators, Private Static Fields","description":"There\'s already another release! 7.1.0 includes support for Stage 2 Decorators and adds support for Stage 3 Private Static Fields as well as some various bug fixes.","date":"2018-09-17T12:00:00.000Z","formattedDate":"September 17, 2018","tags":[],"readingTime":1.715,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"7.1.0 Released: Decorators, Private Static Fields","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"\xa0 2018-09-17 12:00:00","categories":"announcements","share_text":"Babel 7.1.0 Released"},"prevItem":{"title":"7.2.0 Released: Private Instance Methods","permalink":"/babel-website/blog/2018/12/03/7.2.0"},"nextItem":{"title":"TC39 Standards Track Decorators in Babel","permalink":"/babel-website/blog/2018/09/17/decorators"}},"content":"There\'s already another release! 7.1.0 includes support for Stage 2 Decorators and adds support for Stage 3 Private Static Fields as well as some various bug fixes.\\n\\n\x3c!-- truncate --\x3e\\n\\n> If you didn\'t see earlier, we released [7.0](https://babeljs.io/blog/2018/08/27/7.0.0)!\\n\\n\x3c!-- link to github release/changelog --\x3e\\n\\n## Decorators (Stage 2)\\n\\n> https://github.com/babel/babel/pull/7976, by [Nicol\xf2](https://github.com/nicolo-ribaudo)\\n\\n```js title=\\"JavaScript\\"\\nclass MyClass {\\n  @decorator\\n  method() {}\\n}\\n```\\n\\nIt\'s been many years in the making, but thanks to the amazing work by [Nicol\xf2](https://github.com/nicolo-ribaudo), this release includes initial support for Stage 2 decorators (via `@babel/plugin-proposal-decorators`). Shoutout to [Peeyush](https://github.com/peey) for implementing parser support (and initial transform work) during [Google Summer of Code](https://babeljs.io/blog/2017/08/11/gsoc-peey-1) last year and thanks to many members of TC39 including [Daniel](https://github.com/littledan), [Kevin](https://github.com/bakkot), and [Diego](https://github.com/diervo) for their reviews. Keep in mind that since the proposal is Stage 2, it\'s still subject to major changes. Since there is a lot of the ecosystem on the previous versions of the proposal, we can attempt a codemod for some simple automated transformations to upgrade code with help from the community.\\n\\nPlease check out our separate [blog post](https://babeljs.io/blog/2018/09/17/decorators) for more information regarding some history, changes from the previous proposal, and what\'s next!\\n\\n## Private Static Fields (Stage 3)\\n\\n> https://github.com/babel/babel/pull/8205, by Bloomberg\\n\\n```js title=\\"JavaScript\\"\\nclass C {\\n  static #foo = \\"bar\\";\\n}\\n```\\n\\nThanks to [Rob](https://github.com/robpalme), [Robin](https://github.com/rricard), [Robert](https://github.com/rpamely), [Tim](https://github.com/tim-mc), [Kubilay](https://github.com/mkubilayk) and the team at [@Bloomberg](https://github.com/bloomberg) for implementing this new feature and [Justin](https://github.com/jridgewell) for the review! I believe this is the first time we\'ve had a company sponsor implementation work for a proposal and looking forward to more from them! If you want to see proposals improve, move forward, or have implementation experience in the wild then consider sponsoring work on it for Babel in addition to just going to TC39.\\n\\nPrivate Class Methods support is [WIP](https://github.com/babel/proposals/issues/22)!\\n\\n## Better Monorepo Support\\n\\n> https://github.com/babel/babel/pull/8660, by [Logan](https://github.com/loganfsmyth)\\n\\nWe\'re introducing a new option: `rootMode` for `babel.config.js` files to better support the various ways monorepos are used. The default just checks `root` but you can change it to look up directories.\\n\\nCheck the [`rootMode`](https://babeljs.io/docs/en/next/options#rootmode) docs for more information."},{"id":"/2018/09/17/decorators","metadata":{"permalink":"/babel-website/blog/2018/09/17/decorators","source":"@site/blog/2018-09-17-decorators.md","title":"TC39 Standards Track Decorators in Babel","description":"Babel 7.1.0 finally supports the new decorators proposal: you can try it out by using the @babel/plugin-proposal-decorators plugin \ud83c\udf89.","date":"2018-09-17T12:00:00.000Z","formattedDate":"September 17, 2018","tags":[],"readingTime":7.015,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo"}],"frontMatter":{"layout":"post","title":"TC39 Standards Track Decorators in Babel","author":"Nicol\xf2 Ribaudo","authorURL":"https://twitter.com/NicoloRibaudo","date":"\xa0 2018-09-17 12:00:00","categories":"announcements","share_text":"TC39 Standards Track Decorators in Babel"},"prevItem":{"title":"7.1.0 Released: Decorators, Private Static Fields","permalink":"/babel-website/blog/2018/09/17/7.1.0"},"nextItem":{"title":"Babel 7 Released","permalink":"/babel-website/blog/2018/08/27/7.0.0"}},"content":"Babel 7.1.0 finally supports the new decorators proposal: you can try it out by using the [`@babel/plugin-proposal-decorators`](https://babeljs.io/docs/en/babel-plugin-proposal-decorators) plugin \ud83c\udf89.\\n\\n\x3c!--truncate--\x3e\\n\\n## A Bit of History\\n\\nDecorators were [first proposed](https://github.com/wycats/javascript-decorators/blob/696232bbd997618d603d6577848d635872f25c43/README.md) by [Yehuda Katz](https://github.com/wycats) more than three years ago. TypeScript released support for decorators in [version 1.5](https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#typescript-15) (2015) alongside with many ES6 features.\\nSome major frameworks, like Angular and MobX, started using them to enhance their developer experience: this made decorators popular and gave the community a false sense of stability.\\n\\nBabel first implemented decorators in [version 5](https://github.com/babel/babel/blob/main/.github/CHANGELOG-v5.md#500), but removed them in Babel 6 because the proposal was still in flux. [Logan Smyth](https://github.com/loganfsmyth) created an unofficial plugin ([`babel-plugin-transform-decorators-legacy`](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy)) which replicated the Babel 5 behavior; it has since then been moved to the official Babel repository during the first Babel 7 alpha release. This plugin still used the old decorators semantics, because it wasn\'t clear yet what the new proposal would have been.\\n\\nSince then, [Daniel Ehrenberg](https://github.com/littledan) and [Brian Terlson](https://github.com/bterlson) become co-authors of the proposal along with [Yehuda Katz](https://github.com/wycats), it has been almost completely rewritten. Not everything has been decided yet, and there isn\'t a compliant implementation as of today.\\n\\nBabel 7.0.0 introduced a new flag to the `@babel/plugin-proposal-decorators` plugin: the `legacy` option, whose only valid value was `true`. This breaking change was needed to provide a smooth transition path from the Stage 1 version of the proposal to the current one.\\n\\nIn Babel 7.1.0 we are introducing support for this new proposal, and it is enabled by default when using the `@babel/plugin-proposal-decorators` plugin. If we didn\'t introduce the `legacy: true` option in Babel 7.0.0, it wouldn\'t be possible to use the correct semantics by default (which would be equivalent to `legacy: false`).\\n\\nThe new proposal also supports decorators on private fields and methods. We haven\'t implemented this feature yet in Babel (for each class, you can use either decorators or private elements), but it will come very soon.\\n\\n## What Changed In The New Proposal?\\n\\nEven though the new proposal looks very similar to the old one, there are several important differences that make them incompatible.\\n\\n### Syntax\\n\\nThe old proposal allowed any valid left-hand side expression (literals, function and class expressions, `new` expressions and function calls, simple and computed property accesses) to be used as the body of a decorator. For example, this was valid code:\\n\\n```js title=\\"JavaScript\\"\\nclass MyClass {\\n  @getDecorators().methods[name]\\n  foo() {}\\n\\n  @decorator\\n  [bar]() {}\\n}\\n```\\n\\nThat syntax had a problem: the `[...]` notation was used as *both* property access inside the decorator body and to define computed names. To prevent such ambiguity, the new proposal only allows dot property access (`foo.bar`), optionally with arguments at the end (`foo.bar()`). If you need more complex expressions, you can wrap them in parentheses:\\n\\n```js title=\\"JavaScript\\"\\nclass MyClass {\\n  @decorator\\n  @dec(arg1, arg2)\\n  @namespace.decorator\\n  @(complex ? dec1 : dec2)\\n  method() {}\\n}\\n```\\n\\n### Object Decorators\\n\\nThe old version of the proposal allowed, in addition to class and class elements decorators, object members decorators:\\n\\n```js title=\\"JavaScript\\"\\nconst myObj = {\\n  @dec1 foo: 3,\\n  @dec2 bar() {},\\n};\\n```\\n\\nDue to some incompatibilities with the current object literal semantics, they have been removed from the proposal. If you are using them in your code, stay tuned because they might be re-introduced in a follow-on proposal ([tc39/proposal-decorators#119](https://github.com/tc39/proposal-decorators/issues/119)).\\n\\n### Decorator Functions Arguments\\n\\nThe third important change introduced by the new proposal is about the arguments passed to the decorator functions.\\n\\nIn the first version of the proposal, class elements decorators received a target class (or object), a key, and a property descriptor \u2014 similar in shape to what you would pass to `Object.defineProperty`. Class decorators took as their only argument a target constructor.\\n\\nThe new decorators proposal is much more powerful: element decorators take an object which, other than changing the property descriptor, allows changing the key, the placement (`static`, `prototype` or `own`), and the kind (`field` or `method`) of the element. They can also create additional properties and define a function (a *finisher*) which is run on the decorated class.\\n\\nClass decorators take an object which contains the descriptors of every single class element, making it possible to modify them before creating the class.\\n\\n### Upgrading\\n\\nGiven these incompatibilities, it is not possible to use existing decorators with the new proposal: this would make the migration very slow, since existing libraries (MobX, Angular, etc.) can\'t be upgraded without introducing breaking changes.\\nTo workaround this issue, we have published an utility package which wraps the decorators in your code. After running it,\\nyou can safely change your Babel config to use the new proposal \ud83c\udf89.\\n\\nYou can upgrade your files using a one-liner:\\n\\n```shell=\\nnpx wrap-legacy-decorators src/file-with-decorators.js --decorators-before-export --write\\n```\\n\\nIf your code only runs in Node, or if you are bundling your code with Webpack or Rollup, you can avoid injecting the wrapper function in each file by using an external dependency:\\n\\n```shell=\\nnpm install --save decorators-compat\\nnpx wrap-legacy-decorators src/file-with-decorators.js --decorators-before-export --external-helpers --write\\n```\\n\\nFor more information, you can read [the package documentation](https://github.com/nicolo-ribaudo/legacy-decorators-migration-utility).\\n\\n## Open Questions\\n\\nNot everything has been decided yet: decorators are a very big feature and defining them in the best possible way is complex.\\n\\n### Where Should Decorators on Exported Classes Go?\\n\\n> [tc39/proposal-decorators#69](https://github.com/tc39/proposal-decorators/issues/69)\\n\\nThe decorator proposal has gone back and forth on this question: should decorators come before or after the export keyword?\\n\\n```js title=\\"JavaScript\\"\\nexport @decorator class MyClass {}\\n\\n// or\\n\\n@decorator\\nexport class MyClass {}\\n```\\n\\nThe underlying question is whether or not the `export` keyword is part of the class declaration or it is a \\"wrapper\\". In the first case it should come *after* decorators, since decorators come at the beginning of the declaration; in the second one it should come *before*, because decorators are part of the class declaration.\\n\\n### How to Make Decorators Securely Interact with Private Elements?\\n\\n> [tc39/proposal-decorators#129](https://github.com/tc39/proposal-decorators/issues/129), [tc39/proposal-decorators#133](https://github.com/tc39/proposal-decorators/issues/133)\\n\\nDecorators give rise to an important security concern: if it is possible to decorate private elements, then private names (which can be considered as the \\"keys\\" of private elements) could be leaked. There are different safety levels to be thought of:\\n  1) Decorators should not accidentally leak private names. Malicious code should not be able to \\"steal\\" private names from other decorators, in any way.\\n  2) Only decorators directly applied to private elements might be considered trusted: should class decorators not be able to read and write private elements?\\n  3) *Hard privacy* (one of the goals of the class fields proposal) means that private elements should only be accessible from inside the class: should any decorator have access to private names? Should it be only possible to decorate public elements?\\n\\nThese questions need further discussion before being resolved, and that\'s where Babel comes in.\\n\\n## The Role of Babel\\n\\nFollowing the trend in the [What\'s Happening With the Pipeline (|>) Proposal?](http://babeljs.io/blog/2018/07/19/whats-happening-with-the-pipeline-proposal) article, with the Babel 7 release we are starting to use our position in the JS ecosystem to help proposal authors even more, by giving developers the ability to test and give feedback about different variations of the proposals.\\n\\nFor this reason, alongside with the update of `@babel/plugin-proposal-decorators` we introduced a new option: `decoratorsBeforeExport`, which allows users to try both `export @decorator class C {}` and `@decorator export default class`.\\n\\nWe will also introduce an option to customize the privacy constraint of decorated private elements. These options will be required until TC39 folks make a decision about them, so that we can let the default behavior be whatever the final proposal will specify.\\n\\nIf you are directly using our parser ([`@babel/parser`](https://babeljs.io/docs/en/next/babel-parser.html), formerly `babylon`) you can already use the `decoratorsBeforeExport` option in version 7.0.0:\\n\\n```js title=\\"JavaScript\\"\\nconst ast = babylon.parse(code, {\\n  plugins: [\\n    [\\"decorators\\", { decoratorsBeforeExport: true }]\\n  ]\\n})\\n```\\n\\n### Usage\\n\\nFor usage in Babel itself:\\n\\n```shell npm2yarn\\nnpm install @babel/plugin-proposal-decorators --save-dev\\n```\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\"@babel/plugin-proposal-decorators\\", { \\"decoratorsBeforeExport\\": true }]\\n}\\n```\\n\\nCheck the [`@babel/plugin-proposal-decorators`](https://babeljs.io/docs/en/babel-plugin-proposal-decorators) docs for more options.\\n\\n## Your Role\\n\\nAs a JavaScript developer, you can help outline the future of the language. You can test the various semantics which are being considered for decorators, and give feedback to the proposal authors. We need to know how you are using them in real-life projects! You can also find out why some design decisions were taken by reading the discussions in the issues and the meeting notes in the [proposal\'s repository](https://github.com/tc39/proposal-decorators).\\n\\nIf you want to try out decorators right now, you can play with the different presets options in our [repl](https://babeljs.io/repl/build/main)!"},{"id":"/2018/08/27/7.0.0","metadata":{"permalink":"/babel-website/blog/2018/08/27/7.0.0","source":"@site/blog/2018-08-27-7.0.0.md","title":"Babel 7 Released","description":"After almost 2 years, 4k commits, over 50 pre-releases, and a lot of help we are excited to announce the release of Babel 7. It\'s been almost 3 years since the release of Babel 6! There\'s a lot of moving parts so please bear with us in the first weeks of release. Babel 7 is a huge release: we\'ve made it faster, created an upgrade tool, JS configs, config \\"overrides\\", more options for size/minification, JSX Fragments, TypeScript, new proposals, and more!","date":"2018-08-27T18:00:00.000Z","formattedDate":"August 27, 2018","tags":[],"readingTime":22.755,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"Babel 7 Released","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"\xa0 2018-08-27 18:00:00","categories":"announcements","share_text":"Babel 7 Released"},"prevItem":{"title":"TC39 Standards Track Decorators in Babel","permalink":"/babel-website/blog/2018/09/17/decorators"},"nextItem":{"title":"Removing Babel\'s Stage Presets","permalink":"/babel-website/blog/2018/07/27/removing-babels-stage-presets"}},"content":"After almost 2 years, 4k commits, over 50 pre-releases, and a lot of help we are excited to announce the release of Babel 7. It\'s been almost [3 years](https://babeljs.io/blog/2015/10/29/6.0.0) since the release of Babel 6! There\'s a lot of moving parts so please bear with us in the first weeks of release. Babel 7 is a huge release: we\'ve made it faster, created an upgrade tool, JS configs, config \\"overrides\\", more options for size/minification, JSX Fragments, TypeScript, new proposals, and more!\\n\\n\x3c!-- truncate --\x3e\\n\\n> If you appreciate the work we\'re doing on Babel, you can sponsor Babel on [Open Collective](https://opencollective.com/babel), support me on [Patreon](https://www.patreon.com/henryzhu), or get you or your company involved with Babel as part of work. We\'d appreciate the collective ownership of this vital project in the JavaScript community!\\n\\n## It\'s Happening! \ud83c\udf89\\n\\nSoftware is never going to be perfect but we\'re ready to ship something that\'s already been used in production for some time now! [`@babel/core`](https://www.npmjs.com/package/@babel/core) is already at 5.1 mil downloads/month because of its usage in tools like [Next.js 6](https://zeit.co/blog/next6), [vue-cli 3.0](https://medium.com/the-vue-point/vue-cli-3-0-is-here-c42bebe28fbb), [React Native 0.56](https://facebook.github.io/react-native/blog/2018/07/04/releasing-react-native-056), and even [WordPress.com\'s frontend](https://github.com/Automattic/wp-calypso) \ud83d\ude42!\\n\\n## Babel\'s Role\\n\\nI\'d like to start this post by re-introducing Babel\'s [role](https://www.youtube.com/watch?v=fntd0sPMOtQ) in the JavaScript ecosystem over the last few years.\\n\\nThe initial issue was that unlike server languages, there was no way to guarantee that every user has the same support for JavaScript because users could be using different browsers with varying levels of support (especially older versions of Internet Explorer). If developers wanted to use new syntax (e.g. `class A {}`), users on old browsers would just get a blank screen due to the `SyntaxError`.\\n\\nBabel provided a way for developers to use the latest JavaScript syntax while allowing them to not worry about how to make it backwards compatible for their users by translating it (`class A {}` to `var A = function A() {}`).\\n\\nBecause of its ability to transform JavaScript code, it also can be used to implement new features: thus it has become a bridge to help [TC39](https://github.com/tc39) (the committee that specifies the JavaScript language) get feedback on proposed JavaScript ideas and for the community to have a say in the future of the language.\\n\\nBabel is fundamental to JavaScript development today. There are currently over [1.3 million dependent repos on GitHub](https://github.com/babel/babel/network/dependents), [17 million downloads on npm per month](https://www.npmjs.com/package/babel-core), and [hundreds of users](http://babeljs.io/users) including many major frameworks (React, Vue, Ember, Polymer), and companies (Facebook, Netflix, Airbnb). It has become such a foundation for JavaScript development that many people don\'t even know that it is being used. Even if you aren\'t using it yourself, it\'s highly likely your dependencies are using Babel.\\n\\n## Maintainers are People\\n\\nBabel has a huge influence on not just the future of the language itself but its community and ecosystem as well. But even with all of this responsibility, Babel is just a community driven project by a couple of volunteers.\\n\\nIt was only just this past year some of the team were able to meet for the first time in person:\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">The original <a href=\\"https://twitter.com/babeljs?ref_src=twsrc%5Etfw\\">@babeljs</a> team, at last together. From left to right: <a href=\\"https://twitter.com/left_pad?ref_src=twsrc%5Etfw\\">@left_pad</a>, <a href=\\"https://twitter.com/jamiebuilds?ref_src=twsrc%5Etfw\\">@jamiebuilds</a>, <a href=\\"https://twitter.com/sebmck?ref_src=twsrc%5Etfw\\">@sebmck</a>, yours truly, and <a href=\\"https://twitter.com/loganfsmyth?ref_src=twsrc%5Etfw\\">@loganfsmyth</a> <a href=\\"https://t.co/XfPj6OhZfA\\">pic.twitter.com/XfPj6OhZfA</a></p>&mdash; Amjad Masad (@amasad) <a href=\\"https://twitter.com/amasad/status/991903859999031298?ref_src=twsrc%5Etfw\\">May 3, 2018</a></blockquote>\\n\\nAs much as this is an announcement post, I\'d like to take the opportunity to remind everyone of the state of this project.\\n\\nI myself joined a few months before the 6.0 release, which had its own amount of controversy and backlash. Much of the reception there led to existing maintainer burnout (including [Sebastian](https://twitter.com/sebmck), Babel\'s creator) and a few of us that were left took on the reins.\\n\\nLike many maintainers, we accidentally stumbled into the role. Many of us didn\'t have any formal training into how compilers worked or how to maintain an open source project. Ironically, I even purposely avoided majoring in Computer Science in college because I didn\'t want to take classes on compilers or anything low level because it seemed uninteresting and difficult. Yet I found myself drawn to tooling, linters, Babel, and JavaScript as a language.\\n\\nI\'d like to encourage everyone to look into the open source projects that you depend on and to support them (both with time and monetary support if possible).\\n\\nMany maintainers aren\'t inherently experts in the things they work on; and there is much to be accomplished from just starting the work first. You will come in with both curiosity and humility, both of which are great attributes to have as a maintainer. My desire is a hope for the vision of the project versus just all of us [doing \\"tasks\\"](https://twitter.com/TheLarkInn/status/990790109799870469).\\n\\nBabel isn\'t a company, or an open source team at a major company like Facebook. There\'s only a handful of [volunteers](https://babeljs.io/team) working on Babel, and it\'s only been a few months since I took the leap to [leave my job](https://twitter.com/left_pad/status/969793227862790144) and be the only one so far to work on open source full time. But people can come and go, have lives outside of this \\"hobby\\", raise families, move on to different things, switch jobs or are looking for jobs, etc. Are we collectively doing what we can to sustain the things that are so fundamental to how we work, or are we going to allow the foundations to slowly crumble? How do we keep open source welcoming and inclusive but with clear boundaries? Can we learn from the [experiences of other maintainers](https://github.com/nayafia/awesome-maintainers)?\\n\\nAlthough Open Source has clearly taken over software, can we really consider it to be in a healthy state without taking into account the [people](https://nolanlawson.com/2017/03/05/what-it-feels-like-to-be-an-open-source-maintainer/) behind it?\\n\\n## #BabelSponsorsEverything\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Tips 4 <a href=\\"https://twitter.com/babeljs?ref_src=twsrc%5Etfw\\">@babeljs</a> at <a href=\\"https://twitter.com/ReactRally?ref_src=twsrc%5Etfw\\">@ReactRally</a> <a href=\\"https://twitter.com/hashtag/BabelSponsorsEverything?src=hash&amp;ref_src=twsrc%5Etfw\\">#BabelSponsorsEverything</a> <a href=\\"https://t.co/WCxefMOC8V\\">pic.twitter.com/WCxefMOC8V</a></p>&mdash; Harry Wolff (@hswolff) <a href=\\"https://twitter.com/hswolff/status/1030557108830273536?ref_src=twsrc%5Etfw\\">August 17, 2018</a></blockquote>\\n<script async src=\\"https://platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>\\n\\nOpen Source sustainability feels like giving out an offering basket at the moment. It\'s not difficult to state the value that projects provide to the thousands of people and companies using open source, but yet we don\'t see that value being shown to the few that are willing to put in the work. There can be so many [ways to support](https://github.com/nayafia/lemonade-stand) open source and yet not all approaches work for each project or people.\\n\\n---\\n\\nNow let\'s go to the changes!!\\n\\n## Major Breaking Changes\\n\\n> We are documenting these in our [Migration Guide](http://babeljs.io/docs/en/next/v7-migration). Many of these changes can be done automatically with our new [`babel-upgrade`](https://github.com/babel/babel-upgrade) tool, or can be added in the future.\\n\\n- Drop support for un-maintained Node versions: 0.10, 0.12, 4, 5 ([details](http://babeljs.io/blog/2017/09/12/planning-for-7.0#drop-support-for-unmaintained-node-versions-010-012-5-4315-https-githubcom-babel-babel-issues-4315))\\n- Move us to the `@babel` namespace by switching to using \\"scoped\\" packages ([details](http://babeljs.io/blog/2017/12/27/nearing-the-7.0-release#renames-scoped-packages-babel-x)). This helps differentiate official packages, so `babel-core` becomes `@babel/core` (and no squatting)\\n- Remove (and stop publishing) any yearly presets (`preset-es2015`, etc) ([details](http://babeljs.io/blog/2017/12/27/nearing-the-7.0-release#deprecated-yearly-presets-eg-babel-preset-es20xx)). [`@babel/preset-env`](https://babeljs.io/docs/en/next/babel-preset-env.html) replaces the need for these as it includes all yearly additions as well as the ability to target a specific set of browsers\\n- Also drop the [\\"Stage\\"](https://tc39.github.io/process-document/) presets (`@babel/preset-stage-0`, etc) in favor of opting into individual proposals. Similarly remove proposals from `@babel/polyfill` by default ([details](https://github.com/babel/babel/pull/8440)). Please consider reading the whole [post](https://babeljs.io/blog/2018/07/27/removing-babels-stage-presets) on this for more explanation.\\n- Some packages have renames: any TC39 proposal plugin will now be `-proposal` instead of `-transform` ([details](http://babeljs.io/blog/2017/12/27/nearing-the-7.0-release#renames-proposal)). So `@babel/plugin-transform-class-properties` becomes `@babel/plugin-proposal-class-properties`.\\n- Introduce a `peerDependency` on `@babel/core` for certain user-facing packages (e.g. `babel-loader`, `@babel/cli`, etc) ([details](http://babeljs.io/blog/2017/12/27/nearing-the-7.0-release#peer-dependencies-integrations))\\n\\n## `babel-upgrade`\\n\\n[`babel-upgrade`](https://github.com/babel/babel-upgrade) is a new tool we\'ve started that tries to automatically make upgrade changes: currently with dependencies in `package.json` and `.babelrc` config.\\n\\nWe recommend running it directly on a git repo with `npx babel-upgrade`, or you can install it globally with `npm i babel-upgrade -g`.\\n\\nIf you\'d like to modify the files, you can pass `--write` as well as `--install`.\\n\\n```sh title=\\"Shell\\"\\nnpx babel-upgrade --write --install\\n```\\n\\nPlease considering contributing by reporting issues or PRs to help everyone transition to Babel 7! A hope for the future is that we use this same tool for all future breaking changes and create a bot to PR projects to update.\\n\\n## JavaScript Config Files\\n\\nWe are introducing [`babel.config.js`](https://babeljs.io/docs/en/next/babelconfigjs.html). It isn\'t a requirement or even a replacement for `.babelrc`, but having this may be useful in *certain cases*.\\n\\n`*.js` configuration files are fairly common in the JavaScript ecosystem. ESLint and Webpack both allow for `.eslintrc.js` and `webpack.config.js` configuration files, respectively.\\n\\nBelow is the case of only compiling with a plugin in \\"production\\" (you can do this already with the `\\"env\\"` option in a `.babelrc` file):\\n\\n```js title=\\"JavaScript\\"\\nvar env = process.env.NODE_ENV;\\nmodule.exports = {\\n  plugins: [\\n    env === \\"production\\" && \\"babel-plugin-that-is-cool\\"\\n  ].filter(Boolean)\\n};\\n```\\n\\n`babel.config.js` has a different config resolution than a `.babelrc`. It will always resolve the config from that file versus originally when Babel would do a lookup from each file upward until it found a config. This makes it possible to take advantage of the next feature posted below, `overrides`.\\n\\n## Selective Configuration with `overrides`\\n\\nRecently, I published a [post](https://babeljs.io/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages) with thoughts on both publishing ES2015+ packages and also consuming/compiling them.\\n\\nThere\'s a [section](https://babeljs.io/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages#selective-compilation-with-overrides) that goes into using a new key in Babel\'s config called `overrides` which allows you to specify different configs per glob.\\n\\n```js title=\\"JavaScript\\"\\nmodule.exports = {\\n  presets: [\\n    // default config...\\n  ],\\n  overrides: [{\\n    test: [\\"./node_modules\\"],\\n    presets: [\\n      // config for node_modules\\n    ],\\n  }, {\\n    test: [\\"./tests\\"],\\n    presets: [\\n      // config for tests\\n    ],\\n  }]\\n};\\n```\\n\\nThis allows an application that requires different compilation configs for its tests, client code, and server code to skip needing to create a new `.babelrc` file per folder.\\n\\n## Speed \ud83c\udfce\\n\\nBabel itself is [faster](https://twitter.com/left_pad/status/927554660508028929) so it should take less time to build! We\'ve made a lot of changes to optimize the code as well as [accept](https://twitter.com/bmeurer/status/924346958810107904) [patches](https://twitter.com/rauchg/status/924349334346276864) from the [v8](https://twitter.com/v8js) team. We\'re glad to be a part of the [Web Tooling Benchmark](https://github.com/v8/web-tooling-benchmark) alongside many other great JavaScript tools.\\n\\n### Output Options\\n\\nBabel has supported [preset and plugin options](https://babeljs.io/docs/en/next/plugins#plugin-options) for some time now. To recap you can wrap the plugin in an array and pass an options object to the plugin:\\n\\n```diff\\n{\\n  \\"plugins\\": [\\n-   \\"pluginA\\",\\n+   [\\"pluginA\\", {\\n+     // options here\\n+   }],\\n  ]\\n}\\n```\\n\\nWe\'ve made some changes to the `loose` option of some plugins and added some new options for others! Note by using these options you are opting into non-spec compliant behavior and should know what you are doing; this can become an issue when you switch off of compiling to use the syntax natively. These kinds of options are best used in a library, if at all.\\n\\n- For classes, `class A {}` will now not include the `classCallCheck` helper.\\n\\n```js title=\\"JavaScript\\"\\nclass A {}\\n```\\n\\n```diff\\nvar A = function A() {\\n-  _classCallCheck(this, A);\\n};\\n```\\n\\n- There is a new option if every use of a `for-of` loop is just an array: `[\\"transform-for-of\\", { \\"assumeArray\\": true }]`\\n\\n```js title=\\"JavaScript\\"\\nlet elm;\\nfor (elm of array) {\\n  console.log(elm);\\n}\\n```\\n\\n```js title=\\"JavaScript\\"\\nlet elm;\\n\\nfor (let _i = 0, _array = array; _i < _array.length; _i++) {\\n  elm = _array[_i];\\n  console.log(elm);\\n}\\n```\\n\\n- We exclude the `transform-typeof-symbol` plugin in `loose` mode for `preset-env` [#6831](https://github.com/babel/babel/pull/6831)\\n\\nWe\'ve found a lot of libraries doing this already, so we decided to do this by default.\\n\\nNote that the default behavior is to be as spec compliant as possible so that switching off of Babel or using `preset-env` is seamless vs. allowing smaller output just to save bytes (there\'s a tradeoff there that each project can make). We plan to work on better docs and tooling to make that easier.\\n\\n### \\"Pure\\" Annotation Support\\n\\nAfter [#6209](https://github.com/babel/babel/pull/6209), transpiled ES6 classes are annotated with a ``/*#__PURE__*/`` comment that allows gives a hint to minifiers like [`Uglify`](https://github.com/mishoo/UglifyJS2) and [`babel-minify`](https://github.com/babel/minify) for dead code elimination. These annotations are added to other helper functions as well.\\n\\n```js title=\\"JavaScript\\"\\nclass C {\\n  m() {}\\n}\\n```\\n\\n```js title=\\"JavaScript\\"\\nvar C =\\n/*#__PURE__*/\\nfunction () {\\n  // ...\\n}();\\n```\\n\\nThere might be more opportunities for minifier hints and optimizations, let us know!\\n\\n## Syntax\\n\\n### [TC39 Proposals](https://github.com/tc39/proposals) Support\\n\\nI\'d like to re-iterate that [we\'ve removed the Stage presets](https://babeljs.io/blog/2018/07/27/removing-babels-stage-presets) in favor of a policy of asking users to explicitly opt-in to proposals < Stage 4.\\n\\nThe concern is that we are automatically opting people into syntax that is not fixed or done with the expectation that it will not change. But this is not the case, especially for proposals that are Stage 0 or 1. This [post](https://babeljs.io/blog/2018/07/19/whats-happening-with-the-pipeline-proposal) explains a bit on the kind of thinking behind newer ideas.\\n\\nHere\'s a small listing of some of the new syntax Babel supports (keep in mind this feature set is a moving target that could be added/removed/stalled) and which ones have been added in v7:\\n\\n- ES2018: [Object Rest Spread](https://babeljs.io/docs/en/babel-plugin-proposal-object-rest-spread) (`var a = { b, ...c }`)\\n- ES2018 (new): [Unicode Property Regex](https://babeljs.io/docs/en/babel-plugin-proposal-unicode-property-regex)\\n- ES2018 (new): [JSON Superset](https://babeljs.io/docs/en/babel-plugin-proposal-json-strings)\\n- ES2015 (new): [`new.target`](https://babeljs.io/docs/en/babel-plugin-transform-new-target)\\n- Stage 3 (new): [Class Private Instance Fields](https://babeljs.io/docs/en/babel-plugin-proposal-class-properties) (`class A { #b = 2 }`)\\n- Stage 3 (WIP): [Static Class Fields, Private Static Methods](https://github.com/babel/babel/issues/8052) (`class A { static #a() {} }`)\\n- Stage 3 (new): [Optional Catch Binding](https://babeljs.io/docs/en/babel-plugin-proposal-optional-catch-binding) `try { throw 0 } catch { do() }`\\n- Stage 3 (new): [BigInt](https://babeljs.io/docs/en/babel-plugin-syntax-bigint) (syntax only)\\n- Stage 3: [Dynamic Import](https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import) (`import(\\"a\\")`)\\n- Stage 2 (new): [`import.meta`](https://babeljs.io/docs/en/babel-plugin-syntax-import-meta) (syntax only) (`import.meta.url`)\\n- Stage 2 (new): [Numeric Separators](https://babeljs.io/docs/en/babel-plugin-proposal-numeric-separator) (`1_000`)\\n- Stage 2 (new): [`function.sent`](https://babeljs.io/docs/en/babel-plugin-proposal-function-sent)\\n- Stage 2: [`export-namespace-from`](https://babeljs.io/docs/en/babel-plugin-proposal-export-namespace-from) (`export * as ns from \'mod\'`), split from `export-extensions`\\n- Stage 2: Decorators. Check below for an update on our progress!\\n- Stage 1: [`export-default-from`](https://babeljs.io/docs/en/babel-plugin-proposal-export-default-from) (`export v from \'mod\'`), split from `export-extensions`\\n- Stage 1 (new): [Optional Chaining](https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining) (`a?.b`)\\n- Stage 1 (new): [Logical Assignment Operators](https://babeljs.io/docs/en/babel-plugin-proposal-logical-assignment-operators) (`a &&= b; a ||= b`)\\n- Stage 1 (new): [Nullish Coalescing Operator](https://babeljs.io/docs/en/babel-plugin-proposal-nullish-coalescing-operator) (`a ?? b`)\\n- Stage 1 (new): [Pipeline Operator](https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator) (`a |> b`)\\n- Stage 1 (new): [Throw Expressions](https://babeljs.io/docs/en/babel-plugin-proposal-throw-expressions) (`() => throw new Error(\\"a\\")`)\\n\\n> It\'s hard for anyone to keep track of all the proposals, so we attempt to do that at [babel/proposals](https://github.com/babel/proposals/).\\n\\n### TypeScript Support (`@babel/preset-typescript`)\\n\\nWe worked with the [TypeScript](https://github.com/Microsoft/TypeScript) team on getting Babel to parse/transform type syntax with `@babel/preset-typescript`, similar to how we handle [Flow](https://flow.org/) with `@babel/preset-flow`.\\n\\n> For more details check out this [post](https://blogs.msdn.microsoft.com/typescript/2018/08/27/typescript-and-babel-7/) from the TypeScript team!\\n\\nBefore (with types):\\n\\n```typescript\\ninterface Person {\\n  firstName: string;\\n  lastName: string;\\n}\\n\\nfunction greeter(person : Person) {\\n  return \\"Hello, \\" + person.firstName + \\" \\" + person.lastName;\\n}\\n```\\n\\nAfter (types removed):\\n\\n```typescript\\nfunction greeter(person) {\\n  return \\"Hello, \\" + person.firstName + \\" \\" + person.lastName;\\n}\\n```\\n\\nBoth Flow and Typescript are tools that enable JavaScript users to take advantage of gradual typing, and we\'d like to enable both in Babel. We plan on continuing to work closely with both of their respective teams at FB and Microsoft (in addition to the community-at-large) to maintain compatibility and support new features.\\n\\n> This integration is fairly new, so it\'s possible some syntax isn\'t supported fully. We\'d appreciate your help in [reporting issues and maybe sending a PR](https://github.com/babel/babel/labels/area:%20typescript?page=2&q=is%3Aopen+label%3A%22area%3A+typescript%22)!\\n\\n### JSX Fragment Support (`<>`)\\n\\nAs mentioned in the [React Blog](https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html), JSX Fragment support has been available as of `beta.31`.\\n\\n```jsx title=\\"JSX\\"\\nrender() {\\n  return (\\n    <>\\n      <ChildA />\\n      <ChildB />\\n    </>\\n  );\\n}\\n\\n// output \ud83d\udc47\\n\\nrender() {\\n  return React.createElement(\\n    React.Fragment,\\n    null,\\n    React.createElement(ChildA, null),\\n    React.createElement(ChildB, null)\\n  );\\n}\\n```\\n\\n## Babel Helpers Changes\\n\\n> The [babel-upgrade PR](https://github.com/babel/babel-upgrade/pull/71) is in progress\\n\\n`@babel/runtime` has been split up into `@babel/runtime` and `@babel/runtime-corejs2` ([PR](https://github.com/babel/babel/pull/8266)). The former only contains Babel\'s helper functions and the latter contains that as well as any polyfill functions (e.g. `Symbol`, `Promise`).\\n\\nBabel may need to inject certain functions into the code that can re-used. We just call these \\"helper functions\\" just like functions that are shared between modules.\\n\\nAn example of this is with compiling a `class` (without `loose` mode on):\\n\\nThe specification says that you need to call a class with `new Person()` but if it\'s compiled to a function you could technically just do `Person()` so we include a runtime check for this.\\n\\n```js title=\\"JavaScript\\"\\nclass Person {}\\n```\\n\\n```js title=\\"JavaScript\\"\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nvar Person = function Person() {\\n  _classCallCheck(this, Person);\\n};\\n```\\n\\nWith `@babel/plugin-transform-runtime` and `@babel/runtime` (as a dependency), Babel can extract the individual functions and just require the modular functions to enable smaller output like so:\\n\\n```js title=\\"JavaScript\\"\\nvar _classCallCheck = require(\\"@babel/runtime/helpers/classCallCheck\\");\\n\\nvar Person = function Person() {\\n  _classCallCheck(this, Person);\\n};\\n```\\n\\nThe same can be done with `external-helpers` and `rollup-plugin-babel`. We are looking into seeing if we can automatically do this in the future. Look out for a standalone post on Babel\'s helpers soon.\\n\\n## Automatic Polyfilling (experimental)\\n\\nPolyfills are necessary for enabling features like `Promise`, `Symbol` in environments that do not have support for them. This is important when differentiating between what Babel does as a compiler (transforms *syntax*) vs. a polyfill (implements built-in functions/objects).\\n\\nIt\'s easy enough to just import something that covers everything like `@babel/polyfill`:\\n\\n```js title=\\"JavaScript\\"\\nimport \\"@babel/polyfill\\";\\n```\\n\\nBut it includes the whole polyfill, and you may not need to import everything if browsers support it already. This is the same problem that `@babel/preset-env` tries to solve with syntax, so we apply it here with polyfills. The option `useBuiltins: \\"entry\\"` does this by splitting the original import into only the imports that are necessary.\\n\\nBut we can do better by only importing the polyfills that are used in the codebase. The option `\\"useBuiltIns: \\"usage\\"` is our first attempt at enabling something like that ([docs](https://babeljs.io/docs/en/babel-preset-env#usebuiltins)).\\n\\nIt will run through each file and inject an import at the top of each file if that built-in is \\"used\\" in the code. For example:\\n\\n```js title=\\"JavaScript\\"\\nimport \\"core-js/modules/es6.promise\\";\\nvar a = new Promise();\\n```\\n\\nThe inference isn\'t perfect so there may be false positives.\\n\\n```js title=\\"JavaScript\\"\\nimport \\"core-js/modules/es7.array.includes\\";\\na.includes // assume a is an []\\n```\\n\\nOther ideas in this space are to use [polyfill.io](https://polyfill.io) if you are ok with relying on a service (or read how [Kent C. Dodds](https://twitter.com/kentcdodds) used it to [build a hosted service at PayPal](https://blog.kentcdodds.com/polyfill-as-needed-with-polyfill-service-35f0ff306a26)).\\n\\n## Misc\\n\\n### Babel Macros \ud83c\udfa3\\n\\nOne of the best parts of Babel is the pluggability of the tool. Over the years, Babel went from being just a \\"6to5\\" compiler into a code transform _platform_, enabling some fantastic optimizations for both user and developer experience. [Tons of Babel plugins have been developed](https://www.npmjs.com/search?q=keywords%3Ababel%20plugin) for specific libraries and use cases to improve performance and capabilities of library APIs that would not be possible otherwise (some \\"libraries\\" are completely transpiled away resulting in no runtime at all).\\n\\nUnfortunately, adding these plugins to your codebase requires changing configuration (which some toolkits like [create-react-app](https://github.com/facebook/create-react-app) don\'t allow) and it adds complexity to your code because developers have to know what Babel plugins are operating on a file to know what will happen to the code they\'re writing. These problems have been solved by [babel-plugin-macros](https://github.com/kentcdodds/babel-plugin-macros) by [Kent C. Dodds](https://twitter.com/kentcdodds)!\\n\\nOnce `babel-plugin-macros` has been installed and [added to your config](https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/user.md) (it\'s included in `create-react-app` v2), you don\'t need to bother with your configuration to use any macros. In addition, it\'s even easier to [write your own custom transforms](https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md) for use cases specific to your app or one part of your code.\\n\\nLearn more about `babel-plugin-macros` in our original post [\\"Zero-config code transformation with babel-plugin-macros\\"](https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros).\\n\\n### Module Targeting\\n\\nBabel has always attempted to balance the size impact of transformations and capabilities they provide to JavaScript authors. In Babel 7, it has become much easier to configure Babel to support the growing popularity of the [module/nomodule pattern](https://github.com/kristoferbaxter/preset-env-modules).\\n\\nNotably, several CLI tools for popular web frameworks ([1](https://cli.vuejs.org/guide/browser-compatibility.html#modern-mode), [2](https://github.com/developit/preact-cli/pull/583)) are already leveraging support leading to a roughly 20% reduction in shipped JavaScript to consumers of applications transpiled by Babel.\\n\\n### Caller Metadata and Better Defaults\\n\\nWe\'ve added a [`caller` option](https://github.com/babel/babel/pull/8485) to `@babel/core` so our tooling can pass metadata to presets/plugins. For example: `babel-loader` can add something [like this](https://github.com/babel/babel-loader/pull/660) so that `preset-env` can automatically disable the module transformation (same with `rollup`:\\n\\n```js title=\\"JavaScript\\"\\nbabel.transform(\\"code;\\", {\\n  filename,\\n  presets: [\\"@babel/preset-env\\"],\\n  caller: {\\n    name: \\"babel-loader\\",\\n    supportsStaticESM: true,\\n  },\\n});\\n```\\n\\nThis is exciting since it enables a way for tooling to provide better defaults and less configuration! For the case of webpack/rollup: we can automatically defer to using their module transformation instead of Babel\'s (same with `import(\\"a\\")`). Look out for more tooling to take advantage of this in the future!\\n\\n### `class C extends HTMLElement {}`\\n\\n> One of our oldest issues gets it\'s own heading ([details](https://github.com/babel/babel/pull/7020))\\n\\nBabel has always had the caveat where it could not support extending native built-ins (`Array`, `Error`, etc) and now it can! We\'ve gotten a lot of issues about this; \ud83c\udf89 you should celebrate like [Andrea](https://twitter.com/WebReflection/status/940724280035303430)!\\n\\nThis change was made to the class plugin so it should be automatically enabled if you are using `preset-env`.\\n\\n### Website Changes \ud83c\udf0f\\n\\nWe\'ve moved our site from [Jekyll](https://jekyllrb.com/) to [Docusaurus](https://docusaurus.io/)!\\n\\nWe\'re still in the process of setting up [translations](https://github.com/babel/website/issues/1619) with [Crowdin](https://crowdin.com/project/babeljs), and with Babel 7 out, we will be in a better place to start that process.\\n\\n#### REPL\\n\\n![](https://i.imgur.com/j0qOllj.png)\\n\\nWe\'ve rewritten the [REPL](https://babeljs.io/repl) as a [React Component](https://github.com/babel/website/tree/main/js/repl), and have been working with Ives on integrating better with [CodeSandbox](https://codesandbox.io/). This allows you to install any plugin or preset from [npm](https://www.npmjs.com/search?q=babel-plugin) in the REPL as well as get any updates that [CodeSandbox](https://github.com/CompuIves/codesandbox-client) gets.\\n\\nWe\'re participating in [Rails Girls Summer of Code](https://railsgirlssummerofcode.org/) again! This time, [Gyujin](https://twitter.com/MarinaGJCho) and [Sujin](https://twitter.com/sujinleeme) have been working hard to integrate [Boopathi\'s](https://twitter.com/heisenbugger) [babel-time-travel](https://github.com/babel/babel-time-travel) into the REPL which you can already test now!\\n\\nThere are so many opportunities here to get involved to make Babel, [ASTs](https://en.wikipedia.org/wiki/AST), and other tools work better!\\n\\n### We Have A Song \ud83c\udfb6\\n\\n> Hallelujah\u2014In Praise of Babel\\n\\nOne day, [Angus](https://twitter.com/angustweets) graciously [imparted](https://twitter.com/angustweets/status/938817321652576256) to us a [song](https://medium.com/@angustweets/hallelujah-in-praise-of-babel-977020010fad) which I thought was amazing, so why not make it our \\"official\\" song? And [Shawn](https://twitter.com/swyx) made a brilliant cover [here](https://www.youtube.com/watch?v=40abpedBKK8).\\n\\nYou can find it in our repo at [SONG.md](https://github.com/babel/babel/blob/main/SONG.md). We hope to see other projects follow up on this!\\n\\n## What\'s Next?\\n\\n- Babel is inherently tied to what it compiles: JavaScript. As long as there are new additions to propose/work on there is work to be done there. That includes the time/effort to implement and maintain the syntax even before it becomes \\"stable\\". We care about the whole process: the upgrade path, education of new features, teaching of standards/language design, ease of use, and integration with other projects.\\n  - Related: we are almost finished implementing [the new decorators proposal](https://github.com/babel/babel/pull/7976) in Babel thanks to [Nicol\xf2](https://twitter.com/NicoloRibaudo). It has been a long journey (it has taken [more than one year](https://github.com/babel/babel/pull/6107#issue-135801160)!) because the new proposal is completely different and much more powerful than the old one, but it is almost there \ud83c\udf89. You can expect it to be released in one of the next minor versions, alongside with a blog post which will explain the changes in detail.\\n- [Boopathi](https://twitter.com/heisenbugger) has been diligently maintaining [`babel-minify`](https://github.com/babel/minify), so we\'ll being doing a 1.0 for that next!\\n- There are a lot of new features in the works: plugin ordering, better validation/errors, speed, re-thinking loose/spec options, caching, using Babel asynchronously, building against itself from CI, smoke tests, running test262. Check out this [roadmap](http://babeljs.io/docs/en/roadmap) doc for some more possible ideas!\\n\\nWe have no secret plans: we\'re trying the best we can with what we have to serve this community.\\n\\n## Open Source is a Mirror\\n\\nI\'d love if we\'d have the time and resources to accomplish all of these ideas and to do it well. But as we\'ve shown with this current release, things take much longer than expected!\\n\\nWhy do these releases take so long anyway? Is it from the feature creep, both from ourselves and our users? Was it because we don\'t understand how to prioritize among all the possible things to add or fix? Deciding to fix low-hanging fruit vs. fundamental issues until the end? Or \\"distractions\\" from helping others on GitHub, Slack, Twitter? Are we just bad are estimating our time, understanding the complexities of these issues, overcommitting as volunteers?\\n\\nOr are we just setting too high of an expectation on ourselves, or feel so pressured by others to perform and fit to their needs at the harm of ourselves? I can only describe it as dread when seeing a message from someone online wondering why something hasn\'t been released while another asks why this bug isn\'t fixed yet. I want to just rush it out and be done with it but I also have a desire to take this seriously.\\n\\nI\'ve tried to [express](https://twitter.com/left_pad/status/1032348719931432961) some of these thoughts and struggles in my talk last week at React Rally: [Through the (Open Source) Looking Glass](https://www.youtube.com/watch?v=h0sfFX7WH1c), which I hope you can take an opportunity to listen to. The question I ask myself: What can I do about the inevitable cycle of maintainer burnout, constant anxiety, and unrealistic expectations?\\n\\nLike much of life, the things we do reflect our character and show us how we really are. The actions we take can in themselves can change us, for better or for worse. If we are to take our work seriously, we should keep one another accountable in these habits that seem so embedded in our culture: of instant gratification, success in terms of metrics, entitlement vs. gratitude, and pride in overworking.\\n\\nBut despite all of it, working towards this release has been so worth it.\\n\\n## Thanks\\n\\nThis is truly a really exciting release, not only through looking back at what we\'ve accomplished and enabled, but much more just knowing how much time and heart was put into making it happen over the last year. It\'s hard to believe the opportunities and experiences that have happened along the way: interacting with and helping companies from all over the world, finding friends in almost any city I\'ve visited, and speaking honestly about the unbelievable journey this group has taken up together.\\n\\nPersonally, I\'ve never really put so much of my mental energy into anything of this magnitude and I\'d like to thank so many people for lifting us up along the way. Shoutouts in particular to [Logan Smyth](https://twitter.com/loganfsmyth) who has spent countless time to change so much of how the core works and always takes time to be so helpful in our Slack while also working freelance and [Brian Ng](https://twitter.com/existentialism) who has stepped up in such a big way to continue to maintain Babel as well as review all my blog posts and talks. [Daniel Tschinder](https://twitter.com/TschinderDaniel), [Sven Sauleau](https://twitter.com/svensauleau), [Nicol\xf2 Ribaudo](https://twitter.com/NicoloRibaudo), and [Justin Ridgewell](https://github.com/jridgewell) have all just been instrumental in making this release possible and enjoyable to work on.\\n\\nShoutout to all the many community members on Slack, Twitter, and across all the projects on GitHub that also have to understand what we are doing for their own users. I\'d like to give a huge thanks to my friends at [Behance](https://www.behance.net/)/[Adobe](https://www.adobe.com/) for sponsoring me for almost a year to work on Babel half time before deciding to go full-time (as well as helping test Babel 7 in production throughout the whole time I was there). Big thanks to all of our [sponsors](https://babeljs.io/#sponsors) for our Open Collective, especially [Trivago](https://babeljs.io/blog/2018/07/16/announcing-babels-new-partnership-with-trivago) and [Handshake](https://handshake.org/). And thanks to our friends and family for all their love and support.\\n\\nWe\'re all pretty tired at this point, but it\'s truly been an honor and privilege to serve in this way, so we hope you appreciate the release!\\n\\n<script async src=\\"https://platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>"},{"id":"/2018/07/27/removing-babels-stage-presets","metadata":{"permalink":"/babel-website/blog/2018/07/27/removing-babels-stage-presets","source":"@site/blog/2018-07-27-removing-babels-stage-presets.md","title":"Removing Babel\'s Stage Presets","description":"Moving forward with v7, we\'ve decided it\'s best to stop publishing the Stage presets in Babel (e.g. @babel/preset-stage-0).","date":"2018-07-27T12:00:00.000Z","formattedDate":"July 27, 2018","tags":[],"readingTime":11.73,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"Removing Babel\'s Stage Presets","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"\xa0 2018-07-27 12:00:00","categories":"announcements","share_text":"Removing Babel\'s Stage Presets"},"prevItem":{"title":"Babel 7 Released","permalink":"/babel-website/blog/2018/08/27/7.0.0"},"nextItem":{"title":"What\'s Happening With the Pipeline (|>) Proposal?","permalink":"/babel-website/blog/2018/07/19/whats-happening-with-the-pipeline-proposal"}},"content":"Moving forward with v7, we\'ve decided it\'s best to stop publishing the Stage presets in Babel (e.g. `@babel/preset-stage-0`).\\n\\nWe didn\'t make this decision lightly and wanted to show the context behind the interplay between TC39, Babel, and the community.\\n\\n\x3c!--truncate--\x3e\\n\\n## Some History\\n\\nA Babel preset is a sharable list of plugins.\\n\\nThe [official Babel Stage presets](https://babeljs.io/docs/en/next/presets) tracked the [TC39 Staging process](https://tc39.github.io/process-document/) for new [syntax proposals](https://github.com/tc39/proposals) in JavaScript.\\n\\nEach preset (ex. `stage-3`, `stage-2`, etc.) included all the plugins for that particular stage and the ones above it. For example, `stage-2` included `stage-3`, and so on.\\n\\n---\\n\\nThis allowed users who wanted to use experimental syntax to simply add the preset, instead of needing to configure/install each individual plugin.\\n\\nWe actually [added](https://github.com/babel/babel/pull/2649) the Stage presets shortly after Babel\'s v6 release (it was previously a config flag in v5). Shown below is an older example from Babel v6.\\n\\nIt was common to see this in a config:\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"presets\\": [\\"es2015\\", \\"react\\", \\"stage-0\\"]\\n}\\n```\\n\\nThe original source of [babel-preset-stage-0](https://unpkg.com/babel-preset-stage-0@6.0.14/index.js):\\n\\n```js title=\\"babel.config.js\\"\\nmodule.exports = {\\n  presets: [\\n    require(\\"babel-preset-stage-1\\")\\n  ],\\n  plugins: [\\n    require(\\"babel-plugin-transform-do-expressions\\"),\\n    require(\\"babel-plugin-transform-function-bind\\")\\n  ]\\n};\\n```\\n\\n## Problems\\n\\nThese presets were a convenient way to use what we all wanted: the new, shiny, \\"yet-to-be-determined\\" future of JavaScript.\\n\\nLooking back, it worked really well! (Maybe too well?)\\n\\n### Too Good a Job?\\n\\nLanguages like [CoffeeScript](https://coffeescript.org/) and tooling like [Traceur](https://github.com/google/traceur-compiler) helped establish the idea of compiling JavaScript. Babel made it even easier to both use new/future syntax and integrate with existing tooling. The expectations changed from skepticism and worry to completely embracing the experimental.\\n\\nWe probably wouldn\'t be where we are if not for the wide adoption of compilers such as Babel: it accelerated the usage (and teaching) of ES2015 to a much larger audience. The growth of React further fueled usage as its JSX syntax, class properties, and object rest/spread led to people knowing a bit more about these syntax proposals.\\n\\nBabel became a one-time setup for people, never to be thought of again. It became the underlying infrastructure, hidden behind other tools until there was a `SyntaxError`, dependency issues, or integration issues. Simply use `stage-0`.\\n\\nThis was awesome to see in some ways, as it meant that these ideas were being tested in the wild, even in production environments. However, it also meant that many companies, tools, and people would encounter some trouble if a proposal changed in a significant way (or even got dropped altogether).\\n\\n### Back and Forth\\n\\nOver the years, we\'ve raised many issues to discuss what to do with the Stage presets in [#4914](https://github.com/babel/babel/issues/4914), [#4955](https://github.com/babel/babel/issues/4955), [#7770](https://github.com/babel/babel/issues/7770). I even wrote in an older post about Babel 7.0 that said we *weren\'t* [removing them](https://babeljs.io/blog/2017/12/27/nearing-the-7.0-release) \ud83d\ude05.\\n\\nHowever, we found that keeping the Stage presets would lead to issues even for Babel itself:\\n\\n- It was a common issue to ask something like: [\\"What presets(s) are needed to use async functions?\\"](https://github.com/babel/babel/issues/2948). It would be unclear for people to know exactly what `stage-0` meant, and few people would look at its `package.json` or source.\\n- Removing a proposal plugin in Stage 3 (once it moves to Stage 4) is actually a breaking change. This issue is exacerbated when you are trying to use `@babel/preset-env` to not compile a natively supported proposal.\\n\\n### \\"ES7 Decorators\\"\\n\\nPart of the issue is precisely around naming things, and as we often hear, naming things is hard.\\n\\nThere were a lot of names for ES6 itself: Harmony, ES Next, ES6, ES2015. When people hear about new ideas it makes sense to just pick the latest number and attach the name to it.\\n\\nTherefore, it\'s easy to [search](https://twitter.com/search?q=es7%20class%20properties&src=typd) [around](https://twitter.com/search?q=es7%20decorators&src=typd) for tweets/blog posts/talks that say \\"ES7 Decorators\\" and find that it\'s become the accustomed name for it.\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Your reminder that binding with :: is just an experimental proposal at stage 0 and might never become a part of JS. Don&#39;t call it &quot;ES7&quot;.</p>&mdash; Dan Abramov (@dan_abramov) <a href=\\"https://twitter.com/dan_abramov/status/785082176610115584?ref_src=twsrc%5Etfw\\">October 9, 2016</a></blockquote>\\n\\nIt\'s completely understandable that this happens without realizing it, but continuing to do so sets different expectations for how the language progresses. It\'s nothing to feel guilty about \u2014 we learn as a community and remind one another of how JavaScript works.\\n\\n[Jay Phelps](https://twitter.com/_jayphelps/status/779770321003962369) wrote a nice [article](https://medium.com/@jayphelps/please-stop-referring-to-proposed-javascript-features-as-es7-cad29f9dcc4b) about this subject. He explains it would be best to call them by the \\"Stage\\" they are currently at: \\"Stage 2 Decorators\\", or just simply the \\"Decorators Proposal\\".\\n\\nThe reasoning is that saying \\"ES7 Decorators\\" assumes that Decorators is expected to be in ES7. I mentioned this in my [last post regarding compiling node_modules](https://babeljs.io/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages#staging-process), but being in a particular Stage doesn\'t guarantee much: a proposal can stall, move backward, or get removed entirely.\\n\\nWe wanted to highlight this fact when we decided to [change the names](https://babeljs.io/docs/en/next/v7-migration#switch-to-proposal-for-tc39-proposals-blog-2017-12-27-nearing-the-70-releasehtml-renames-proposal) of the proposal plugins from `@babel/plugin-transform-` to `@babel/plugin-proposal-`.\\n\\n### BabelScript\\n\\nHaving presets for proposals so early in the process may imply that these proposals are guaranteed to move forward or have a stable implementation.\\n\\n[TC39](https://tc39.github.io/process-document/) urges caution when using Stage 2-or below proposals, as it might result in inadvertent pressure from the community to keep the implementation as-is instead of improving it for fear of breaking existing code or ecosystem fragmentation (e.g. using a different symbol like `#` instead of `@` for decorators).\\n\\nPeople joke that developers who use Babel are using \\"BabelScript\\" instead of JavaScript, implying that somehow once a Babel plugin is made for a certain feature, that must mean it\u2019s \\"fixed\\" or officially part of the language already (which is not true). For some, the first thought for people when they see a new syntax/idea (Stage \\"-1\\") is whether there a Babel plugin for it.\\n\\n### Setting Expectations\\n\\nAfter compilers like Babel made it common practice for people to write ES2015, it was natural for developers to want to try out even newer and more experimental \\"features\\". The way this worked in Babel was to use the `stage` flag in previous versions or the `stage-x` presets.\\n\\nBeing the most convenient way of opting into any new feature, it quickly became the default for people when configuring Babel (even though in Babel v6 it moved to not doing anything by default, which caused lots of complaints).\\n\\nIt became common to see `\\"stage-0\\"` being used in libraries, boilerplates, talks, tweets, and slides.\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">&quot;Just say no&quot; to `babel?stage=0` in production.</p>&mdash; Ryan Florence (@ryanflorence) <a href=\\"https://twitter.com/ryanflorence/status/627154904302288897?ref_src=twsrc%5Etfw\\">July 31, 2015</a></blockquote>\\n\\nThere was a lot of good discussions even years ago, but it wasn\'t the easiest thing to navigate: we wouldn\'t want to penalize users who understood the tradeoffs by putting `console.warn`s when using it, and not having the option at all seemed unreasonable at the time.\\n\\nBlindly opting into Stage 0 (whether we had it by default) or people choosing to do so seems dangerous, but also never using any proposals is overly cautious. Ideally, everyone should able to make an informed decision about the kinds of features that seem reasonable to them and use them wisely, regardless of what stage they are in. [Mike Pennisi](https://twitter.com/jugglinmike) wrote [a great post](https://bocoup.com/blog/javascript-developers-watch-your-language) about these concerns.\\n\\nIt isn\'t our intention to threaten, rush, or force specific things into the ecosystem or JavaScript but to faithfully maintain the implementation/discussions around new ideas.\\n\\n## Hesitations\\n\\n### Other Considerations\\n\\nWe also could have tried to:\\n\\n- [Rename the presets](https://github.com/babel/babel/issues/4914) to better signify the stability level (doesn\'t solve the versioning problem)\\n- Better versioning strategies: independently version the presets and update them immediately when needed, maybe use `0.x`\\n- Warn/Error for old out-of-date versions of presets\\n\\nIn the end, people would still have to look up what proposals are at what Stage to know which ones to use if we kept the Stages in.\\n\\n### Why Now?\\n\\nWhy not remove it earlier? The Stage presets have been part of Babel for years, and there were concerns with adding more \\"complexity\\" to using Babel. A lot of tooling, documentation, articles, and knowledge were around the Stage presets. Earlier, we thought it was better to officially maintain the presets since someone else would (and will) inevitably create them.\\n\\nWe\'re trying to determine the right level of feedback: if it\'s only the committee that decides what goes into the language,  it may lead to well-specified features that are not needed, but if the community expects that in-progress, experimental proposals are considered stable or ok to use in production without consequence, then we\'ll have other issues. We all want to move forward and proceed with intention: not rushing, but not being too cautious. Babel is the right place to do that experimentation but knowing where the boundaries are is necessary.\\n\\nRemoving the presets would be considered a \\"feature\\" since it means someone would have to make an explicit decision to use each proposal, which is reasonable for any proposal since they all have varying levels of instability, usefulness, and complexity.\\n\\nWe fully expect some initial [backlash](https://news.ycombinator.com/item?id=11371906) from this, but ultimately feel that removing the Stage presets is a better decision for us all in the long run. However, removing previous defaults or removing the Stage presets doesn\'t mean we don\'t care about ease of use, new users, or documentation. We work with what we can to keep the project stable, provide tooling to make things better, and document what we know.\\n\\n## Migrating\\n\\n> For a more automatic migration, we have updated [babel-upgrade](https://github.com/babel/babel-upgrade) to do this for you (you can run `npx babel-upgrade`).\\n\\nThe TL;DR is that we\'re removing the Stage presets. At some level, people will have to opt-in and know what kinds of proposals are being used instead of assuming what people should use, especially given the unstable nature of some of these proposals. If you use another preset or a toolchain, (e.g. [create-react-app](https://github.com/facebook/create-react-app)) it\'s possible this change doesn\'t affect you directly.\\n\\nWe have deprecated the Stage presets as of `7.0.0-beta.52`. If you don\'t want to change your config now, we would suggest you *pin* the versions to `beta.54` until you can upgrade; after `beta.54` we will throw an error with a message saying how to migrate. And check that all your versions are the same while in prerelease.\\n\\nAs an alternative, you are free to make your own preset that contains the same plugins and upgrade them as you please. In the future, we may want to work on a `babel-init` that can help you set up plugins interactively or update `babel-upgrade` itself to list and add the current Stage plugins. Maybe Babel should stay as a low-level tool and rely on other higher-level/framework tools like `create-react-app` to handle these choices for people.\\n\\n### Preventing Proposal Lock-In\\n\\n[James DiGioia](https://twitter.com/JamesDiGioia) wrote a [post](https://babeljs.io/blog/2018/07/19/whats-happening-with-the-pipeline-proposal) recently about the changes to using the pipeline operator (`|>`).\\n\\nThe main point in the post is that the proposal itself is in flux and has a few options to explore. Because we\'d like to implement all three of the current possibilities as Babel plugins for both spec feedback and user feedback, we believed the way the plugin is used should change as well. This a relatively new approach for TC39 and Babel!\\n\\nPreviously, we would add the proposal plugin to the config and that was it. Now, we remove the default behavior and ask users to opt into a flag that shows which proposal is chosen, and make it clear that there isn\'t a fixed (or even favored) option at the moment.\\n\\n```diff\\n{\\n  \\"plugins\\": [\\n-   \\"@babel/plugin-proposal-pipeline-operator\\"\\n+   [\\"@babel/plugin-proposal-pipeline-operator\\", { \\"proposal\\": \\"minimal\\" }]\\n  ]\\n}\\n```\\n\\nThis is something that we\'d like to continue to do moving forward as another indication that these proposals are open to change and feedback from all of us. The removal of the Stage presets makes this even easier as before we had to pass down these options even if you didn\'t use the syntax.\\n\\n### Ecosystem Maintenance Burden\\n\\nA language\'s \\"syntax budget\\" doesn\'t just apply to the complexity of the language itself but can extend down to the tooling. Each new syntax addition brings new [burden](http://jshint.com/blog/new-lang-features/) to the maintainers of other JavaScript projects.\\n\\nOnce new syntax is proposed, many things need updating: parsers (`babylon`), syntax highlighting (`language-babel`), linters (`babel-eslint`), test frameworks (`jest`/`ava`), formatters (`prettier`), code coverage (`istanbul`), minifiers (`babel-minify`), and more.\\n\\nThere have been many issues brought up on projects like `acorn`, `eslint`, `jshint`, `typescript`, and others to support Stage 0 proposals because they were in Babel. There aren\'t many projects that would adhere to a policy that required them to support any proposal since that would be extremely demanding to maintain. In many ways, it\'s surprising we even attempt to handle it in Babel itself given the constant updates and churn.\\n\\nWho is doing that work, and is it our responsibility to make sure everything works? Every one of those projects (mostly volunteers) is lacking in help in almost every aspect, and yet we continually get complaints about this across the board. How are we, as a community, to take responsibility for dealing with our infrastructure (not dissimilar to open source as a whole)?\\n\\nBabel has taken on the unusual burden of supporting these experimental features; at the same time, it\'s reasonable that other projects take a more conservative policy. If you\'d like to see new language features supported across the ecosystem, [contribute to TC39](https://github.com/tc39/ecma262/blob/master/CONTRIBUTING.md) and this project to bring these proposals to Stage 4.\\n\\n### The Future\\n\\nThe purpose of this project is to act as a part of the TC39 process: being a resource for both implementing newer (Stage 0-2) proposals and receiving feedback from users while also supporting older versions of JavaScript. We hope this post sheds more light on how we are trying, as best we can, to better align this project in the JavaScript ecosystem. We will be releasing a RC for v7 soon!\\n\\n---\\n\\nIf you appreciate this post and the work we\'re doing on Babel, you can support me on [Patreon](https://www.patreon.com/henryzhu), ask your company to sponsor us on [Open Collective](https://opencollective.com/babel), or better yet get your company involved with Babel as part of your work. We\'d appreciate the collective ownership.\\n\\nWith thanks to all the [reviewers](https://github.com/babel/website/pull/1735)! Feel free to give feedback on [Twitter](https://twitter.com/left_pad/status/1022877618348146693?s=20).\\n\\n<script async src=\\"https://platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>"},{"id":"/2018/07/19/whats-happening-with-the-pipeline-proposal","metadata":{"permalink":"/babel-website/blog/2018/07/19/whats-happening-with-the-pipeline-proposal","source":"@site/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md","title":"What\'s Happening With the Pipeline (|>) Proposal?","description":"With the release of babel@7.0.0-beta52, we introduced a new required configuration flag to @babel/plugin-proposal-pipeline-operator, a breaking change for the pipeline operator. To clear up any confusion, let\'s take a look at the pipeline proposal and why we needed to introduce this configuration option.","date":"2018-07-19T12:00:00.000Z","formattedDate":"July 19, 2018","tags":[],"readingTime":6.485,"hasTruncateMarker":true,"authors":[{"name":"James DiGioia","url":"https://twitter.com/JamesDiGioia"}],"frontMatter":{"layout":"post","title":"What\'s Happening With the Pipeline (|>) Proposal?","author":"James DiGioia","authorURL":"https://twitter.com/JamesDiGioia","date":"2018-07-19T12:00:00.000Z","categories":"announcements","share_text":"What\'s Happening With the Pipeline (|>) Proposal?"},"prevItem":{"title":"Removing Babel\'s Stage Presets","permalink":"/babel-website/blog/2018/07/27/removing-babels-stage-presets"},"nextItem":{"title":"Announcing Babel\'s New Partnership with trivago!","permalink":"/babel-website/blog/2018/07/16/announcing-babels-new-partnership-with-trivago"}},"content":"With the release of [babel@7.0.0-beta52](https://github.com/babel/babel/releases/tag/v7.0.0-beta.52), we introduced a new required configuration flag to `@babel/plugin-proposal-pipeline-operator`, a breaking change for the pipeline operator. To clear up any confusion, let\'s take a look at the pipeline proposal and why we needed to introduce this configuration option.\\n\\n\x3c!--truncate--\x3e\\n\\n## Current Status\\n\\nThe pipeline operator was originally [introduced](https://github.com/babel/babel/pull/3159) by [Gilbert Garza](https://github.com/gilbert), providing a clean syntax for \\"streamlining chained function calls in a readable, functional manner.\\" The pipeline operator has roots in a number of languages, including F#, Hack, Elm, Elixir, and others, but there were two major points of contention in introducing the new syntax to JavaScript:\\n\\n* Whether and how to introduce placeholders\\n* How to handle async / await in the pipeline\\n\\n### Placeholders\\n\\nThe first issue was the question of placeholders. This was first raised by [Kevin Smith](https://github.com/zenparsing) in [this issue](https://github.com/tc39/proposal-pipeline-operator/issues/84), where he suggested [Hack-style pipelining](https://docs.hhvm.com/hack/operators/pipe-operator). In Hack, a placeholder is required for every right-hand side of the pipeline, as in this example:\\n\\n```hack\\nnamespace Hack\\\\UserDocumentation\\\\Operators\\\\Pipe\\\\Examples\\\\MapFilterCountPiped;\\n\\nfunction piped_example(array<int> $arr): int {\\n  return $arr\\n    |> \\\\array_map($x ==> $x * $x, $$)\\n    |> \\\\array_filter($$, $x ==> $x % 2 == 0)\\n    |> \\\\count($$);\\n}\\n\\nvar_dump(piped_example(range(1, 10)));\\n```\\n\\nWe built on this concept, as a placeholder can easily be used in arbitrary expressions, with the placeholder representing the value returned from the previous step. This affords additional flexibility and power within a pipeline step.\\n\\nThe downside is the complexity involved in introducing a new token. The hash (`#`) is the current choice, and although this is still open to bikeshedding, any token would potentially have multiple meanings. The hash is also used by the [private fields proposal](https://github.com/tc39/proposal-class-fields#private-fields), and [all other options are in use in one form or another](https://github.com/tc39/proposal-partial-application/issues/21#issuecomment-361092565).\\n\\n### Async / Await\\n\\nThe initial introduction of the pipeline included this syntax for `await`:\\n\\n```js title=\\"JavaScript\\"\\nx |> await f\\n```\\n\\nwhich would desugar to\\n\\n```js title=\\"JavaScript\\"\\nawait f(x)\\n```\\n\\nUnfortunately, users may expect this alternative desugaring:\\n\\n```js title=\\"JavaScript\\"\\n(await f)(x)\\n```\\n\\nWhile there was pushback on the idea of including async handling in the pipeline at all, committee members expressed concern about a pipeline operator that didn\'t handle async/await. While there are ways to handle Promise-returning functions without explicit syntax, they are too cumbersome to be useful or require a helper function.\\n\\n## Proposed Solutions\\n\\nAs a result of these discussions, two proposals, along with a base minimal proposal, emerged to resolve them: F# Pipelines and Smart Pipelines. Let\'s go through how they resolve the problems posed above.\\n\\n### [Minimal Pipelines](https://github.com/tc39/proposal-pipeline-operator/)\\n\\nThis proposal covers the basic functionality of the pipeline operator. The minimal proposal bans await, so there\'s no async handling involved at all, and includes no placeholders. It matches the behavior of the babel plugin before we introduced the configuration and is the current specification in the pipeline operator proposal repository. It functions more as a straw man, to compare the benefits and tradeoffs of other the proposals, and is unlikely to be accepted as-is without lethal defects in both of the alternatives.\\n\\n### [F# Pipelines](https://github.com/valtech-nyc/proposal-fsharp-pipelines/)\\n\\nOn the question of placeholders, F# Pipelines argue they\'re not needed. In the base proposal, arrow functions fill the area placeholders fill, requiring less new syntax and building on a syntax developers are already familiar with and have been using since ES2015.\\n\\nAs currently specced, arrow functions are required to be wrapped in parentheses:\\n\\n```js title=\\"JavaScript\\"\\nlet person = { score: 25 };\\n\\nlet newScore = person.score\\n  |> double\\n  |> (_ => add(7, _))\\n  |> (_ => boundScore(0, 100, _));\\n```\\n\\nExploration is underway to determine whether it would be feasible to enable arrow functions to be used without parentheses, as they are a significant syntactical burden.\\n\\nOn the question of async, F# Pipelines treat `await` similar to a unary function:\\n\\n```js title=\\"JavaScript\\"\\npromise |> await\\n```\\n\\nThis would desugar to:\\n\\n```js title=\\"JavaScript\\"\\nawait promise\\n```\\n\\nand can thus be used in the middle of larger function chains with async:\\n\\n```js title=\\"JavaScript\\"\\npromise\\n  |> await\\n  |> (x => doubleSay(x, \', \'))\\n  |> capitalize\\n  |> (x => x + \'!\')\\n  |> (x => new User.Message(x))\\n  |> (x => stream.write(x))\\n  |> await\\n  |> console.log;\\n```\\n\\nThe special casing of `await` could potentially enable other unary operators to be used similarly (e.g. `typeof`), but the F# pipelines don\'t support them initially.\\n\\n### [Smart Pipelines](https://github.com/js-choi/proposal-smart-pipelines/)\\n\\nSmart Pipelines takes the idea of the placeholder to its logical conclusion, enabling it to manage partial application as well as arbitrary expressions in a pipeline. The above long chain would be written thus:\\n\\n```js title=\\"JavaScript\\"\\npromise\\n  |> await #\\n  |> doubleSay(#, \', \')\\n  |> # || throw new TypeError()\\n  |> capitalize\\n  |> # + \'!\'\\n  |> new User.Message(#)\\n  |> await stream.write(#)\\n  |> console.log;\\n```\\n\\nSmart Pipelines have a few rules for the placeholder. If a bare identifier is provided to a step in the pipeline, no token is necessary, called [\\"bare style\\"](https://github.com/js-choi/proposal-smart-pipelines/blob/master/readme.md#bare-style):\\n\\n```js title=\\"JavaScript\\"\\nx |> a;\\nx |> f.b;\\n```\\n\\nUnlike Hack, unary functions don\'t require a placeholder token.\\n\\nFor other expressions, a placeholder (called a \\"lexical topic token\\") is required, and the code will throw an early SyntaxError if it is not included in [\\"topic style\\"](https://github.com/js-choi/proposal-smart-pipelines/blob/master/readme.md#topic-style):\\n\\n```js title=\\"JavaScript\\"\\n10 |> # + 1;\\npromise |> await #;\\n```\\n\\nIf there are any operators, parentheses (including for method calls), brackets, or anything other than identifiers and dot punctuators, then a topic token is necessary. This avoids footguns and eliminate ambiguity when not using a topic token.\\n\\nSmart pipelines thus resolve the issue of async in an integrative way, allowing all possible expressions to be embedded in a pipeline; not only `await`, but also `typeof`, `yield`, and another other operator desired.\\n\\n## Where Babel Comes In\\n\\nOnce all three proposals were fleshed out, we realized discussion and debate were unlikely to resolve the inherent tension between them. We decided the best way to make a decision would be with the feedback of developers, using the proposals in real code. Given Babel\'s role in the community, we decided to introduce all three of the above proposals into the pipeline operator plugin.\\n\\nBecause these proposals parse slightly differently, support needs to be added to `@babel/parser` (formerly `babylon`), and the parser needs to be configured based on which proposal is its current parse target. The pipeline operator plugin itself thus needs the `\\"proposal\\"` option, both to configure babylon as well as its own transformation.\\n\\nWe were working under a compressed timeline for this, as we needed to introduce any breaking changes to babel, `@babel/parser`, as well as the pipeline proposal plugin before babel@7 left beta. We also wanted the plugin to be able to eventually default to whichever of the proposals get accepted, so the configuration option becomes obsolete.\\n\\nGiven these two constraints, we opted to introduce this new configuration option and make it required, forcing users to decide which proposal they want to use in their project. Once a particular proposal gets accepted as the canonical behavior of the pipeline operator, we\'ll deprecate the `\\"proposal\\"` option and make the default whichever gets accepted, and the rejected proposals will be removed in the following major version.\\n\\n## Get Involved\\n\\nIf you\'re interested in getting involved in the pipeline proposal, all the conversations are public and you  find them in the [pipeline operator repository](https://github.com/tc39/proposal-pipeline-operator/). You can also check out the [presentation from the last TC39 meeting](https://docs.google.com/presentation/d/1eFFRK1wLIazIuK0F6fY974OIDvvWXS890XAMB59PUBA/edit#slide=id.p). Lastly, you can find [James DiGioia](https://twitter.com/jamesdigioia), [J. S. Choi](https://twitter.com/__jschoi), or [Daniel Ehrenberg](https://twitter.com/littledan) on Twitter.\\n\\nBut most importantly, once the work is complete, try out the pipeline operator in your own projects! We\'re also working on adding options to the [repl](https://babeljs.io/repl/), so you\'ll be able to try out the code there as well. We need feedback and real code in order for this to be useful, so we\'d love to hear from you. Tweet us at [@babeljs](https://twitter.com/babeljs) to let us know."},{"id":"/2018/07/16/announcing-babels-new-partnership-with-trivago","metadata":{"permalink":"/babel-website/blog/2018/07/16/announcing-babels-new-partnership-with-trivago","source":"@site/blog/2018-07-16-announcing-babels-new-partnership-with-trivago.md","title":"Announcing Babel\'s New Partnership with trivago!","description":"We are happy to announce a new partnership with trivago, the hotel search website.","date":"2018-07-16T12:30:00.000Z","formattedDate":"July 16, 2018","tags":[],"readingTime":2.54,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"Announcing Babel\'s New Partnership with trivago!","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"\xa0 2018-07-16 12:30:00","categories":"announcements","share_text":"Announcing Babel\'s New Partnership with trivago!"},"prevItem":{"title":"What\'s Happening With the Pipeline (|>) Proposal?","permalink":"/babel-website/blog/2018/07/19/whats-happening-with-the-pipeline-proposal"},"nextItem":{"title":"On Consuming (and Publishing) ES2015+ Packages","permalink":"/babel-website/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages"}},"content":"We are happy to announce a new partnership with [trivago](https://www.trivago.com/), the hotel search website.\\n\\n\x3c!--truncate--\x3e\\n\\nThey\'ve committed to fund our community with $2,000 per month, for a total of $24,000 per year!\\n\\ntrivago is famous for their TV ads (\\"Hotel? trivago!\\") but also recognized for their substantial financial support for the [Webpack](https://webpack.js.org/) community. They have a [track record of supporting Open Source communities](https://tech.trivago.com/opensource/) without interfering with their work so we were very excited when they got in touch to offer their support for Babel.\\n\\nJust as it is for many projects and companies all over the world, [Babel](https://babeljs.io/) is a key technology for trivago\u2019s applications. It enables high productivity from using the modern JavaScript language while still shipping compatible code for their users running older browsers like IE11. Internally, they utilize around a dozen custom Babel plugins and their own JavaScript framework, [Melody](https://melody.js.org) also heavily relies on Babel to do its magic.\\n\\nIn addition to those immediate benefits, Babel has a very concrete impact on the future of the ECMAScript specification and the shape of the language itself due to its unique place in the ecosystem for implementing proposals in the TC39 process as early as Stage 0.\\n\\nThis new partnership with trivago brings us one step closer toward reaching our goal of having full-time maintainers working on Babel, but we\'re still not there yet and will continue to try to find additional partners that want to help us reach a sustainable level of funding. We also desire to have the capacity to spend more time on programs like [RGSoC](https://twitter.com/left_pad/status/988019997023920128) and mentoring new contributors/companies to get involved.\\n\\nIf you\'re working at a company that is using Babel, consider advocating a partnership with us to your supervisor. Webpack recently spoke to [Patrick Gotthardt](https://twitter.com/pgotthardt), our contact at trivago, about [their experience](https://medium.com/webpack/trivago-sponsors-webpack-for-second-year-bfe6ca2f0702) with investing in their community and he shared a lot of good reasons for why they\'re doing it at such a large scale.\\n\\nAs a community, we need the funding not just to maintain Babel in its current state but to support our efforts in working with TC39, the ECMA committee responsible for defining the future of the JavaScript language and the JavaScript package ecosystem. This includes both attending the bi-monthly meetings and just helping to implement all the new proposals and work towards bringing them to a stable, well-thought out state. This is a community effort that is mostly being done by a couple of volunteers: with the help of the ecosystem of companies that use the tool we can make the future of JavaScript amazing.\\n\\nWe hope that the new partnership with trivago ($24,000) as well as our already existing partnerships with Adobe ($12,000), Facebook ($10,000), the AMP Project ($9,600), Coinbase/Webflow ($5,500) and many other companies will encourage even more [companies who rely on Babel](https://babeljs.io/users) to also form a partnership with our community and to help us reach our [goals](https://opencollective.com/babel) of funding more full time developers not just to support the project itself but the community and language at large.\\n\\nPlease join us in moving JavaScript forward!"},{"id":"/2018/06/26/on-consuming-and-publishing-es2015+-packages","metadata":{"permalink":"/babel-website/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages","source":"@site/blog/2018-06-26-on-consuming-and-publishing-es2015+-packages.md","title":"On Consuming (and Publishing) ES2015+ Packages","description":"For those of us that need to support older browsers, we run a compiler like Babel over application code. But that\'s not all of the code that we ship to browsers; there\'s also the code in our node_modules.","date":"2018-06-26T12:00:00.000Z","formattedDate":"June 26, 2018","tags":[],"readingTime":12.835,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"On Consuming (and Publishing) ES2015+ Packages","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"\xa0 2018-06-26 12:00:00","categories":"announcements","share_text":"On Consuming (and Publishing) ES2015+ Packages"},"prevItem":{"title":"Announcing Babel\'s New Partnership with trivago!","permalink":"/babel-website/blog/2018/07/16/announcing-babels-new-partnership-with-trivago"},"nextItem":{"title":"Nearing the 7.0 Release","permalink":"/babel-website/blog/2017/12/27/nearing-the-7.0-release"}},"content":"For those of us that need to support older browsers, we run a compiler like Babel over application code. But that\'s not all of the code that we ship to browsers; there\'s also the code in our `node_modules`.\\n\\nCan we make compiling our dependencies not just possible, but normal?\\n\\n\x3c!--truncate--\x3e\\n\\nThe ability to compile dependencies is an enabling feature request for the whole ecosystem. Starting with some of the changes we made in Babel v7 to make selective dependency compilation possible, we hope to see it standardized moving forward.\\n\\n## Assumptions\\n\\n- We ship to modern browsers that support ES2015+ [natively](https://kangax.github.io/compat-table/es6/) (don\'t have to support IE) or are able to send multiple kinds of bundles (i.e. [by using `<script type=\\"module\\">` and `<script nomodule>`](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/) or ).\\n- Our dependencies actually publish ES2015+ instead of the current baseline of ES5/ES3.\\n- The future baseline shouldn\'t be fixed at ES2015, but is a changing target.\\n\\n## Why\\n\\nWhy is compiling dependencies (as opposed to just compiling our own code) desirable in the first place?\\n\\n- To have the freedom to make the tradeoffs of where code is able to run (vs. the library).\\n- To ship less code to users, since JavaScript has a [cost](https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e).\\n\\n## The Ephemeral JavaScript Runtime\\n\\nThe argument for why compiling dependencies would be helpful is the same for why Babel [eventually](https://github.com/babel/babel/pull/3476) introduced [`@babel/preset-env`](https://babeljs.io/docs/en/next/babel-preset-env.html). We saw that developers would eventually want to move past only compiling to ES5.\\n\\nBabel used to be [`6to5`](https://babeljs.io/blog/2017/10/05/babel-turns-three), since it only converted from ES2015 (known as ES6 back then) to ES5. Back then, the browser support for ES2015 was almost non-existent, so the idea of a JavaScript compiler was both novel and useful: we could write modern code, and have it work for all of our users.\\n\\nBut what about the browser runtimes themselves? Because evergreen browsers will eventually catch up to the standard (as they have with ES2015), creating `preset-env` helps Babel and the community align with both the browsers and TC39 itself. If we only compiled to ES5, no one would ever run native code in the browsers.\\n\\nThe real difference is realizing that there will _always_ be a sliding window of support:\\n\\n- Application code (our supported environments)\\n- Browsers (Chrome, Firefox, Edge, Safari)\\n- Babel (the abstraction layer)\\n- TC39/ECMAScript proposals (and Babel implementations)\\n\\nThus, the need isn\'t just for `6to5` to be renamed to Babel because it compiles to `7to5`, but for Babel to change the implicit assumption it only targets ES5. With `@babel/preset-env`, we are able to write the latest JavaScript and target whichever browser/environment!\\n\\nUsing Babel and `preset-env` helps us keep up with that constantly changing sliding window. However, even if we use it, it\'s currently used only for *our application code*, and not for our code\u2019s dependencies.\\n\\n## Who Owns Our Dependencies?\\n\\nBecause we have control over our own code, we are able to take advantage of `preset-env`: both by writing in ES2015+ and targeting ES2015+ browsers.\\n\\nThis isn\'t necessarily the case for our dependencies; in order to get the same benefits as compiling our code we may need to make some changes.\\n\\nIs it as straightforward as just running Babel over `node_modules`?\\n\\n## Current Complexities in Compiling Dependencies\\n\\n### Compiler Complexity\\n\\nAlthough it shouldn\'t deter us from making this possible, we should be aware that compiling dependencies does increase the surface area of issues and complexity, especially for Babel itself.\\n\\n- Compilers are no different than other programs and have bugs.\\n- Not every dependency needs to be compiled, and compiling more files does mean a slower build.\\n- `preset-env` itself could have bugs because we use [`compat-table`](https://kangax.github.io/compat-table/es6/) for our data vs. [Test262](https://github.com/tc39/test262) (the official test suite).\\n- Browsers themselves can have issues with running native ES2015+ code vs. ES5.\\n- There is still a question of determining what is \\"supported\\": see [babel/babel-preset-env#54](https://github.com/babel/babel-preset-env/issues/54) for an example of an edge case. Does it pass the test just because it parses or has partial support?\\n\\n#### Specific Issues in Babel v6\\n\\nRunning a `script` as a `module` either causes a `SyntaxError`, new runtime errors, or unexpected behavior due to the [differences in semantics](https://developers.google.com/web/fundamentals/primers/modules#intro) between classic scripts and modules.\\n\\nBabel v6 viewed every file as a `module` and thus in [\\"strict mode\\"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).\\n\\n> One could argue this is actually a good thing, since everyone using Babel is opting in to strict mode by default \ud83d\ude42.\\n\\nRunning Babel with a conventional setup on all our `node_modules` may cause issues with code that is a `script` such as a jQuery plugin.\\n\\nAn example of an issue is how [`this` gets converted to `undefined`](https://github.com/babel/babel/issues/7636).\\n\\n```js title=\\"JavaScript\\"\\n// Input\\n(function($) {\\n  // \u2026\\n}(this.jQuery));\\n```\\n\\n```js title=\\"JavaScript\\"\\n// Output\\n\\"use strict\\";\\n\\n(function ($) {\\n  // \u2026\\n})(undefined.jQuery);\\n```\\n\\nThis was [changed in v7](https://github.com/babel/babel/pull/6280) so that it won\'t auto-inject the `\\"use strict\\"` directive unless the source file is a `module`.\\n\\nIt was also not in Babel\'s original scope to compile dependencies: we actually got issue reports that people would accidentally do it, making the build slower. There is a lot of defaults and documentation in the tooling that purposely disable compiling `node_modules`.\\n\\n### Using Non-Standard Syntax\\n\\nThere are many issues with *shipping* uncompiled proposal syntax (this post was inspired by [Dan\'s concern](https://twitter.com/dan_abramov/status/1009179550134296577) about this).\\n\\n#### Staging Process\\n\\nThe [TC39 staging process](https://tc39.github.io/process-document/) does not always move forward: a proposal can move to any point in the process: even moving backwards from Stage 3 to Stage 2 as was the case with Numeric Separators (`1_000`),  dropped entirely (`Object.observe()`, and others we may have forgotten \ud83d\ude01), or just stall like function bind (`a::b`) or decorators until recently.\\n\\n- Summary of the Stages: Stage 0 has no criteria and means the proposal is just an idea, Stage 1 is accepting that the problem is worth solving, Stage 2 is about describing a solution in spec text, Stage 3 means the specific solution is thought out, and Stage 4 means that it is ready for inclusion in the spec with tests, multiple browser implementations, and in-the-field experience.\\n\\n#### Using Proposals\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"und\\" dir=\\"ltr\\"><a href=\\"https://t.co/femUb4vgxh\\">pic.twitter.com/femUb4vgxh</a></p>&mdash; Rach Smith \ud83c\udf08 (@rachsmithtweets) <a href=\\"https://twitter.com/rachsmithtweets/status/892478598765887488?ref_src=twsrc%5Etfw\\">August 1, 2017</a></blockquote>\\n\\nWe already recommend that people should be careful when using proposals lower than Stage 3, let alone publishing them.\\n\\nBut only telling people not to use Stage X goes against the whole purpose of Babel in the first place. A big reason why proposals gain improvements and move forward are because of the feedback the committee gets from real-world usage (whether in production or not) based on using it via Babel.\\n\\nThere is certainly a balance to be had here: we don\'t want to scare people away from using new syntax (that is a hard sell \ud83d\ude02), but we also don\'t want people to get the idea that \\"once it\'s in Babel, the syntax is official or immutable\\". Ideally people look into the purpose of a proposal and make the tradeoffs for their use case.\\n\\n#### Removing the Stage Presets in v7\\n\\nEven though one of the most common things people do is use the Stage 0 preset, we plan to remove the stage presets in v7. We thought at first it would be convenient, that people would make their own unofficial ones anyway, or it might help with \\"JavaScript fatigue\\". It seems to cause more of an issue: people continue to copy/paste configs without understanding what goes into a preset in the first place.\\n\\nAfter all, seeing `\\"stage-0\\"` says nothing. My hope is that in making the decision to use proposal plugins explicit, people will have to learn what non-standard syntax they are opting into. More intentionally, this should lead to a better understanding of not just Babel but of JavaScript as a language and its development instead of just its usage.\\n\\n### Publishing Non-standard Syntax\\n\\nAs a library author, publishing non-standard syntax is setting our users up for possible inconsistencies, refactoring, and breakage of their projects. Because a TC39 proposal (even at Stage 3) has a possibility of changing, it means we will inevitability have to change the library code. A \\"new\\" proposal doesn\'t mean the idea is fixed or certain but rather that we collectively want to explore the solution space.\\n\\nAt least if we ship the compiled version, it will still work, and the library maintainer can change the output so that it compiles into code that works the same as before. Shipping the uncompiled version means that anyone consuming a package needs to have a build step to use it and needs to have the same configuration of Babel as us. This is in the same bucket as using TS/JSX/Flow: we wouldn\'t expect consumers to configure the same compiler environment just because we used them.\\n\\n### Conflating JavaScript Modules and ES2015+\\n\\nWhen we write `import foo from \\"foo\\"` or `require(\\"foo\\")` and `foo` doesn\'t have an `index.js`, it resolves to the `main` field in the `package.json` of the module.\\n\\nSome tools like Rollup/webpack also read from another field called `module` (previously `jsnext:main`). It uses this to instead resolve to the JS Module file.\\n\\n- An example with [`redux`](https://github.com/reactjs/redux)\\n\\n```js title=\\"JavaScript\\"\\n// redux package.json\\n{\\n  ...\\n  \\"main\\": \\"lib/redux.js\\", // ES5 + Common JS\\n  \\"module\\": \\"es/redux.js\\", // ES5 + JS Modules\\n}\\n```\\n\\nThis was introduced so that users could consume JS Modules (ESM).\\n\\nHowever, the sole intention of this field is ESM, not anything else. The [Rollup docs](https://github.com/rollup/rollup/wiki/pkg.module#wait-it-just-means-import-and-export--not-other-future-javascript-features) specify that the `module` field makes it clear that it\'s not intended for future JavaScript syntax.\\n\\nDespite this warning, package authors invariably conflate the use of ES modules with the JavaScript language level they authored it in.\\n\\nAs such, we may need another way to signal the language level.\\n\\n#### Non-scalable Solutions?\\n\\nA common suggestion is for libraries to start publishing ES2015 under another field like `es2015`, e.g. `\\"es2015\\": \\"es2015/package.mjs\\"`.\\n\\n```js title=\\"JavaScript\\"\\n// @angular/core package.json\\n{\\n  \\"main\\": \\"./bundles/core.umd.js\\",\\n  \\"module\\": \\"./fesm5/core.js\\",\\n  \\"es2015\\": \\"./fesm2015/core.js\\",\\n  \\"esm5\\": \\"./esm5/core.js\\",\\n  \\"esm2015\\": \\"./esm2015/core.js\\",\\n  \\"fesm5\\": \\"./fesm5/core.js\\",\\n  \\"fesm2015\\": \\"./fesm2015/core.js\\",\\n}\\n```\\n\\nThis works for ES2015, but it begs the question of what we should do about ES2016? Are we supposed to create a new folder for each year and a new field in `package.json`? That seems unsustainable, and will continue to produce larger `node_modules`.\\n\\n> This was an issue with Babel itself: we had intended to continue to publish yearly presets (`preset-es2015`, `preset-es2016`..) until we realized that `preset-env` would remove that need.\\n\\nPublishing it based on specific environments/syntax would seem to be just as untenable as the amount of combinations only increases (`\\"ie-11-arrow-functions\\"`).\\n\\nWhat about distributing just the source itself? That may have similar problems if we used non-standard syntax as mentioned earlier.\\n\\nHaving a `esnext` field may not be entirely helpful either. The \\"latest\\" version of JavaScript changes depending on the point in time we authored the code.\\n\\n### Dependencies May Not Publish ES2015+\\n\\nThis effort will only be standard if it becomes straightforward to apply as a library author. It will be hard to argue for the significance of this change if both new and popular libraries aren\'t able to ship the latest syntax.\\n\\nDue to the complexity and tooling setup, it may be difficult for projects to publish ES2015+/ESM. This is probably the biggest issue to get right, and adding more documentation just isn\'t enough.\\n\\nFor Babel, we may need to add some feature requests to `@babel/cli` to make this easier, and maybe make the `babel` package do this by default? Or we should integrate better with tools like @developit\'s [microbundle](https://github.com/developit/microbundle).\\n\\nAnd how do we deal with polyfills (this will be an upcoming post)? What would it look like for a library author (or the user) to not to have to think about polyfills?\\n\\nWith all that said, how does Babel help with all this?\\n\\n## How Babel v7 Helps\\n\\nAs we\'ve discussed, compiling dependencies in Babel v6 can be pretty painful. Babel v7 will address some of these pain points.\\n\\nOne issue is around configuration lookup. Babel currently runs per file, so when compiling a file, it tries to find the closest config ([`.babelrc`](https://babeljs.io/docs/en/next/babelrc)) to know what to compile against. It keeps looking up the directory tree if it doesn\'t find it in the current folder.\\n\\n```\\nproject\\n\u2514\u2500\u2500 .babelrc // closest config for a.js\\n\u2514\u2500\u2500 a.js\\n\u2514\u2500\u2500 node_modules\\n    \u2514\u2500\u2500 package\\n        \u2514\u2500\u2500 .babelrc // closest config for b.js\\n        \u2514\u2500\u2500 b.js\\n```\\n\\nWe made a [few changes](https://github.com/babel/babel/pull/7358):\\n\\n- One is to stop lookup at the package boundary (stop when we find a `package.json`). This makes sure Babel won\'t try to load a config file outside the app, the most surprising being when it finds one in the home directory.\\n- If we use a monorepo, we may want to have a `.babelrc` per-package that extends some other central config.\\n- Babel itself is a monorepo, so instead we are using the new `babel.config.js` which allows us to resolve all files to that config (no more lookup).\\n\\n### Selective Compilation with `\\"overrides\\"`\\n\\nWe added an [`\\"overrides\\"`](https://github.com/babel/babel/pull/7091) option which allows us to basically create a new config for any set of file paths.\\n\\n> This allows every config object to specify a `test`/`include`/`exclude` field, just like you might do for Webpack. Each item allows an item, or array of items that can be a `string`, `RegExp`, or `function`.\\n\\nThis allows us to have a single config for our whole app: maybe we want to compile our server JavaScript code differently than the client code (as well as compile some package(s) in `node_modules`).\\n\\n```js title=\\"JavaScript\\"\\n// babel.config.js\\nmodule.exports = {\\n  presets: [\\n    [\'@babel/preset-env\', {\\n      targets: { node: \'current\' },\\n    }],\\n  ],\\n  overrides: [{\\n    test: [\\"./client-code\\", \\"./node_modules/package-a\\"],\\n    presets: [\\n      [\'@babel/preset-env\', {\\n        targets: { \\"chrome\\": \\"60\\" } },\\n      }],\\n    ],\\n  }],\\n}\\n```\\n\\n## Recommendations to Discuss\\n\\nWe should shift our fixed view of publishing JavaScript to one that keeps up with the latest standard.\\n\\nWe should continue to publish ES5/CJS under `main` for backwards compatibility with current tooling but also publish a version compiled down to latest syntax (no experimental proposals) under a new key we can standardize on like `main-es`. (I don\'t believe `module` should be that key since it was intended only for JS Modules).\\n\\n> Maybe we should decide on another key in `package.json`, maybe `\\"es\\"`? Reminds me of the poll I made for [babel-preset-latest](https://twitter.com/left_pad/status/758429846594850816).\\n\\nCompiling dependencies isn\'t just something for one project/company to take advantage of: it requires a push by the whole community to move forward. Even though this effort will be natural, it might require some sort of standardization: we can implement a set of criteria for how libraries can opt-in to publishing ES2015+ and verify this via CI/tooling/npm itself.\\n\\nDocumentation needs to updated to mention the benefits of compiling `node_modules`, how to do so for the library authors, and how to consume it in bundlers/compilers.\\n\\nAnd with Babel 7, consumers can more safely use `preset-env` and opt-in to running on `node_modules` with new config options like `overrides`.\\n\\n## Let\'s Do This!\\n\\nCompiling JavaScript shouldn\'t be just about the specific ES2015/ES5 distinction, whether it\'s for our app or our dependencies! Hopefully this is an encouraging call to action re-starting conversations around using ES2015+ published dependencies more first-class.\\n\\nThis post goes into some of the ways Babel should help with this effort, but we\'ll need everyone\'s help to change the ecosystem: more education, more opt-in published packages, and better tooling.\\n\\n---\\n\\n> Thanks to the [many](https://twitter.com/left_pad/status/1010280464840617984) folks who offered to review this post including [@chrisdarroch](https://twitter.com/chrisdarroch), [@existentialism](https://twitter.com/existentialism), [@mathias](https://twitter.com/mathias), [@betaorbust](https://twitter.com/betaorbust), [@_developit](https://twitter.com/_developit), [@jdalton](https://twitter.com/jdalton), [@bonsaistudio](https://twitter.com/bonsaistudio).\\n\\n<script async src=\\"https://platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>"},{"id":"/2017/12/27/nearing-the-7.0-release","metadata":{"permalink":"/babel-website/blog/2017/12/27/nearing-the-7.0-release","source":"@site/blog/2017-12-27-nearing-the-7.0-release.md","title":"Nearing the 7.0 Release","description":"Check out Planning for 7.0 for the last updates throughout the 7.0 pre-releases. If something isn\'t clear in this post let me know!","date":"2017-12-27T21:00:00.000Z","formattedDate":"December 27, 2017","tags":[],"readingTime":14.07,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"Nearing the 7.0 Release","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"\xa0 2017-12-27 21:00:00","categories":"announcements","share_text":"Nearing the 7.0 Release"},"prevItem":{"title":"On Consuming (and Publishing) ES2015+ Packages","permalink":"/babel-website/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages"},"nextItem":{"title":"Babel Turns Three","permalink":"/babel-website/blog/2017/10/05/babel-turns-three"}},"content":"> Check out [Planning for 7.0](https://babeljs.io/blog/2017/09/12/planning-for-7.0) for the last updates throughout the 7.0 pre-releases. If something isn\'t clear in this post let me know!\\n\\n\x3c!--truncate--\x3e\\n\\n## Project Updates\\n\\n- We started a new [videos page](https://babeljs.io/docs/community/videos/)! We created this for people wanting to learn more about how Babel works and to help others contribute back. This page contains videos of conference talks on Babel and related concepts from team members and people in the community (you can send a PR if you have done a talk like this as well).\\n\\n[![videos](https://i.imgur.com/DkBEsfo.png)](https://babeljs.io/docs/community/videos/)\\n\\n- We created a new [team page](https://babeljs.io/team) as well! We will be updating this page in the future with more information about what people work on and why they are involved. For such a large project, there are many ways to get involved and help out.\\n\\n[![team](https://i.imgur.com/YcWgRwf.png)](https://babeljs.io/team)\\n\\n- Babel turned 3 years old on [September 28, 2017](https://babeljs.io/blog/2017/10/05/babel-turns-three)!\\n- Daniel [moved](https://twitter.com/left_pad/status/926096965565370369) `babel/babylon` and `babel/babel-preset-env` into the main Babel monorepo, [babel/babel](https://github.com/babel/babel), and this includes all git history, labels, issues.\\n- We received a [$1k/month donation](https://twitter.com/left_pad/status/923696620935421953) from Facebook Open Source!\\n  - This the highest monthly donation we have gotten since the start (next highest is $100/month).\\n  - In the meantime, we will use our funds to meet in person and to send people to TC39 meetings. These meetings are every 2 months around the world.\\n  - If a company wants to specifically sponsor something, we can create separate issues to track. This was previously difficult because we had to pay out of pocket, or we had to find a conference on the same week to speak at to help cover expenses.\\n\\n### How you can help!\\n\\nIf your company would like to **give back** by supporting a fundamental part of JavaScript development and it\'s future, consider donating to our [Open Collective](https://opencollective.com/babel). You can also donate developer time to help maintain the project.\\n\\n#### #1 Help Maintain the Project (developer time at work)\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Engineer: There&#39;s a thing in SQL Server Enterprise blocking us<br/>Company: Let&#39;s set up a call next week with them an ongoing discussion to resolve it next quarter<br/><br/>Engineer: There&#39;s a thing we need in babel, can I spent 2 days with a PR for it<br/>Company: lol no it&#39;s their job <a href=\\"https://t.co/icgaoJ0dTe\\">https://t.co/icgaoJ0dTe</a></p>&mdash; Shiya (@ShiyaLuo) <a href=\\"https://twitter.com/ShiyaLuo/status/931230821976907776?ref_src=twsrc%5Etfw\\">November 16, 2017</a></blockquote>\\n\\nThe best thing we can get on this project are people committed to helping out with the project given the massive amount of work/responsibility it takes. Again, [I never felt ready](https://dev.to/hzoo/im-the-maintainer-of-babel-ask-me-anything-282/comments/1k6d) to be a maintainer but somehow stumbled upon it but I\'m just one person, and our team is just a few people.\\n\\n#### #2 Fund development\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Company: &quot;We&#39;d like to use SQL Server Enterprise&quot;<br/>MS: &quot;That&#39;ll be a quarter million dollars + $20K/month&quot;<br/>Company: &quot;Ok!&quot;<br/>...<br/>Company: &quot;We&#39;d like to use Babel&quot;<br/>Babel: &quot;Ok! npm i babel --save&quot;<br/>Company: &quot;Cool&quot;<br/>Babel: &quot;Would you like to help contribute financially?&quot;<br/>Company: &quot;lol no&quot;</p>&mdash; Adam Rackis (@AdamRackis) <a href=\\"https://twitter.com/AdamRackis/status/931195056479965185?ref_src=twsrc%5Etfw\\">November 16, 2017</a></blockquote>\\n\\nWe are definitely looking to be able to fund people on the team to work full-time. Logan in particular left his job a while ago and is using our current funds to work on Babel part time at the moment!\\n\\n#### #3 Contribute in other ways \ud83d\ude0a\\n\\nFor example, [Angus](https://twitter.com/angustweets) made us an [official song](https://medium.com/@angustweets/hallelujah-in-praise-of-babel-977020010fad)!\\n\\n### Upgrading\\n\\nWe will also be working on a upgrade tool that will help [rewrite your package.json/.babelrc files](https://github.com/babel/notes/issues/44) and more. Ideally this means it would modify any necessary version number changes, package renames, and config changes.\\n\\nPlease reach out to help and to post issues when trying to update! This is a great opportunity to get involved and to help the ecosystem update!\\n\\n### Summary of the [previous post](https://babeljs.io/blog/2017/09/12/planning-for-7.0)\\n\\n- Dropped Node 0.10/0.12/5 support.\\n- Updated [TC39 proposals](https://github.com/babel/proposals/issues)\\n  - Numeric Separator: `1_000`\\n  - Optional Chaining Operator: `a?.b`\\n  - `import.meta` (parsable)\\n  - Optional Catch Binding: `try { a } catch {}`\\n  - BigInt (parsable): `2n`\\n  - Split export extensions into `export-default-from` and `export-ns-form`\\n- `.babelrc.js` support (a config using JavaScript instead of JSON)\\n- Added a new Typescript Preset + separated the React/Flow presets\\n  - Added [JSX Fragment Support](https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html) and various Flow updates\\n- Removed the internal `babel-runtime` dependency for smaller size\\n\\n### Newly Updated TC39 Proposals\\n\\n- Pipeline Operator: `a |> b`\\n- Throw Expressions: `() => throw \'hi\'`\\n- Nullish Coalescing Operator: `a ?? b`\\n\\n### Deprecated Yearly Presets (e.g. babel-preset-es20xx)\\n\\nTL;DR: use `babel-preset-env`.\\n\\nWhat\'s better than you having to decide which Babel preset to use? Having it done for you, automatically!\\n\\nEven though the amount of work that goes into maintaining the lists of data is humongous \u2014 again, why we need help \u2014 it solves multiple issues. It makes sure users are up to date with the spec. It means less configuration/package confusion. It means an easier upgrade path. And it means less issues about what is what.\\n\\n`babel-preset-env` is actually a pretty *old* preset that replaces every other syntax preset that you will need (es2015, es2016, es2017, es20xx, latest, etc...).\\n\\n[![npm presets](https://i.imgur.com/nNKKFcp.png)](https://npm-stat.com/charts.html?package=babel-preset-env&package=babel-preset-es2015&package=babel-preset-es2016&package=babel-preset-es2017&package=babel-preset-latest&from=2016-11-21&to=2017-11-21)\\n\\nIt compiles the latest yearly release of JavaScript (whatever is in Stage 4) which replaces all the old presets. But it also has the ability to compile according to target environments you specify: whether that is for development mode, like the latest version of a browser, or for multiple builds, like a version for IE, and then another version for evergreen browsers.\\n\\n### ~~Not removing the Stage presets (babel-preset-stage-x)~~\\n\\nEDIT: We removed them, explained [here](https://babeljs.io/blog/2018/07/27/removing-babels-stage-presets)\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Frustration level if we remove the Stage presets in Babel? (in favor explicitly requiring proposal plugins since they aren&#39;t JavaScript yet)</p>&mdash; Henry Zhu (@left_pad) <a href=\\"https://twitter.com/left_pad/status/873242704364306433?ref_src=twsrc%5Etfw\\">June 9, 2017</a></blockquote>\\n\\nWe can always keep it up to date, and maybe we just need to determine a better system than what these presets are currently.\\n\\nRight now, stage presets are literally just a list of plugins that we manually update after TC39 meetings. To make this manageable, we need to allow major version bumps for these \\"unstable\\" packages. Part of the reason for this is because the community will re-create these packages anyway, so we might as well do it from an official package and then have the ability to provide better messaging, etc.\\n\\n### Renames: Scoped Packages (`@babel/x`)\\n\\nHere is a poll I did almost a year ago:\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Thoughts on <a href=\\"https://twitter.com/babeljs\\">@babeljs</a> using npm scoped packages for 7.0?</p>&mdash; Henry Zhu (@left_pad) <a href=\\"https://twitter.com/left_pad/status/821551189166878722\\">January 18, 2017</a></blockquote>\\n\\nBack then, not a lot of projects used scoped packages, so most people didn\'t even know they existed. You may also have had to pay for a npm org account back then, while now it\'s free (and supports non scoped packages, too). The issues with searching for scoped packages are solved and download counts work. The only thing left is that some 3rd party registries still don\'t support scoped packages, and I think we are at a point where it seems pretty unreasonable to wait on that.\\n\\nIf you want reasons why we prefer scoped packages:\\n\\n- Naming is difficult: we won\u2019t have to check if someone else decided to use our naming convention for their own plugin\\n- Similarly, package squatting\\n  - Sometimes people create `babel-preset-20xx` or some other package because it\'s funny, and then we have to make an issue/email to ask for it back.\\n  - People have a legit package, but it happens to be the same name as what we wanted to call it.\\n \xa0- People see that a new proposal is merging (like optional chaining, pipeline operator) and decide to fork and publish a version of it under the same name. Then, when we publish, it tell us the package was already published \ud83e\udd14. Then, I have to find their email and email both them and npm support to get the package back and republish.\\n- What is an \\"official\\" package and what is a user/community package with the same name? We can get issue reports of people using misnamed or unofficial packages because they assumed it was part of Babel. One example of this was a report that `babel-env` was rewriting their `.babelrc` file, and it took them a while to realize it wasn\'t `babel-preset-env`.\\n\\nSo, it seems obvious we should use scoped packages, and, if anything, we should have done it much earlier \ud83d\ude42!\\n\\nExamples of the scoped name change:\\n\\n- `babel-cli` -> `@babel/cli`\\n- `babel-core` -> `@babel/core`\\n- `babel-preset-env` -> `@babel/preset-env`\\n\\n### Renames: `-proposal-`\\n\\nAny proposals will be named with `-proposal-` now to signify that they aren\'t officially in JavaScript yet.\\n\\nSo `@babel/plugin-transform-class-properties` becomes `@babel/plugin-proposal-class-properties`, and we would name it back once it gets into Stage 4.\\n\\n### Renames: Drop the year from the plugin name\\n\\nPrevious plugins had the year in the name, but it doesn\'t seem to be necessary now.\\n\\nSo `@babel/plugin-transform-es2015-classes` becomes `@babel/plugin-transform-classes`.\\n\\nSince years were only the case for es3/es2015, we didn\'t change anything from es2016 or es2017. However, we are deprecating those presets in favor of preset-env, and, for the template literal revision, we just added it to the template literal transform for simplicity.\\n\\n### Peer Dependencies + Integrations\\n\\nWe are introducing a peer dependencies on `@babel/core` for all the plugins (`@babel/plugin-class-properties`), presets (`@babel/preset-env`), and top level packages (`@babel/cli`, `babel-loader`).\\n\\n> peerDependencies are dependencies expected to be used by your code, as opposed to dependencies only used as an implementation detail.\\n> \u2014 [Stijn de Witt via StackOverflow](https://stackoverflow.com/a/34645112).\\n\\n`babel-loader` already had a `peerDependency` on `babel-core`, so this just changes it to `@babel/core`. This is just so that people weren\'t trying to install these packages on the wrong version of Babel.\\n\\nFor tools that already have a `peerDependency` on `babel-core` and aren\'t ready for a major bump (since changing the peer dependency is a breaking change), we have published a new version of `babel-core` to bridge the changes over with the new version [babel-core@7.0.0-bridge.0](https://github.com/babel/babel-bridge). For more information check out [this issue](https://github.com/facebook/jest/pull/4557#issuecomment-344048628).\\n\\nSimilarly, packages like `gulp-babel`, `rollup-plugin-babel`, etc, all used to have `babel-core` as a dependency. Now these will just have a `peerDependency` on `@babel/core`. This lets these packages not have to bump major versions when the `@babel/core` API hasn\'t changed.\\n\\n### [#5224](https://github.com/babel/babel/pull/5224) Independent Publishing of Experimental Packages\\n\\n> I mention this in [The State of Babel](http://babeljs.io/blog/2016/12/07/the-state-of-babel) in the `Versioning` section. [Github Issue](https://github.com/babel/babylon/issues/275)\\n\\nYou might remember that after Babel 6, Babel became a set of npm packages with its own ecosystem of custom presets and plugins.\\n\\nHowever since then, we have always used a \\"fixed/synchronized\\" versioning system (so that no package is on v7.0 or above). When we do a new release such as `v6.23.0` only packages that have updated code in the source are published with the new version while the rest of the packages are left as is. This mostly works in practice because we use `^` in our packages.\\n\\nUnfortunately this kind of system requires that a major version be released for all packages once a single package needs it. This either means we make a lot small breaking changes (unnecessary), or we batch lots of breaking changes into a single release. Instead, we want to differentiate between the experimental packages (Stage 0, etc.) and everything else (es2015).\\n\\nThis means we intend to make major version bumps to any experimental proposal plugins when the spec changes rather than waiting to update all of Babel. So anything that is < Stage 4 would be open to breaking changes in the form of major version bumps and same with the Stage presets themselves (if we don\'t drop them entirely).\\n\\nThis goes with our decision to change TC39 proposal plugins to use the `-proposal-` name. If the spec changes, we will do a major version bump to the plugin and the preset it belongs to (as opposed to just making a patch version which may break for people). Then, we will need to deprecate the old versions and setup an infrastructure to automatically update people so that everyone is up to date on what the spec will become (and so they don\'t get stuck on something, like we have with decorators).\\n\\n### The `env` option in `.babelrc` is not being deprecated!\\n\\nUnlike in the [last post](https://babeljs.io/blog/2017/09/12/planning-for-7.0#deprecate-the-env-option-in-babelrc), we just fixed the merging behavior to be [more consistent](https://twitter.com/left_pad/status/936687774098444288).\\n\\nThe configuration in `env` is given higher priority than root config items, and instead of just being a weird approach of using both, plugins and presets now merge based on their identity, so you can do\\n\\n```js title=\\"JavaScript\\"\\n{\\n  presets: [\\n    [\'env\', { modules: false}],\\n  ],\\n  env: {\\n    test: {\\n      presets: [\\n         \'env\'\\n      ],\\n    }\\n  },\\n}\\n```\\n\\nwith `BABEL_ENV=test`, which would replace the root env config, with the one from test, which has no options.\\n\\n### [Support `class A extends Array` (oldest caveat)](https://twitter.com/left_pad/status/940723982638157829)\\n\\nBabel will automatically wrap any native built-ins like `Array`, `Error`, `HTMLElement` etc so that doing this just works when compiling classes.\\n\\n### Speed\\n\\n- Many [fixes](https://twitter.com/rauchg/status/924349334346276864\\n) from [bmeurer](https://twitter.com/bmeurer) on the v8 team!\\n- 60% faster via the [web-tooling-benchmark](https://github.com/v8/web-tooling-benchmark) https://twitter.com/left_pad/status/927554660508028929\\n\\n### preset-env: `\\"useBuiltins\\": \\"usage\\"`\\n\\n`babel-preset-env` introduced the idea of compiling syntax to different targets and via the `useBuiltIns` option, the ability to also only add polyfills that the targets don\'t support.\\n\\nSo with this option, something like:\\n\\n```js title=\\"JavaScript\\"\\nimport \\"babel-polyfill\\";\\n```\\n\\nCan turn into\\n\\n```js title=\\"JavaScript\\"\\nimport \\"core-js/modules/es7.string.pad-start\\";\\nimport \\"core-js/modules/es7.string.pad-end\\";\\n// ...\\n```\\n\\nif the target environment happens to support polyfills other than `padStart` or `padEnd`.\\n\\nHowever in order to make that even better, we should only import polyfills that are \\"used\\" in the codebase itself. Why even import `padStart` if it\'s not even used in the code?\\n\\n`\\"useBuiltins\\": \\"usage\\"` is our first attempt to begin that idea. It does an import at the top of each file but only adds the import if it finds it used in the code. This approach means that we can import the minimum amount of polyfills necessary for the app (and only if the target environment doesn\'t support it).\\n\\n\\nSo if you use `Promise` in your code, it will import it at the top of the file (if your target doesn\'t support it). Bundlers will dedupe the file if it\'s the same so this approach won\'t cause multiple polyfills to be imported.\\n\\n```js title=\\"JavaScript\\"\\nimport \\"core-js/modules/es6.promise\\";\\nvar a = new Promise();\\n```\\n\\n```js title=\\"JavaScript\\"\\nimport \\"core-js/modules/es7.array.includes\\";\\n[].includes\\na.includes\\n```\\n\\nWith type inference we can know if an instance method like `.includes` is for an array or not, and having a false positive is ok until that logic is better since it\'s still better than importing the whole polyfill like before.\\n\\n### Misc Updates\\n\\n- [`babel-template`](https://github.com/babel/babel/blob/main/packages/babel-template) is faster/easier to use\\n- [regenerator](https://github.com/facebook/regenerator) was released under the [MIT License](https://twitter.com/left_pad/status/938825429955125248) - it\'s the dependency used to compile generators/async\\n- \\"lazy\\" option to the `modules-commonjs` plugin via [#6952](https://github.com/babel/babel/pull/6952)\\n- You can now use `envName: \\"something\\"` in .babelrc or pass via cli `babel --envName=something` instead of having to use `process.env.BABEL_ENV` or `process.env.NODE_ENV`\\n- `[\\"transform-for-of\\", { \\"assumeArray\\": true }]` to make all for-of loops output as regular arrays\\n- Exclude `transform-typeof-symbol` in loose mode for preset-env [#6831](https://github.com/babel/babel/pull/6831)\\n- [Landed PR for better error messages with syntax errors](https://twitter.com/left_pad/status/942859244759666691)\\n\\n### Todos Before Release\\n\\n- [Handle `.babelrc` lookup](https://github.com/babel/babel/issues/6766) (want this done before first RC release)\\n- [\\"overrides\\" support](https://github.com/babel/babel/pull/7091): different config based on glob pattern\\n- Caching and invalidation logic in babel-core.\\n- Either implement or have plan in place for versioning and handling polyfills independently from helpers, so we aren\'t explicitly tied to core-js 2 or 3, since people may have things that depend on one or the other and won\'t want to load both a lot of the time.\\n- Either a [working decorator implementation](https://github.com/babel/babel/pull/6107), or functional legacy implementation, with clear path to land current spec behavior during 7.x\'s lifetime.\\n\\n### Thanks\\n\\nShoutout to our team of volunteers: [Logan](https://twitter.com/loganfsmyth) who has been really pushing hard to fix a lot of our core issues regarding configs and more and the one doing all of that hard work, [Brian](https://twitter.com/existentialism) who has been taking over maintenance of a lot of preset-env work and just whatever I was doing before \ud83d\ude1b, and [Daniel](https://twitter.com/TschinderDaniel) who has always been stepping in when we need the help whether it be maintaining babel-loader or helping move the babylon/babel-preset-env repo\'s over. And same with [Nicolo](https://twitter.com/NicoloRibaudo), [Sven](https://twitter.com/svensauleau), [Artem](https://twitter.com/yavorsky_), and [Jessica](https://twitter.com/jessidhia) for stepping up in the last year to help out.\\n\\nI\'m really looking forward to a release (I\'m tired too; it\'s almost been a year \ud83d\ude1d), but also don\'t want to rush anything just because! Been a lot of ups and downs throughout this release but I\'ve certainly learned a lot and I\'m sure the rest of the team has as well.\\n\\nAnd if I\'ve learned anything at all this year, I should really heed this advice rather than just write about it.\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">&quot;Before you go maintaining anything else, maintain your own body first&quot; - Mom \ud83d\ude38</p>&mdash; Henry Zhu (@left_pad) <a href=\\"https://twitter.com/left_pad/status/944313617243099136?ref_src=twsrc%5Etfw\\">December 22, 2017</a></blockquote>\\n\\n> Also thanks to [Mariko](https://twitter.com/kosamari) for the [light push](https://twitter.com/kosamari/status/944272286055530496) to actually finish this post (2 months in the making)\\n\\n<script async src=\\"https://platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>"},{"id":"/2017/10/05/babel-turns-three","metadata":{"permalink":"/babel-website/blog/2017/10/05/babel-turns-three","source":"@site/blog/2017-10-05-babel-turns-three.md","title":"Babel Turns Three","description":"Happy Birthday Babel! \ud83c\udf82 (Sept 28)","date":"2017-10-05T13:00:00.000Z","formattedDate":"October 5, 2017","tags":[],"readingTime":4.435,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"Babel Turns Three","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2017-10-05T13:00:00.000Z","categories":"announcements","share_text":"Babel Turns Three"},"prevItem":{"title":"Nearing the 7.0 Release","permalink":"/babel-website/blog/2017/12/27/nearing-the-7.0-release"},"nextItem":{"title":"Planning for 7.0","permalink":"/babel-website/blog/2017/09/12/planning-for-7.0"}},"content":"> Happy Birthday Babel! \ud83c\udf82 (Sept 28)\\n\\nBabel has really come a long way since [Sebastian](https://github.com/kittens) started the project only 3 years ago! A while back it was renamed from [6to5 to Babel](https://babeljs.io/blog/2015/02/15/not-born-to-die); for good reason as it has significantly contributed to the use of ES2015+ by [many companies](https://babeljs.io/users), libraries, and developers alike.\\n\\n\x3c!--truncate--\x3e\\n\\nAnd now it\'s even helping move the language forward by supporting the proposals coming from TC39. We\'re looking forward to being able to participate more in [TC39 meetings](https://twitter.com/loganfsmyth/status/844252727186149377).\\n\\nWe\'re really happy to see that the project itself has grown so much since [last year](https://babeljs.io/blog/2016/09/28/6.16.0)!\\n\\n<blockquote class=\\"twitter-tweet\\" data-cards=\\"hidden\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">According to BigQuery there&#39;s 110,000 websites using <a href=\\"https://twitter.com/babeljs?ref_src=twsrc%5Etfw\\">@babeljs</a>. (At least using the classes plugin). <a href=\\"https://t.co/kOxlLsFKPX\\">pic.twitter.com/kOxlLsFKPX</a></p>&mdash; Sebastian McKenzie (@sebmck) <a href=\\"https://twitter.com/sebmck/status/911336494824132608?ref_src=twsrc%5Etfw\\">September 22, 2017</a></blockquote>\\n<script async src=\\"//platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>\\n\\n- The number of contributors to our main repository has doubled from 200 to 400\\n- We\'ve doubled the amount of [downloads to `babel-core`](https://www.npmjs.com/package/babel-core) (4.5m/month to 11m/month)\\n- Grew from 4500 to 7500 users on our [Slack community](https://babeljs.slack.com) (sign up [here](http://slack.babeljs.io/))\\n- Up to 2000 community `babel-plugin` packages [on npm](https://www.npmjs.com/search?q=babel-plugin) and over 1000 community `babel-preset` packages [on npm](https://www.npmjs.com/search?q=babel-preset)\\n\\n## Sustainability\\n\\nBy every metric above, it seems like Babel is doing really well, and it is! A lot of that is just the result of network effects and people coming to using Babel as the norm for compiling JavaScript. However the project isn\'t just about the code, but everyone involved in it.\\n\\nI tried to give some talks this year to explain not just [how Babel works](https://github.com/hzoo/so-how-does-babel-even-work) but what it\'s like to [maintain an Open Source project](https://github.com/hzoo/maintaining-an-oss-project). Hopefully I was able to get across the current state of things and start a dialog as many others have done about how we are to improve upon how we view OSS, not just for [maintainers themselves](https://github.com/hzoo/maintainer-heal-thyself) but the culture around it.\\n\\nWe\'ve accomplished a lot, but we have to continue to work in multiple ways to make it better by funding/sponsoring maintainers, adding new contributors, and working with the community that we are a part of.\\n\\n- Participated in [Summer of Code](https://babeljs.io/blog/2017/08/09/babel-and-summer-of-code), both Google and Rails Girls, with 4 awesome interns: [Peeyush](https://twitter.com/peeyFTW), [Karl](https://twitter.com/qantas94heavy), [Kara](https://twitter.com/KaraMarck), and [Emma](https://twitter.com/EmmaMDeacon)!\\n- Support from my team at [Behance](https://twitter.com/Behance) to work on Babel for [half my time at work](https://twitter.com/left_pad/status/867714802386444288)!\\n- [Justin](https://github.com/jridgewell) on the [AMP team at Google](https://twitter.com/AMPhtml/status/883373137517092864) is able to get 20% time at work to work on Babel as well as attend TC39 meetings (Google is a committee member)!\\n- We started an [Open Collective](https://opencollective.com/babel) with the hopes of funding maintainers in the future!\\n- An amazing team of maintainers: some of us just did an [AMA](https://hashnode.com/ama/with-babel-team-cj7awmk5e00ij54wu6onnyc5w). ([the team section](https://github.com/babel/babel#team) needs to be updated)\\n\\n> Reach out to us if your company would like to contribute on work time: please join us in making Babel a sustainable project for everyone, not just as users but for our community!\\n\\n---\\n\\n## What\'s been happening?\\n\\n### Deploying native ES2015+ is discussed more with [babel-preset-env](https://github.com/babel/babel-preset-env)\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">New article: How to deploy ES2015+ code in production today (without transpiling to ES5) and why you should! <a href=\\"https://t.co/jBMA8aKpyN\\">https://t.co/jBMA8aKpyN</a> <a href=\\"https://t.co/nmV4kXEKiI\\">pic.twitter.com/nmV4kXEKiI</a></p>&mdash; Phil Walton (@philwalton) <a href=\\"https://twitter.com/philwalton/status/908082461799616512?ref_src=twsrc%5Etfw\\">September 13, 2017</a></blockquote>\\n\\n### New [babeljs.io/repl](https://babeljs.io/repl) in React thanks to [@brian_d_vaughn](https://twitter.com/brian_d_vaughn) and pull request urls thanks to [@Daniel15](https://twitter.com/Daniel15).\\n\\n<blockquote class=\\"twitter-tweet\\" data-cards=\\"hidden\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Give the new, experimental Babel REPL a try!<a href=\\"https://t.co/OAbvglsdoG\\">https://t.co/OAbvglsdoG</a> <a href=\\"https://t.co/rVnNIOazvs\\">pic.twitter.com/rVnNIOazvs</a></p>&mdash; Brian Vaughn (@brian_d_vaughn) <a href=\\"https://twitter.com/brian_d_vaughn/status/898215894639423488?ref_src=twsrc%5Etfw\\">August 17, 2017</a></blockquote>\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Soon, pull requests to <a href=\\"https://twitter.com/babeljs?ref_src=twsrc%5Etfw\\">@babeljs</a> will link to the REPL to make it easy to test! Here&#39;s a sneak peek: <a href=\\"https://t.co/6rzvjlnb1w\\">https://t.co/6rzvjlnb1w</a> cc <a href=\\"https://twitter.com/left_pad?ref_src=twsrc%5Etfw\\">@left_pad</a> <a href=\\"https://t.co/NH7PiFYKaG\\">pic.twitter.com/NH7PiFYKaG</a></p>&mdash; Daniel Lo Nigro (@Daniel15) <a href=\\"https://twitter.com/Daniel15/status/896511729185603584?ref_src=twsrc%5Etfw\\">August 12, 2017</a></blockquote>\\n\\n### [test262](https://github.com/tc39/test262) tests against Babylon (and soon Babel) by [@JugglinMike](https://twitter.com/JugglinMike)\\n\\n<blockquote class=\\"twitter-tweet\\" data-conversation=\\"none\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">So looks like that&#39;s ~97.76% passing (55k tests!!) <a href=\\"https://t.co/KlGeFM2a1r\\">pic.twitter.com/KlGeFM2a1r</a></p>&mdash; Henry Zhu (@left_pad) <a href=\\"https://twitter.com/left_pad/status/894370297264189440?ref_src=twsrc%5Etfw\\">August 7, 2017</a></blockquote>\\n\\n### Increased participation on TC39\\n\\n> So many committee members having been helping a lot with github issues, tracking/implementing/reviewing proposals, discussions in slack, and more: [@rwaldron](https://twitter.com/rwaldron), [@ljharb](https://twitter.com/ljharb), [@littledan](https://twitter.com/littledan), [@mathias](https://twitter.com/mathias), [@benjamn](https://twitter.com/benjamn), [@leobalter](https://twitter.com/leobalter), [@gsathya](https://twitter.com/_gsathya), [@gisenberg](https://twitter.com/the_gisenberg), [@kentcdodds](https://twitter.com/kentcdodds), [@bakkoting](https://twitter.com/bakkoting)\\n\\n<blockquote class=\\"twitter-tweet\\" data-cards=\\"hidden\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">\u270d\ufe0f Updates from the Sept TC39 meeting this week for what we need to update in <a href=\\"https://twitter.com/babeljs?ref_src=twsrc%5Etfw\\">@babeljs</a> (links go to separate issues) <a href=\\"https://t.co/4nvusNIeJX\\">https://t.co/4nvusNIeJX</a> <a href=\\"https://t.co/RP444BvZnO\\">pic.twitter.com/RP444BvZnO</a></p>&mdash; Henry Zhu (@left_pad) <a href=\\"https://twitter.com/left_pad/status/914118289181298688?ref_src=twsrc%5Etfw\\">September 30, 2017</a></blockquote>\\n\\n### Babel 7 is soon!\\n\\n<blockquote class=\\"twitter-tweet\\" data-cards=\\"hidden\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Just published a post for the first <a href=\\"https://twitter.com/babeljs?ref_src=twsrc%5Etfw\\">@babeljs</a> 7.0 beta release <a href=\\"https://t.co/DnEfR4e8qb\\">https://t.co/DnEfR4e8qb</a></p>&mdash; Henry Zhu (@left_pad) <a href=\\"https://twitter.com/left_pad/status/907607921290301440?ref_src=twsrc%5Etfw\\">September 12, 2017</a></blockquote>\\n\\n## Future Ideas\\n\\n- Providing a [\\"metadata\\" plugin](https://github.com/babel/notes/issues/34) for users to grep for patterns in their codebases. This will be useful to figure out how people are using certain proposals (similar to what was done in [tc39/proposal-optional-chaining#17](https://github.com/tc39/proposal-optional-chaining/issues/17) for CoffeeScript regarding `?.`)\\n- Better codemod support for all proposals: ideally each proposal plugin should come with a plugin to remove/compile the proposal away if a proposal gets dropped or the syntax changes. Similarly, we can provide a codemod to automatically convert syntax over to the new proposal as well (ideally using [lebab](https://lebab.io))\\n- Figuring out tooling for publishing ES2015+ and how that interacts with polyfills, transform-runtime, babel-preset-env, npm, .mjs\\n- Fixing plugin ordering, traversal edge cases, `babel` package, `babel --init`, performance/size stats.\\n\\n## Thanks\\n\\nAgain, thanks to all for using and contributing back to Babel! We\'re looking forward to what\'s in store for the project!"},{"id":"/2017/09/12/planning-for-7.0","metadata":{"permalink":"/babel-website/blog/2017/09/12/planning-for-7.0","source":"@site/blog/2017-09-12-planning-for-7.0.md","title":"Planning for 7.0","description":"If you didn\'t know already, we\'re planning on releasing a 7.0 version soon \ud83d\ude4c ! Work on it actually started back in February, when I just wanted to make a release to drop Node 0.10/0.12 support and remove babel-runtime and various other code. And since then, we\'ve done releases up to alpha.20.","date":"2017-09-12T10:00:00.000Z","formattedDate":"September 12, 2017","tags":[],"readingTime":19.78,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"Planning for 7.0","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"\xa0 2017-09-12 10:00:00","categories":"announcements","share_text":"Planning for 7.0"},"prevItem":{"title":"Babel Turns Three","permalink":"/babel-website/blog/2017/10/05/babel-turns-three"},"nextItem":{"title":"Zero-config code transformation with babel-plugin-macros","permalink":"/babel-website/blog/2017/09/11/zero-config-with-babel-macros"}},"content":"If you didn\'t know already, we\'re planning on releasing a 7.0 version soon \ud83d\ude4c ! Work on it actually started back in February, when I just wanted to make a release to drop Node 0.10/0.12 support and remove babel-runtime and various other code. And since then, we\'ve done releases up to `alpha.20`.\\n\\n\x3c!--truncate--\x3e\\n\\n> We\'re going to update this post throughout the beta releases\\n\\nSince we\'re still just a volunteer project, it\'s been difficult for most of the team to stay focused and motivated to make all these changes and continue to maintain a project that so many companies, bootcamps, and tools rely on so much. But in the meantime we\'ve made a lot of progress: [weekly meetings/notes](https://github.com/babel/notes), participating as invited guests at TC39 for the last few meetings, facilitating in both [RGSoC](https://railsgirlssummerofcode.org/) and [GSoC](https://summerofcode.withgoogle.com), and creating an [Open Collective](https://opencollective.com/babel).\\n\\n## Upgrading\\n\\n> Upgrading for most projects should be as simple as updating your `package.json` deps to `7.0.0-beta.0`. For the whole time we\'ve been working on 7.0, we\'ve been using it in Babel itself (so meta) and at my workplace at Behance.\\n\\n> We will be pinning all dependencies to exact versions until the official release.\\n\\n```\\n{\\n  \\"devDependencies\\": {\\n    \\"babel-cli\\": \\"7.0.0-beta.0\\"\\n  }\\n}\\n```\\n\\nSpecific packages:\\n\\n<details>\\nbabel packages in the monorepo should all be >= 7.0.0-beta.0 <br/>\\nbabel-preset-env should be at least 2.0.0-beta.0 <br/>\\nbabel-eslint can be >= 8.0.0 <br/>\\nbabel-loader should be >= 7.0.0 (out of beta since it uses babel-core as a peerDependency) <br/>\\ngrunt-babel can be >= 7.0.0 <br/>\\ngulp-babel can be >= 7.0.0 <br/>\\nrollup-plugin-babel can be >= 3.0.2\\n</details>\\n\\n---\\n\\nPlease check out our [upgrade guide](https://babeljs.io/blog/2017/03/01/upgrade-to-babel-7) and other guide specifically for [tool authors](https://babeljs.io/blog/2017/03/01/upgrade-to-babel-7-for-tool-authors) which we will also be updating as necessary.\\n\\nI\'d like to go over some notable changes for our first beta release (it\'s still a lot *smaller* in scope in terms of breaking changes than the previous 6.0 release).\\n\\n## Re-iterating Project Goals\\n\\nBefore we go into that, I just want to repeat again what the purpose of Babel is.\\n\\nSince Babel has been renamed from 6to5, browsers have been implementing more of the spec and users are more comfortable with using the latest syntax/build tooling. It shouldn\'t be surprisingly however that Babel\'s goals haven\'t changed much.\\n\\nOur two goals are hand in hand:\\n\\n1. Help developers transform new syntax into backwards compatible code (abstract browser support away)\\n2. Be a bridge to help TC39 get feedback on new ECMAScript proposals and for the community to have a say in the future of the language.\\n\\nThus, I think it\'s an understatement to say that Babel is a vital part of the JavaScript community (almost 10 million downloads a month of `babel-core`) and sorely needs its support. (The only talks I\'ve tried to give are about this point: [JSConf EU](https://github.com/hzoo/maintaining-an-oss-project), [React Rally](https://github.com/hzoo/so-how-does-babel-even-work), [TC39](https://github.com/hzoo/role-of-babel-in-js)). I said recently: \\"What happens if Babel dies\\"? What happens when the current group of people interested in this project get bored/burned out/move on to other things? (What if it\'s already happened?). Are we going to do something about it? I don\'t want to just ask you to help us, you already are *us* as users of the project.\\n\\nOk then, let\'s talk about some changes!\\n\\n## Drop Support for Unmaintained Node Versions: 0.10, 0.12, 5 ([#4315](https://github.com/babel/babel/issues/4315))\\n\\nProgress in OSS projects often comes at the cost of upgrading for its users. Because of this, we\'ve always been hesitant in making the choice to introduce a major version bump/breaking changes. By dropping unsupported versions of Node, we can not only make a number of improvements to the codebase, but also upgrade dependencies and tools (ESLint, Yarn, Jest, Lerna, etc).\\n\\n## \ud83d\udc53 Proposal Updates/Spec Compliancy\\n\\n> AKA the only things most of you care about \ud83d\ude05\\n\\n### Philosophy (Proposals: spec, loose, default behavior)\\n\\nWe\'ve created a new repo: [babel/proposals](https://github.com/babel/proposals) to track our progress on the various [TC39 Proposals](https://github.com/tc39/proposals) and meetings.\\n\\nI also added a section about [how we accept new proposals](https://github.com/babel/proposals#when-does-babel-implement-new-features). Our basic thinking is that we will start accepting PRs for anything a TC39 champion is going to present (Stage 0). And we will update them (with your help!) when the spec changes.\\n\\nNaturally, we will take the opportunity to be as spec compliant as possible (within reasonable speed, etc) as the default behavior. This means if you need a faster/smaller build, you should use the `loose` option which will purposely disregard certain spec changes like runtime checks and other edge cases. The reason why it is opt-in is because we expect you should know what you are doing, while others should be able to seamlessly upgrade `babel-preset-env` to use the native version of each syntax or stop using Babel entirely and have no issues.\\n\\n### Stage 3: Class Properties (from Stage 2)\\n\\n> [`babel-plugin-transform-class-properties`](https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties): the default behavior is now what was previously the \\"spec\\" option, which uses `Object.defineProperty` instead of simple assignment.\\n\\n> This currently has the effect of breaking the [legacy decorators plugin](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy) (which we made the \\"transform-decorators\\" plugin in 7.0) if you try to decorate a class property. You\'ll need to use the `loose` option to be compatible with the version of decorators in the transform until we release the Stage 2 decorators plugin.\\n\\n> Private fields are WIP: [#6120](https://github.com/babel/babel/pull/6120)\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nclass Bork {\\n  static a = \'foo\';\\n  x = \'bar\';\\n}\\n```\\n\\nOutput (default)\\n\\n```js title=\\"JavaScript\\"\\nclass Bork {\\n  constructor() {\\n    Object.defineProperty(this, \\"x\\", {\\n      configurable: true,\\n      enumerable: true,\\n      writable: true,\\n      value: \'bar\'\\n    });\\n  }\\n};\\n\\nObject.defineProperty(Bork, \\"a\\", {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  value: \'foo\'\\n});\\n```\\n\\nOutput (loose mode)\\n\\n```js title=\\"JavaScript\\"\\nclass Bork {\\n  constructor() {\\n    this.x = \'bar\';\\n  }\\n};\\nBork.a = \'foo\';\\n```\\n\\n\\n### Stage 3: Object Rest Spread (from Stage 2)\\n\\n> [`babel-plugin-transform-object-rest-spread`](https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread): And now the plugin handles non-string keys (ex: Number/Symbol)\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\n// Rest Properties\\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\\nconsole.log(x); // 1\\nconsole.log(y); // 2\\nconsole.log(z); // { a: 3, b: 4 }\\n\\n// Spread Properties\\nlet n = { x, y, ...z };\\nconsole.log(n); // { x: 1, y: 2, a: 3, b: 4 }\\n```\\n\\nAlso disallowed\\n\\n```js title=\\"JavaScript\\"\\nvar { ...{ x } } = obj;\\nvar { ...[ y ] } = obj;\\n```\\n\\n### Stage 3: Optional Catch Binding (new)\\n\\n> [`babel-plugin-transform-optional-catch-binding`](https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding): allow developers to use try/catch without creating an unused binding.\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\ntry {\\n  throw 0;\\n} catch {\\n  doSomethingWhichDoesNotCareAboutTheValueThrown();\\n}\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\ntry {\\n  throw 0;\\n} catch (_unused) {\\n  doSomethingWhichDoesNotCareAboutTheValueThrown();\\n}\\n```\\n\\n### Stage 3: Unicode Property Regex (new)\\n\\n> [`babel-plugin-transform-unicode-property-regex`](https://github.com/mathiasbynens/babel-plugin-transform-unicode-property-regex): compile Unicode property escapes (`\\\\p{\u2026}` and `\\\\P{\u2026}`) in Unicode regular expressions to ES5 or ES6 that works in today\u2019s environments.\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nvar regex = /\\\\p{ASCII_Hex_Digit}/u;\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nvar regex = /[0-9A-Fa-f]/;\\n```\\n\\n### Stage 3: BigInt (new, unfinished)\\n\\n> `babel-plugin-transform-bigint`: [#6015](https://github.com/babel/babel/pull/6015).\\n> This won\'t be included in the Stage presets because it would be slow to wrap all operators.\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\n50000n + 60n;\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nimport babelCheckBinaryExpressions from \\"babel-check-binary-expressions\\";\\nbabelCheckBinaryExpressions(new BigInt(\\"50000\\"), new BigInt(\\"60\\"), \\"+\\");\\n```\\n\\n### Stage 3: Dynamic Import (from Stage 2)\\n\\n> [`babel-plugin-syntax-dynamic-import`](https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import): You only need to parse the syntax since tools like Webpack can handle the transformation in place of Babel.\\n> There is also a [plugin for Node](https://github.com/airbnb/babel-plugin-dynamic-import-node)\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nconst testModule = import(\'test-module\');\\n```\\n\\n### Stage 2: `import.meta` (syntax only)\\n\\n> A meta property that is only syntactically valid in modules, meant for meta-information about the currently running module provided by the host environment.\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nconst size = import.meta.scriptElement.dataset.size || 300;\\n```\\n\\n### Stage 2: Numeric Separators (new)\\n\\n> [`babel-plugin-transform-numeric-separator`](https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator): make numeric literals more readable by creating a visual separation (a `_`) between groups of digits.\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\n1_000_000_000\\n0b1010_0001_1000_0101\\n0xA0_B0_C0\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\n1000000000\\n0b1010000110000101\\n0xA0B0C0\\n```\\n\\n### Stage 2: Decorators (from Stage 1), still WIP\\n\\n> [`babel-plugin-transform-decorators`](https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-decorators): [#6107](https://github.com/babel/babel/pull/6107)\\n\\nDisallowed\\n\\n```js title=\\"JavaScript\\"\\n// no computed decorator keys\\n@dec[foo]\\nclass A {}\\n\\n// no parameter decorators (a separate proposal)\\nclass Foo {\\n  constructor(@foo x) {}\\n}\\n\\n// no decorators on object methods\\nvar o = {\\n  @baz\\n  foo() {}\\n}\\n\\n// decorator cannot be attached to the export\\n@foo\\nexport default class {}\\n```\\n\\nValid\\n\\n```js title=\\"JavaScript\\"\\n// decorators with a call expression\\n@foo(\'bar\')\\nclass A {\\n  // decorators on computed methods\\n  @autobind\\n  [method](arg) {}\\n  // decorators on generator functions\\n  @deco\\n  *gen() {}\\n  // decorators with a member expression\\n  @a.b.c(e, f)\\n  m() {}\\n}\\n\\n// exported decorator classes\\nexport default @foo class {}\\n```\\n\\nUnsupported (WIP)\\n\\n```js title=\\"JavaScript\\"\\n// decorated class properties\\nclass A {\\n  @dec name = 0\\n}\\n```\\n\\n### Stage 2: `function.sent` (new)\\n\\n> [`babel-plugin-transform-function-sent`](https://www.npmjs.com/package/babel-plugin-transform-function-sent): compile the `function.sent` meta property, used inside generator functions\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nfunction* generator() {\\n    console.log(\\"Sent\\", function.sent);\\n    console.log(\\"Yield\\", yield);\\n}\\n\\nconst iterator = generator();\\niterator.next(1); // Logs \\"Sent 1\\"\\niterator.next(2); // Logs \\"Yield 2\\"\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nlet generator = _skipFirstGeneratorNext(function* () {\\n    const _functionSent = yield;\\n    console.log(\\"Sent\\", _functionSent);\\n    console.log(\\"Yield\\", yield);\\n});\\n```\\n\\n### Stage 2: export-ns-from\\n\\n> [`babel-plugin-transform-export-namespace`](https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace): a shorthand to import/reexport a namespace. Split out from the old `transform-export-extensions` which combined this proposal with another\\n\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nexport * as ns from \\"mod\\";\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nimport * as ns from \\"mod\\";\\nexport {ns};\\n```\\n\\n### Stage 1: export-default-from\\n\\n> [`babel-plugin-transform-export-default`](https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-default): a shorthand to import/reexport something. Split out from the old `transform-export-extensions` which combined this proposal with another\\n\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nexport v from \\"mod\\";\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nimport _v from \\"module\\";\\nexport { _v as v };\\n```\\n\\n### Stage 1: Optional Chaining (new)\\n\\n> [`babel-plugin-transform-optional-chaining`](https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining): the operator (`?.`) allows you to handle properties of deeply nested objects without worrying about undefined intermediate objects.\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\na?.b = 42;\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nvar _a;\\n(_a = a) == null ? void 0 : _a.b = 42;\\n```\\n\\n### ES2015: `new.target`\\n\\n> [`babel-plugin-transform-new-target`](https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-new-target): we never got around to implementing `new.target` support earlier, so now there is a plugin for it that will be included in the ES2015/env presets.\\n\\nExample\\n\\n```js title=\\"JavaScript\\"\\n// with a function\\nfunction Foo() {\\n  console.log(new.target);\\n}\\n\\nFoo(); // => undefined\\nnew Foo(); // => Foo\\n\\n// with classes\\nclass Foo {\\n  constructor() {\\n    console.log(new.target);\\n  }\\n}\\n\\nclass Bar extends Foo {\\n}\\n\\nnew Foo(); // => Foo\\nnew Bar(); // => Bar\\n```\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nclass Foo {\\n  constructor() {\\n    new.target;\\n  }\\n\\n  test() {\\n    new.target;\\n  }\\n}\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nclass Foo {\\n  constructor() {\\n    this.constructor;\\n  }\\n\\n  test() {\\n    void 0;\\n  }\\n}\\n```\\n\\n## \ud83d\ude80 New Feature\\n\\n### `.babelrc.js`\\n\\n> [babel/babel#4630](https://github.com/babel/babel/issues/4630)\\n\\n`*.js` configuration files are fairly common in the JavaScript ecosystem. ESLint and Webpack both allow for `.eslintrc.js` and `webpack.config.js` configuration files, respectively.\\n\\nWriting configuration files in JavaScript allows for dynamic configuration, making it possible to write a single configuration file that can adapt to different environments programmatically.\\n\\n```js title=\\"JavaScript\\"\\nvar env = process.env.BABEL_ENV || process.env.NODE_ENV;\\nvar plugins = [];\\nif (env === \'production\') {\\n  plugins.push.apply(plugins, [\\"a-super-cool-babel-plugin\\"]);\\n}\\nmodule.exports = { plugins };\\n```\\n\\n```js title=\\"JavaScript\\"\\nvar env = process.env.BABEL_ENV || process.env.NODE_ENV;\\nmodule.exports = {\\n  plugins: [\\n    env === \'production\' && \\"another-super-cool-babel-plugin\\"\\n  ].filter(Boolean)\\n};\\n```\\n\\nThis was previously done through the `env` configuration option, which is now deprecated. See [below](#deprecate-the-env-option-in-babelrc) for more details.\\n\\n### TypeScript\\n\\nYou can now use `babel-preset-typescript` to allow Babel to strip types similar to how `babel-preset-flow` works!\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"presets\\": [\\"typescript\\"]\\n}\\n```\\n\\nWe\'re working on a guide for how to setup TypeScript and Babel with the TypeScript team, which should be finished before the official 7.0 release. TL;DR is that you setup TS with `--noEmit` or use it in the editor/watch mode so that you can use preset-env and other Babel plugins.\\n\\n### \\"Pure\\" Annotation in specific transforms for minifiers\\n\\nAfter [#6209](https://github.com/babel/babel/pull/6209), ES6 classes that are transpiled will have a `/*#__PURE__*/` comment that minifiers like Uglify and babel-minify can use for dead code elimination. These annotations may expand to our helper functions as well.\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nclass C {\\n  m(x) {\\n    return \'a\';\\n  }\\n}\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nvar C = /*#__PURE__*/ function () {\\n  function C() {\\n    _classCallCheck(this, C)\\n  }\\n  C.prototype.m = function m(x) {\\n    return \'a\';\\n  };\\n  return C;\\n}();\\n```\\n\\n## \ud83d\ude0e Other Breaking Changes\\n\\n### Removed `babel-preset-flow` from `babel-preset-react`\\n\\nThis was important because we got a lot of complaints from users that weren\'t using any types/flow that they ended up writing invalid JS but there was no syntax error because they used the react preset.\\n\\nAlso we have the TypeScript preset now, so it didn\'t make sense to include `flow` in the react preset itself anymore.\\n\\n### Integrations\\n\\nPackages like `grunt-babel`, `gulp-babel`, `rollup-plugin-babel`, etc all used to have `babel-core` as a dependency.\\n\\nAfter v7, we plan to move `babel-core` to be a peerDependency like `babel-loader` has. This lets all these packages not have to bump major versions when the `babel-core` API hasn\'t changed. Thus they are already published as `7.0.0` since we don\'t expect any further changes to those packages.\\n\\n## Meta\\n\\n### Remove `babel-runtime` from our own Babel dependencies ([#5218](https://github.com/babel/babel/pull/5218))\\n\\nBabel itself doesn\'t have that many external dependencies, but in 6.x [each package has a dependency on `babel-runtime`](https://github.com/babel/babel/blob/958f72ddc28e2f5d02adf44eadd2b1265dd0fa4d/packages/babel-plugin-transform-es2015-arrow-functions/package.json#L12) so that built-ins like Symbol, Map, Set, and others are available without needing a polyfill. By changing the minimum supported version of Node to v4 (where those built-ins are supported natively), we can drop the dependency entirely.\\n\\n> This is an issue on npm 2 (we didn\'t recommended its use with Babel 6) and older yarn, but not npm 3 due to its deduping behavior.\\n\\nWith [Create React App](https://github.com/facebookincubator/create-react-app) the size of the node_modules folder changed drastically when babel-runtime was hoisted.\\n\\n- `node_modules` for npm 3: ~120MB\\n- `node_modules` for Yarn (<`0.21.0`): ~518MB\\n- `node_modules` for Yarn (<`0.21.0`) with hoisted `babel-runtime`: ~157MB\\n- `node_modules` for Yarn + [PR #2676](https://github.com/yarnpkg/yarn/pull/2676): ~149MB ([tweet](https://twitter.com/bestander_nz/status/833696202436784128))\\n\\nSo although this issue has been fixed \\"upstream\\" by using npm >= 3/later Yarn, we can do our part by simply dropping our own dependency on `babel-runtime`.\\n\\n### Independent Publishing of Experimental Packages ([#5224](https://github.com/babel/babel/pull/5224))\\n\\n> I mention this in [The State of Babel](http://babeljs.io/blog/2016/12/07/the-state-of-babel) in the `Versioning` section. [Github Issue](https://github.com/babel/babylon/issues/275)\\n\\nYou might remember that after Babel 6, Babel became a set of npm packages with its own ecosystem of custom presets and plugins.\\n\\nHowever since then, we\'ve always used a \\"fixed/synchronized\\" versioning system (so that no package is on v7.0 or above). When we do a new release such as `v6.23.0` only packages that have updated code in the source are published with the new version while the rest of the packages are left as is. This mostly works in practice because we use `^` in our packages.\\n\\nUnfortunately this kind of system requires that a major version be released for all packages once a single package needs it. This either means we make a lot small breaking changes (unnecessary) or we batch lots of breaking changes into a single release. Instead, we want to differentiate between the experimental packages (Stage 0, etc) and everything else (es2015).\\n\\nThis means that we intend to make major version bumps to any experimental proposal plugins when the spec changes rather than waiting to update all of Babel. So anything that is < Stage 4 would be open to breaking changes in the form of major version bumps and same with the Stage presets themselves if we don\'t drop them entirely.\\n\\nFor example:\\n\\nSay you are using preset-env (which keeps up to date and currently includes everything in es2015, es2016, es2017) + an experimental plugin. You also decide to use object-rest-spread because it\'s cool.\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"presets\\": [\\"env\\"],\\n  \\"plugins\\": [\\"transform-object-rest-spread\\"]\\n}\\n```\\n\\nIf the spec to an experimental proposal changes, we should be free to make a breaking change and make a major version bump for that plugin only. Because it only affects that plugin, it doesn\'t affect anything else and people are free to update when possible. We just want to make sure that users update to the latest version of any experimental proposal when possible and provide the tools to do so automatically if that is reasonable as well.\\n\\n## \ud83d\udc80 Possible Deprecations\\n\\n### ~~Deprecate the \\"env\\" option in `.babelrc`~~\\n\\n> [babel/babel#5276](https://github.com/babel/babel/issues/5276)\\n> EDIT: We changed the behavior to be more intuitive and did not remove it.\\n\\nThe \\"env\\" configuration option (not to be confused with babel-preset-env) has been a source of confusion for our users as seen by the numerous issues reported.\\n\\nThe [current behavior](http://babeljs.io/docs/usage/babelrc/#env-option) is to merge the config values into the top level values which isn\'t always intuitive such that developers end up putting nothing in the top level and just duplicating all the presets/plugins under separate envs.\\n\\nTo eliminate the confusion (and help our power users), we\'re considering dropping the env config option all together and recommending users use the proposed JS config format (see below).\\n\\n### Deprecate ES20xx presets (done)\\n\\n> We already deprecated preset-latest a while ago, and ES2016/ES2017 [earlier](https://twitter.com/left_pad/status/897483806499885057)\\n> It\'s annoying making a yearly preset (extra package/dependency, issues with npm package squatting unless we do scoped packages)\\n\\nDevelopers shouldn\'t even need to make the decision of what yearly preset to use? If we drop/deprecate these presets then everyone can use [babel-preset-env](https://github.com/babel/babel-preset-env) instead which will already update as the spec changes.\\n\\n## \ud83e\udd14 Questions\\n\\n### Deprecate/Rename/Remove Stage X presets (done)\\n\\n> EDIT: we did this and we wrote a whole [post](https://babeljs.io/blog/2018/07/27/removing-babels-stage-presets) to explain it.\\n\\nMany in the community (and TC39) have expressed concerns over the Stage X presets. I believe I just added them to have an easy migration path from Babel 5 to Babel 6 (used to be a \\"stage\\" option).\\n\\nWhile we want to have an easy to use tool, it turns out that many companies/developers use these \\"not yet JavaScript\\" presets all the time, and in production. \\"Stage 0\\" doesn\'t really set the same tone as `babel-preset-dont-use-this-stage-0`.\\n\\n> Ariya just made an [awesome poll](https://twitter.com/AriyaHidayat/status/833797322786025472) that explains what I\'m talking about\\n\\nDevelopers don\'t actually know what features are in what version of JavaScript (and they shouldn\'t have to know). However it is a problem when we all start thinking that \\"features\\" that are actually still proposals are in the spec already.\\n\\nMany open source projects (including Babel still \ud83d\ude1d), tutorials, conference talks, etc all use `stage-0`. React promotes the use of JSX, class properties (now Stage 3), object rest/spread (now Stage 3) and we all believe that it\'s just JavaScript because Babel compiled it for them. So maybe removing this abstraction would help people understand more about what is going on and the tradeoffs one is making when choosing to use Stage X plugins.\\n\\nIt also seems much easier to maintain your own preset than to have to update the Stage preset.\\n\\n> I often see people go \\"I want object rest, and that\'s stage 2, so I enabled stage 2\\". They now have a load of other experimental features enabled they might not know about and probably don\'t need.\\n> Also, as stages change over time then people who aren\'t using shrinkwrap or yarn will get new features appearing, possibly without their knowledge. If a feature is canned they might even get one vanishing. @glenjamin\\n\\n### Using npm Scoped Packages (done, `@babel/x`)\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Thoughts on <a href=\\"https://twitter.com/babeljs\\">@babeljs</a> using npm scoped packages for 7.0?</p>&mdash; Henry Zhu (@left_pad) <a href=\\"https://twitter.com/left_pad/status/821551189166878722\\">January 18, 2017</a></blockquote>\\n<script async src=\\"//platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>\\n\\nSeems like most who understood what scoped packages are were in favor?\\n\\nPros\\n\\n- Don\'t have to worry about getting a certain package name (the reason why this was brought up in the first place).\\n\\n> Many package names have been taken (preset-es2016, preset-es2017, 2020, 2040, etc). Can always ask to transfer but not always easy to do and can lead to users believing certain packages are official due to the naming.\\n\\nCons\\n\\n- We need to migrate to new syntax\\n- Still unsupported on certain non-npm tools (lock-in)\\n- No download counts unless we alias back to old names\\n\\nSounds like we may want to defer, and in the very least it\'s not a breaking change given it\'s a name change.\\n\\n### `external-helpers`, `transform-runtime`, `babel-polyfill`\\n\\nEDIT: we separated out `transform-runtime`\'s use of `@babel/runtime` and `core-js`\\n\\n> \\"regeneratorRuntime is not defined\\" - reported all the time.\\n\\nBasically we need a better solution around how to deal with built-ins/polyfills.\\n\\n- Developers don\'t know what regenerator-runtime is, they just want to use generators/async functions.\\n- Many developers are confused as to why a runtime is needed at all or why Babel doesn\'t compile `Promise`, `Object.assign`, or some other built-in.\\n- Developers are confused with the difference between `transform-runtime` the Babel plugin and the runtime itself, `babel-runtime`.\\n- Complaints about generated code size since `babel-polyfill` includes all polyfills (although now we have [`useBuiltIns`](https://github.com/babel/babel-preset-env#usebuiltins)) and no one knowing about `external-helpers`\\n\\nCan we combine/replace these packages and have an easier, default experience?\\n\\n## What\'s next?\\n\\nWe want the community to upgrade and provide their feedback/reports. There will probably be a lot of initial activity which can be overwhelming so please be patient with us. We\'d appreciate the help in helping triage, write docs/upgrade guides/tips, and codemods to help others upgrade more seamlessly. Because Babel touches a lot of the JavaScript ecosystem, it may not be as simple as simply updating one package because it could depend on other community Babel plugins on npm. We\'re not going to just wait around for a month and hope people upgrade, there\'s a lot of work to be done to make this happen without half the community still staying on 6.x next year. I\'d not like to leave projects (and people) behind. So let us know what we can do to help, and I\'d ask that you\'d do the same for us and the rest of the community.\\n\\n## Project Sustainability\\n\\nShoutout to my team at [Behance](https://www.behance.net) for allowing me to work on Babel part-time at work; we\'re still basically the only company working to sustain Babel in any capacity on work time. I\'m really glad to be able to support the project at work instead of only after work/weekends, and hope this can be the case for more maintainers in the future. (I hope we\'ve been a good example of how companies can support the open source projects they use and not necessarily \\"own\\").\\n\\nWe don\'t have enough in our Open Collective still to pay someone full time: I believe the highest donation we\'ve gotten is $750 from Webflow, and highest monthly donation is $100 from various individuals/companies, so either we some work there or we work on getting more companies involved like AMP/Google have done (@jridgewell who recently joined our team is able to spend work time as well, and it\'s made a big difference).\\n\\nAsk if your company can sponsor with our [Open Collective](https://opencollective.com/babel), let us know what\'s missing, how you can get involved. You don\'t even have to have a specific reason to get involved. If you simply care about sustaining a project for the forseable future, just get your team plugged in and get involved.\\n\\n## Future\\n\\nAfter 7.0: there\'s a lot of potential avenues for us to explore (that we\'ve all brought up years ago): separating traversal from plugins (async visitors?), immutable AST, syntax extensions? On the infra side: integrating with test262 and smoke tests, better github workflow to go from proposal to transform, codemod infrastructure for automatic upgrades, etc.\\n\\nFollow our meeting notes/discussions on [babel/notes](https://github.com/babel/notes) and get involved!\\n\\n## Thanks!\\n\\nI\'m hopeful that we can do the official release soon, but I\'d like to mention that open source is sustained by consistent, day-to-day maintenance and not just a hyped-up release cycle where we just leave everyone else in the dust and move on so it may take a little longer as we wait to fixup bugs and upgrade the ecosystem."},{"id":"/2017/09/11/zero-config-with-babel-macros","metadata":{"permalink":"/babel-website/blog/2017/09/11/zero-config-with-babel-macros","source":"@site/blog/2017-09-11-zero-config-with-babel-macros.md","title":"Zero-config code transformation with babel-plugin-macros","description":"Babel started out as a transpiler to let you write the latest version of the ECMAScript specification but ship to environments that don\'t implement those features yet. But it has become much more than that. \\"Compilers are the New Frameworks\\" says Tom Dale and I could not agree more. We\'re seeing more and more compile-time optimizations for libraries and frameworks. I\'m not talking about syntax extensions to the language, but simple code transformations that enable patterns that would be difficult to accomplish otherwise.","date":"2017-09-11T11:00:00.000Z","formattedDate":"September 11, 2017","tags":[],"readingTime":4.785,"hasTruncateMarker":true,"authors":[{"name":"Kent C. Dodds","url":"https://twitter.com/kentcdodds"}],"frontMatter":{"layout":"post","title":"Zero-config code transformation with babel-plugin-macros","author":"Kent C. Dodds","authorURL":"https://twitter.com/kentcdodds","date":"2017-09-11T11:00:00.000Z","categories":"announcements","share_text":"Zero-config code transformation with babel-plugin-macros","custom_js_with_timestamps":["docs.js"],"guest_post":true,"guest_description":"This is a guest post from Kent C. Dodds. Kent works at PayPal and\\nteaches about JavaScript and <a href=\\"https://kentcdodds.com/workshops/#code-transformation-and-linting\\">writing Babel plugins</a>\\non <a href=\\"http://kcd.im/egghead\\">Egghead.io</a> and <a href=\\"https://frontendmasters.com/courses/\\">Frontend Masters</a>.\\nFollow Kent on <a href=\\"https://github.com/kentcdodds\\">GitHub</a>,\\nand <a href=\\"https://twitter.com/kentcdodds\\">Twitter</a>.\\n"},"prevItem":{"title":"Planning for 7.0","permalink":"/babel-website/blog/2017/09/12/planning-for-7.0"},"nextItem":{"title":"Contributing to Babel: Three Lessons to Remember","permalink":"/babel-website/blog/contributing-to-babel-three-lessons-to-remember"}},"content":"Babel started out as a transpiler to let you write the latest version of the ECMAScript specification but ship to environments that don\'t implement those features yet. But it has become much more than that. [\\"Compilers are the New Frameworks\\"](https://tomdale.net/2017/09/compilers-are-the-new-frameworks/) says [Tom Dale](https://twitter.com/tomdale) and I could not agree more. We\'re seeing more and more compile-time optimizations for libraries and frameworks. I\'m not talking about syntax extensions to the language, but simple code transformations that enable patterns that would be difficult to accomplish otherwise.\\n\\n\x3c!--truncate--\x3e\\n\\nOne of my favorite things about compiler plugins is that you can use them to optimize the user experience and developer experience at the same time. (Read more about [\\"How writing custom Babel & ESLint plugins can increase productivity & improve user experience\\"](https://kentcdodds.com/blog/how-writing-custom-babel-and-eslint-plugins-can-increase-productivity-and-improve-user-experience)).\\n\\nI have a few problems with Babel plugins though:\\n\\n1. They can lead to confusion because when looking at code in a project, you might not know that there\'s a plugin transforming that code.\\n2. They have to be globally configured or configured out-of-band (in a `.babelrc` or webpack config).\\n3. They can conflict in very confusing ways due to the fact that all babel plugins run simultaneously (on a single walk of Babel\'s AST).\\n\\nThese problems could be solved if we could import Babel plugins and apply them directly to our code. This would mean the transformation is more explicit, we wouldn\'t need to add them to configuration, and ordering can happen in the order the plugins are imported. Wouldn\'t that be cool!?!?\\n\\n## Introducing [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros) \ud83c\udfa3\\n\\nGuess what! A tool like this exists! `babel-plugin-macros` is a new Babel plugin that allows you to do exactly what we\'re talking about. It\'s a \\"new\\" approach to code transformation. It enables you to have zero-config, importable code transformations. [The idea](https://github.com/threepointone/babel-plugin-macros) came from [Sunil Pai](https://twitter.com/threepointone) and caught my attention in [this create-react-app issue](https://github.com/facebookincubator/create-react-app/issues/2730).\\n\\nSo what does it look like? Whelp! There are already a few `babel-plugin-macros` packages out there you can try today!\\n\\nHere\'s a real-world example of using [`preval.macro`](https://github.com/kentcdodds/preval.macro) to inline an SVG in [a universal application](https://github.com/kentcdodds/glamorous-website) built with [Next.js](https://github.com/zeit/next.js):\\n\\n```js title=\\"JavaScript\\"\\n// search.js\\n// this file runs in the browser\\nimport preval from \'preval.macro\'\\nimport glamorous from \'glamorous\'\\n\\nconst base64SearchSVG = preval.require(\'./search-svg\')\\n// this will be transpiled to something like:\\n// const base64SearchSVG = \'PD94bWwgdmVyc2lv...etc...\')\\n\\nconst SearchBox = glamorous.input(\'algolia_searchbox\', props => ({\\n  backgroundImage: `url(\\"data:image/svg+xml;base64,${base64SearchSVG}\\")`,\\n  // ...\\n}))\\n\\n\\n// search-svg.js\\n// this file runs at build-time only\\n// because it\'s required using preval.require function, which is a macro!\\nconst fs = require(\'fs\')\\nconst path = require(\'path\')\\n\\nconst svgPath = path.join(__dirname, \'svgs/search.svg\')\\nconst svgString = fs.readFileSync(svgPath, \'utf8\')\\nconst base64String = new Buffer(svgString).toString(\'base64\')\\n\\nmodule.exports = base64String\\n```\\n\\nWhat\'s cool about this? Well, the alternative would look exactly like the example above except:\\n\\n1. It\'s less explicit because there would be no `import preval from \'preval.macro\'` in the source code.\\n2. Have to add `babel-plugin-preval` to your babel configuration.\\n3. Need to update your ESLint config to allow for the `preval` variable as a global.\\n4. If you misconfigured `babel-plugin-preval` you\'d get a cryptic **runtime** error like: `Uncaught ReferenceError: preval is not defined`.\\n\\nBy using `preval.macro` with `babel-plugin-macros`, we don\'t have any of those problems because:\\n\\n1. The import is there and used explicitly.\\n2. `babel-plugin-macros` needs to be added to your config, but only once, then you can use all the macros you\'d like (even local macros!)\\n3. No need to update ESLint config because it\'s explicit.\\n4. If you misconfigure `babel-plugin-macros` then you\'ll get [a much more friendly **compile time** error message](https://github.com/kentcdodds/babel-plugin-macros/blob/f7c9881ee22b19b3c53c93711af6a42895ba1c71/src/__tests__/__snapshots__/index.js.snap#L100) that indicates what the actual problem is pointing you to documentation.\\n\\n**So what is it really? The TL;DR is that `babel-plugin-macros` is a simpler way to write and use Babel transforms.**\\n\\nThere are already several [published `babel-plugin-macros`](https://www.npmjs.com/browse/keyword/babel-plugin-macros) you can use, including [`preval.macro`](https://github.com/kentcdodds/preval.macro), [`codegen.macro`](https://github.com/kentcdodds/codegen.macro), [`idx.macro`](https://github.com/dralletje/idx.macro), [`emotion/macro`](https://github.com/emotion-js/emotion/blob/master/docs/babel.md#babel-macros), [`tagged-translations/macro`](https://github.com/vinhlh/tagged-translations#via-babel-macros), [`babel-plugin-console/scope.macro`](https://github.com/mattphillips/babel-plugin-console#macros), and [`glamor` \ud83d\udd1c](https://github.com/threepointone/glamor/pull/312).\\n\\n### Another example\\n\\n`babel-plugin-macros` is a way to have no config for non-syntax babel plugins. So many existing babel plugins could be implemented as a macro. Here\'s another example of [`babel-plugin-console`](https://github.com/mattphillips/babel-plugin-console) which exposes [a macro version of itself](https://github.com/mattphillips/babel-plugin-console/blob/master/README.md#macros):\\n\\n```js title=\\"JavaScript\\"\\nimport scope from \'babel-plugin-console/scope.macro\'\\n\\nfunction add100(a) {\\n  const oneHundred = 100\\n  scope(\'Add 100 to another number\')\\n  return add(a, oneHundred)\\n}\\n\\nfunction add(a, b) {\\n  return a + b;\\n}\\n```\\n\\nNow, when that code is run, the `scope` function does some pretty nifty things:\\n\\n**Browser:**\\n\\n![Browser console scoping add100](https://github.com/mattphillips/babel-plugin-console/raw/53536cba919d5be49d4f66d957769c07ca7a4207/assets/add100-chrome.gif)\\n\\n**Node:**\\n\\n<img alt=\\"Node console scoping add100\\" src=\\"https://github.com/mattphillips/babel-plugin-console/raw/53536cba919d5be49d4f66d957769c07ca7a4207/assets/add100-node.png\\" width=\\"372\\" />\\n\\nCool right? And using it is just like using any other dependency, except it has all the benefits mentioned above.\\n\\n## Conclusion\\n\\nI think we\'ve only begun to scratch the surface of what `babel-plugin-macros` can do. I\'m hoping that we can land it in [create-react-app](https://github.com/facebookincubator/create-react-app/issues/2730) so folks using `create-react-app` can have even more power with zero configuration. I\'m really excited to see more Babel plugins expose a `macro` in addition to the existing plugin functionality they already have. I can\'t wait to see folks create macros that are specific to their project needs.\\n\\n**Creating a macros is even easier than a regular Babel plugin**, but it does require a bit of knowledge around ASTs and Babel. If this is new to you, there are [a](https://kentcdodds.com/talks/#writing-custom-babel-and-eslint-plugins-with-asts), [few](https://github.com/thejameskyle/babel-handbook), [resources](https://kentcdodds.com/workshops/#code-transformation-and-linting) for you \ud83d\ude00\\n\\nGood luck to you all! \ud83d\udc4b\\n\\nP.S. I should mention that language macros are not a new concept at all. Being able to teach a language new tricks has been around for a very long time. In fact, there\'s already [such a tool for JavaScript](http://sweetjs.org/) and even [one implemented as a Babel plugin already](https://github.com/codemix/babel-plugin-macros). `babel-plugin-macros` takes a slightly different approach however. While macros have often been associated with defining new syntax for a language, that\'s not the goal of `babel-plugin-macros` at all. In the case of `babel-plugin-macros` it\'s more about code transformations."},{"id":"contributing-to-babel-three-lessons-to-remember","metadata":{"permalink":"/babel-website/blog/contributing-to-babel-three-lessons-to-remember","source":"@site/blog/2017-08-16-gsoc-karl-1.md","title":"Contributing to Babel: Three Lessons to Remember","description":"Getting to work your way around a new code base always poses its challenges, and Babel was no exception.","date":"2017-08-16T14:00:00.000Z","formattedDate":"August 16, 2017","tags":[],"readingTime":7.295,"hasTruncateMarker":true,"authors":[{"name":"Karl Cheng","url":"https://twitter.com/qantas94heavy"}],"frontMatter":{"layout":"post","title":"Contributing to Babel: Three Lessons to Remember","author":"Karl Cheng","authorURL":"https://twitter.com/qantas94heavy","slug":"contributing-to-babel-three-lessons-to-remember","date":"2017-08-16T14:00:00.000Z","custom_js_with_timestamps":["docs.js"]},"prevItem":{"title":"Zero-config code transformation with babel-plugin-macros","permalink":"/babel-website/blog/2017/09/11/zero-config-with-babel-macros"},"nextItem":{"title":"Personal Experiences at Babel #1 \u2014 A PR with Unusually High Number of Reviews","permalink":"/babel-website/blog/personal-experiences-at-babel-1-a-pr-with-unusually-high-number-of-reviews"}},"content":"Getting to work your way around a new code base always poses its challenges, and Babel was no exception.\\n\\nI\u2019ve been working with Babel as part of the Google Summer of Code 2017 program, working to update Babel transforms and the Babylon parser to accommodate changes to specifications and implementing new features.\\n\\nHere\u2019s a few things I\u2019ve learnt from my adventures so far.\\n\\n\x3c!--truncate--\x3e\\n\\n## 1. Yes, communication is important\\n\\nTo start off with getting to know the codebase better, I combed through the open issues list on Babel and found a relatively easy one ([issue #5728][#5728]) to deal with.\\n\\nJust to make sure I knew what I was doing, I fired a quick question on the thread:\\n\\n<img class=\\"img-responsive\\" alt=\\"My question asking for clarification\\" src=\\"/assets/2017-08-16-gsoc-karl-1/question.png\\" />\\n\\nAfter getting clarification, I set off to change the plugin to not throw \\"runtime\\" errors during transpilation, but only when the code is actually being run. One incriminating piece of code stuck out:\\n\\n```js title=\\"JavaScript\\"\\nfor (const violation of (binding.constantViolations: Array)) {\\n  throw violation.buildCodeFrameError(messages.get(\\"readOnly\\", name));\\n}\\n```\\n\\nNow what needed to be done here was to actually insert a `throw` statement into the generated code, which didn\u2019t prove to be too difficult. However, there were still a few cases where runtime errors were being thrown elsewhere from code that wasn\u2019t directly related to this file.\\n\\nWanting to go and explore other parts of the Babel code base, I put that down for me to get on with later.\\n\\nNot too long after, I received a, well, interesting update on the issue\u2026 Wait what?\\n\\n<img class=\\"img-responsive\\" alt=\\"Someone else had claimed the issue.\\" src=\\"/assets/2017-08-16-gsoc-karl-1/update.png\\" />\\n\\nI never actually said I was working on fixing the issue, but assumed that posting would have implied I was going to work on it.\\n\\nOops.\\n\\n  [#5728]: https://github.com/babel/babel/issues/5728\\n\\n## 2. Where snapshot testing falls short\\nAfter setting off for another hunt, I stumbled across [issue #5656][#5656]:\\n\\n> ### Arguments deoptimized when shadowed in nested function\\n> This is a feature request (I think). Arguments are not optimized if an inner function shadows the name with a parameter (or rest parameters in my case).\\n>\\n>\\n> #### Input code\\n> ```js title=\\"JavaScript\\"\\n> const log = (...args) => console.log(...args);\\n>\\n> function test_opt(...args) {\\n>   log(...args);\\n> }\\n>\\n> function test_deopt(...args) {\\n>   const fn = (...args) => log(...args);\\n>   fn(...args);\\n> }\\n> ```\\n>\\n> ...\\n>\\n> #### Expected vs. Current Behavior\\n> I\u2019d expect the code to be optimizable to use .apply( thisArg, arguments ) throughout.\\n> However, in test_deopt the outer ...args gets copied just to be passed into the inner fn.\\n> I can verify that the problem disappears if I rename either the ...args of test_deopt or of the fn arrow function.\\n\\n  [#5656]: https://github.com/babel/babel/issues/5656\\n\\n### What\u2019s going on here?\\nNow what was happening was that this code would generate the following:\\n\\n```js title=\\"JavaScript\\"\\nvar log = function log() {\\n  var _console;\\n\\n  return (_console = console).log.apply(_console, arguments);\\n};\\n\\nfunction test_opt() {\\n  log.apply(undefined, arguments);\\n}\\n\\nfunction test_deopt() {\\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) { // unnecessary loop\\n    args[_key] = arguments[_key];\\n  }\\n\\n  var fn = function fn() {\\n    return log.apply(undefined, arguments);\\n  };\\n  fn.apply(undefined, args);\\n}\\n```\\n\\nSee that `for` section there? Usually this is needed as the arguments object isn\u2019t a real array\u200a\u2014\u200afor example, if you tried to run `arguments.slice()`, it would fail miserably.\\nHowever, in this case it\u2019s only being passed to `Function.prototype.apply`. Surprisingly enough, Babel already bothers to optimize this specific case, like in the `test_opt` example above.\\n\\n### Trying to fix it\\nSo what did I do? Adding the problem file as a new test case, I tried to see if I could get the output to reflect what I wanted.\\n\\n<img class=\\"img-responsive\\" alt=\\"Test failure of modified code\\" src=\\"/assets/2017-08-16-gsoc-karl-1/babel-test.png\\" />\\n\\n\u201cWhy\u2019s the test failing? Surely if I change it a little it will solve itself.\u201d\\n\\nDespite spamming `make test-only` and modifying the transforms of referenced identifiers within the code, any change just resulted in a different bunch of tests failing instead.\\n\\n### The Chromium debugger is \u201cfun\u201d\\nMiserable, annoyed and confused, I bothered to fire up the Node.js inspector to step through what was going on.\\n\\n<img class=\\"img-responsive\\" alt=\\"Using the Chromium debugger\\" src=\\"/assets/2017-08-16-gsoc-karl-1/debugger-cropped.png\\" />\\n\\nAfter returning to my computer from a drink break, I\u2019m gladly greeted to my hard disk light thrashing around and a practically hung computer.\\n\\n<img class=\\"img-responsive\\" alt=\\"Chromium process using more than 3GB of memory\\" src=\\"/assets/2017-08-16-gsoc-karl-1/chromium-task-manager.png\\" />\\n\\nHolding my computer together with judicious applications of <kbd>Alt</kbd> + <kbd>SysRq</kbd> + <kbd>F</kbd>, I managed to work through the flow of things\xb9 and figure out how exactly the code worked.\\n\\nEven through all that, I still couldn\u2019t see any reason why it was deciding to remove this \u201cnecessary\u201d (so I thought) code that was being removed with my original fix.\\n\\n### The actual problem?\\n\\n  [bug]: https://github.com/babel/babel/issues/5656#issuecomment-300139737\\n  [pr]: https://github.com/babel/babel/pull/5721\\n\\nSee the error shown above? That entire code in green wasn\u2019t meant to be there, even though it was \u201cexpected\u201d.\\n\\nBasically: the test was broken. _Great._ :/\\n\\n[The actual fix][pr] involved creating a `referencesRest` function to make sure that the spread operator was actually being applied to the original parameter, rather than a variable in another scope masking the variable.\\n\\n> \xb9: Turns out that adding a large folder to the DevTools workspace would leak memory until causing an OOM ([bug I filed for this][bug]).\\n\\n### So why do we use snapshot testing then?!\\n\\nWell first off, it\'s far easier to create tests when all you need to do is ask Babel to run your test case to generate your expected file. This presents to us a low time cost option while protecting against a significant proportion of potential errors.\\n\\nAlso, especially with the type of program Babel is, it would be far harder to test for in other ways. For example, we could check for specific nodes of the AST, but this takes far longer to write and is also prone to non-obvious breakage when your code attempts to change the way the transform is done.\\n\\nSo, all in all, a few lessons here:\\n\\n1. Make sure your tests are right in the first place\u2014don\'t be complacent!\\n2. Yes, the debugger is actually useful in seeing what goes on.\\n3. Sometimes things take time to work out\u2014if you\u2019re getting nowhere, take a break or work on something else.\\n\\n## 3. Team meetings!\\n\\nI know this kinda stretches the notion of an \u201cissue\u201d, but anyway :)\\n\\nWhen you\u2019re working on a project with a bunch of other people, it\u2019s always useful to catch up with one another and discuss areas which we need to work on.\\n\\nSo how exactly do we go about doing that?!\\n\\n_Ugh, meetings._\\n\\nWhen you have a bunch of people spread across the world, finding ways to communicate is never easy, but regardless we would have to make do with our attempts at this feat.\\n\\n### Time zones\\nWhen you\u2019re dealing with a open source project spanning all across the globe, picking an appropriate hour quickly turns a rather involved exercise in bikeshedding.\\n\\n<img class=\\"img-responsive\\" alt=\\"World map of people who\u2019ve attended our meetings\\" src=\\"/assets/2017-08-16-gsoc-karl-1/world-map.png\\" />\\n\\nEven with the vast spread between each of us, it seemed like we could just about manage to finally get something together.\\n\\n<img class=\\"img-responsive\\" alt=\\"Time zones discussed in 31 May 2017 meeting\\" src=\\"/assets/2017-08-16-gsoc-karl-1/time-zone-list.png\\" />\\n\\nAlas, this was not to last. Eventually, we ended up having to switch between two times every other week to accommodate other users (13:00 and 16:00 UTC), which meant that I was only able to attend once a fortnight.\\n\\nDespite this, we\u2019ve managed to make significant progress with coordinating fixes to various parts that make up key changes to Babel, including support for TypeScript, changes to the order in which transform plugins run, as well as keeping up to date with changes from TC39.\\n\\n## Where to next?\\n\\nWe\u2019re continuing to polish up Babel 7 for general consumption, with [a number of new features](https://babeljs.io/blog/2017/03/01/upgrade-to-babel-7) coming along with that.\\n\\nI\u2019m working with a bunch of others to get support for updated [Class Fields](https://github.com/tc39/proposal-class-fields) specification proposal included into Babel so that people can test it out and provide feedback.\\n\\nAlso, while I\u2019m at it, I\u2019d like to thank all of the Babel mentors and contributors for helping me out with peer reviews and providing guidance with proposals, all the way from first contact to today.\\n\\n---\\n\\nLooking to find out more about Babel? Hit up our [contributing page](https://github.com/babel/babel/blob/main/CONTRIBUTING.md) and join the [Slack community](https://slack.babeljs.io)!\\n\\n## More about Karl\\n\\nKarl Cheng is a [GSoC 2017](https://summerofcode.withgoogle.com/organizations/5842528113786880/#6600055503978496) student hailing from Sydney, Australia. Find out more about him on GitHub ([Qantas94Heavy](https://github.com/Qantas94Heavy)) and Twitter ([@Qantas94Heavy](https://twitter.com/Qantas94Heavy))!\\n\\nPlease check out our first post on [Summer of Code](https://babeljs.io/blog/2017/08/09/babel-and-summer-of-code) for more info!"},{"id":"personal-experiences-at-babel-1-a-pr-with-unusually-high-number-of-reviews","metadata":{"permalink":"/babel-website/blog/personal-experiences-at-babel-1-a-pr-with-unusually-high-number-of-reviews","source":"@site/blog/2017-08-11-gsoc-peey-1.md","title":"Personal Experiences at Babel #1 \u2014 A PR with Unusually High Number of Reviews","description":"We landed the parser support for","date":"2017-08-11T12:00:00.000Z","formattedDate":"August 11, 2017","tags":[],"readingTime":5.875,"hasTruncateMarker":true,"authors":[{"name":"Peeyush Kushwaha","url":"https://twitter.com/PeeyFTW"}],"frontMatter":{"layout":"post","title":"Personal Experiences at Babel #1 \u2014 A PR with Unusually High Number of Reviews","author":"Peeyush Kushwaha","authorURL":"https://twitter.com/PeeyFTW","slug":"personal-experiences-at-babel-1-a-pr-with-unusually-high-number-of-reviews","date":"2017-08-11T12:00:00.000Z","custom_js_with_timestamps":["docs.js"]},"prevItem":{"title":"Contributing to Babel: Three Lessons to Remember","permalink":"/babel-website/blog/contributing-to-babel-three-lessons-to-remember"},"nextItem":{"title":"Babel and Summer of Code 2017","permalink":"/babel-website/blog/2017/08/09/babel-and-summer-of-code"}},"content":"We landed the [parser support](https://github.com/babel/babylon/pull/587) for\\n[the stage-2 decorators spec](https://tc39.github.io/proposal-decorators/) last\\nweek at Babylon \u2014 the parser for Babel. If you don\u2019t know what a decorator is,\\nthe gist of it is that a decorator gives some concise syntax to affect the\\ndefinition of a class or a class method which you decorate.\\n\\n\x3c!--truncate--\x3e\\n\\n```js title=\\"JavaScript\\"\\n@frozen class Foo {\\n  @configurable(false)\\n  @enumerable(true)\\n  method() {}\\n\\n  @throttle(500)\\n  expensiveMethod() {}\\n}\\n```\\n\\nOne of the more remarkable things about this PR was the number of reviews it\\nreceived\\n\\n[![Screenshot of PR reviews on github](https://pbs.twimg.com/media/DC7oDlmXUAAa3nD.jpg)](https://twitter.com/left_pad/status/877894712476258305)\\n\\nPerhaps this could be because decorators really are one of the much hyped about\\nfeatures in JavaScript. Angular even considered making their own JS flavor\\ncalled AtScript before they decided to go with TypeScript since they love\\ndecorators (or as they liked to call it \u201cannotations\u201d) so much.\\n\\nWell, there is more to the story. As I was recently discussing with a mentor,\\nreviewing PRs is a tough job. Reviewing PRs is comparably as hard as solving the\\nbug in the first place was. Apart from the technical aspect of reviewing \u2014 which\\nis ensuring that the bug is being fixed optimally (by perhaps even getting an\\nidea of how they would solve the issue and seeing how the submitted patch\\ncompares to their idea) \u2014 there\u2019s another big hindrance. A reviewer has to be\\naware of the whole issue, the discussion surrounding it, and have familiarity\\nwith the part of the codebase that the PR makes changes to.<sup><a href=\\"#footnotes\\">1</a></sup>\\n\\nWhen I initially joined Babel, and was not-so-familiar with the codebase, every\\nissue I encountered was almost instantly answered after I posted it in Babel\u2019s\\nchatroom, which left me with the (wrong) impression that perhaps the maintainers\\nare some god-like figures who know it all and that everyone\u2019s expected to adhere\\nto the same fictitious standards.\\n\\nEven after becoming familiar with the codebase, I was submitting PRs without\\nproper documentation under the assumption that it took me a while to solve the\\nissue and see all things, but if the reviewers see the code they\u2019d instantly be\\nable to evaluate it just like they were answering my questions.\\n\\nEh! Very wrong. Let me just bust this myth (assuming I\u2019m not the only one who\\nhas felt it). Even they (maintainers) won\u2019t have all the answers at times, and\\nsometimes you\u2019ll have to search for yourself \u2014 and that\u2019s how it should be.<sup><a href=\\"#footnotes\\">2</a></sup>\\n\\nIn open source, there are a lot of people who want to contribute, but are unable\\nto because they don\u2019t know how to code / they don\u2019t know how to present PRs /\\nthey don\u2019t know what the project wants / they don\u2019t know what the maintainers\\nwant / a ton of other things. A lot of times you\u2019ll find help along the way,\\nbut a lot of that is controlled by factors beyond your control.<sup><a href=\\"#footnotes\\">3</a></sup>\\n\\nOne of the joys of getting your PR merged is not just the programming but\\nsomehow making the project move forward in the way it is expected to be moved\\nforward. And doing that by somehow identifying what the project needs and being\\nable to deliver that.\\n\\nIn order to merge this PR I had to find people and talk to them \u2014 people who use\\ndecorators, people who are interested in seeing an implementation of decorators,\\npeople who want to contribute to babel for decorators. After getting consensus\\non how to move forward<sup><a href=\\"#footnotes\\">4</a></sup>, I had to go through the spec and all the existing\\ndiscussions surrounding it so that my understanding of the spec could be up to\\nspeed with other people.\\n\\nAnd finally \u2014 the most important part which I think got this PR the number of\\nreviews that we saw \u2014 making it easy for people who\u2019ll be reviewing my PR by\\nexplaining everything they would need to get up to speed with the whole\\nsituation. By chance, at the time the PR I made was able to satisfy some of the\\ncriteria I mentioned earlier:\\n\\n1.  Making sure reviewers are aware of the whole issue (by mentioning in detail the\\ndecisions I\u2019ve taken so they don\u2019t necessarily have to look at the code to\\nfigure it out)\\n2.  The discussion surrounding it (by mentioning alternate viewpoints on some of the\\ndecisions so as to make it easier to compare them with the decisions made)\\n3.  Explaining clearly my strategy to solve the problem (to assist the technical\\naspect of reviewing \u2014 so that the reviewers can know what I\u2019ve done and then see\\nthe code rather than the other way around)\\n\\nAnd that\u2019s what did it! (or so I think). So there\u2019s the mystery unraveled \u2014 A PR\\nwith unusually high number of reviews\xb9.\\n\\n**PS**: I wanted to share my personal experience with this blog post,\\nnot write a guide to be followed or a technical blog post. Therefore, some\\nstatements which I make may not hold true in general or may be debatable, so\\nthey should just be read in the context of the experience I narrate.\\n\\nAlso note that if you\u2019re looking for decorators support in Babel, we still have\\na long way to go. This is just the parser and work on the transform (which\\nconverts your code to functionally equivalent ES5) is yet to be done. But now\\nthat we\u2019ve made the decisions that needed to be made, things will move more\\nsmoothly from here onwards.\\n\\n## Footnotes\\n\\n1. We have a shortage of manpower when it comes to reviewing PRs. It was also\\nrecently discussed in one of our weekly meetings ([link to the meeting\\nnotes](https://github.com/babel/notes/blob/master/2017-06/june-21.md#priority-topics)).\\nPerhaps you could help us with this. Drop by [our slack\\nchatroom](https://slack.babeljs.io/) and offer your help!\\n2. I feel that the myth stems from the fact that when you\u2019re new to the project the\\nmentors definitely do know more about the project than you\\n3. (to illustrate) Some random factors which might affect the chances of you\\ngetting help:\\n- If someone was online who worked on the same thing when you post a question on\\nthe chatroom\\n- Someone who knows your doubt will take a lot of time to deal with and they\\nwant to give you personal attention and not just throw information at you\\n- Someone who\u2019s able to gauge where you\u2019re coming from, and so on.\\n4. We\u2019d been stuck for [a while](https://github.com/babel/babel/issues/2645) since\\n*a lot* of people use a nonstandard implementation for decorators which came at\\naround the time the spec was in stage-0. The changes in the spec are not\\nbackwards-compatible so we were unsure on how we should introduce support for\\nthe new spec without causing much disruption for people who use Babel. We\\nfinally decided that we\u2019ll be introducing this PR as an opt-in to allow people to\\nmigrate at their own pace.\\n\\n## Outro\\nPeeyush Kushwaha is a [GSoC 2017](https://summerofcode.withgoogle.com/organizations/5842528113786880/#6632162202746880) student. Give him a follow on Twitter: [@PeeyFTW](https://twitter.com/PeeyFTW)!\\n\\nThis was originally posted [here on medium](https://medium.com/@peey/personal-experiences-at-babel-1-a-pr-with-unusually-high-number-of-reviews-5cb49ee71897). Please check out our first post on [Summer of Code](https://babeljs.io/blog/2017/08/09/babel-and-summer-of-code) for more info!"},{"id":"/2017/08/09/babel-and-summer-of-code","metadata":{"permalink":"/babel-website/blog/2017/08/09/babel-and-summer-of-code","source":"@site/blog/2017-08-09-babel-and-summer-of-code.md","title":"Babel and Summer of Code 2017","description":"For the first time, Babel is participating in Summer of Code!","date":"2017-08-09T12:00:00.000Z","formattedDate":"August 9, 2017","tags":[],"readingTime":4.545,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"Babel and Summer of Code 2017","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2017-08-09T12:00:00.000Z","categories":"announcements","share_text":"Babel and Summer of Code 2017","third_party_js":["https://platform.twitter.com/widgets.js"],"custom_js_with_timestamps":["docs.js"]},"prevItem":{"title":"Personal Experiences at Babel #1 \u2014 A PR with Unusually High Number of Reviews","permalink":"/babel-website/blog/personal-experiences-at-babel-1-a-pr-with-unusually-high-number-of-reviews"},"nextItem":{"title":"Upgrade to Babel 7 for Tool Authors (WIP)","permalink":"/babel-website/blog/2017/03/01/upgrade-to-babel-7-for-tool-authors"}},"content":"For the first time, Babel is participating in *Summer of Code*!\\nAlthough we forgot to make an announcement post earlier, here\'s our progress update \ud83d\ude0a\\n\\n\x3c!--truncate--\x3e\\n\\n## What is it?\\n\\n### [Google Summer of Code](https://summerofcode.withgoogle.com/)\\n\\n> [Babel\'s Profile for GSoC](https://summerofcode.withgoogle.com/organizations/5842528113786880/)\\n\\nGSoC is an international annual program which pairs open source projects and university students! We work with the students on a project and Google pays them a stipend.\\n\\n#### Peeyush Kushwaha (India)\\n\\n- Github: [@peey](https://github.com/peey), Twitter: [@peeyFTW](https://twitter.com/peeyFTW)\\n\\n#### Karl Cheng (Australia)\\n\\n- Github: [@Qantas94Heavy](https://github.com/Qantas94Heavy), Twitter: [@qantas94heavy](https://twitter.com/qantas94heavy)\\n\\nWe\'re happy to be working with both Peeyush and Karl!\\n\\nPeeyush has already made a [bunch of PRs](https://github.com/pulls?utf8=%E2%9C%93&q=is%3Apr+author%3Apeey+user%3Ababel+is%3Aboth) with improving documentation and bug fixes. In addition, he\'s been focusing on the much desired [decorators transform](https://github.com/tc39/proposal-decorators). We\'ll be updating [this issue](https://github.com/babel/proposals/issues/11) with more progress.\\n\\nKarl has similarly made many [contributions already](https://github.com/pulls?utf8=%E2%9C%93&q=is%3Apr+author%3AQantas94Heavy+user%3Ababel+), and is now focusing on the private properties transform (now part of the [combined class properties proposal](https://github.com/tc39/proposal-class-fields)). We\'ll be updating [this issue](https://github.com/babel/proposals/issues/12) with more progress.\\n\\nTo track their work on these transforms and the progress of other specs/proposals, be sure to check out the [Babel TC39 Proposal Status Tracker](https://github.com/babel/proposals).\\n\\nIt\'s been really amazing working with them the past 2 months! We\'ve really enjoyed teaching, working, and learning with them on the project. Partnering with TC39 in making these Babel plugins a reality has also been helpful for everyone.\\n\\n### Rails Girls Summer of Code\\n\\n> [Babel\'s RGSoC Page](https://teams.railsgirlssummerofcode.org/teams/307)\\n\\nRGSoC is a similar program to GSOC: annual, global, pays a stipend, brings projects and newcomers together, with a focus on bringing diversity into Open Source.\\n\\n#### Kara de la Marck (London)\\n\\n- Github: [@MarckK](https://github.com/MarckK), Twitter: [@KaraMarck](https://twitter.com/KaraMarck)\\n\\n#### Emma Deacon (London)\\n\\n- Github: [@EmmaDeacon](https://github.com/EmmaDeacon), Twitter: [@EmmaMDeacon](https://twitter.com/EmmaMDeacon)\\n\\nWhere RGSoC differs from GSoC is that it matches developers with team coaches in addition to the open source project\'s  mentors. Pivotal London is working with Kara and Emma as their daily coworkers/supporters. We are lucky to have _seven_ awesome coaches from their organization to help them, while on our side we can leave feedback on issues/PRs in GitHub and in our Slack.\\n\\nWe\'re incredibly lucky to work with both Kara and Emma!\\n\\nThey\'re currently working on some codemods! Ideally we would have codemods to convert ES2015 to ES2016+ ([Lebab](https://lebab.io/)) and if necessary, codemods to remove dropped TC39 proposals. We\'d also want to have codemods for our upcoming Babel 7 release for a easy/automated upgrade!\\n\\nIn the meantime, they\'ve already done all the necessary work to implement the new [optional catch binding](https://github.com/tc39/proposal-optional-catch-binding) proposal as a plugin! It was really cool to see that we had already released the Babel plugin before the TC39 meeting a few weeks ago! You can follow this [issue](https://github.com/babel/proposals/issues/7) for more information.\\n\\n## Why?\\n\\n- Participating in these programs means more developer exposure to participating in open source!\\n- Helps us as a project onboard and mentor new contributors in a more formal, structured way. It helps us identify any issues with our code setup, and more importantly with our process (multiple timezones, different backgrounds) and culture.\\n- Helps bring in different people into the project that otherwise may not have contributed to Babel or open source. The hope is that they continue to stick around or be involved in the open source community! We want to do our part to make open source a welcoming and diverse community, focusing on individuals first.\\n- We get _four_ full time people working on our project for a whole summer! This is a great opportunity for each of them to work on high impact problems, and for us to be in a support role to help them succeed.\\n- Hopefully it inspires some to get involved as a result of the program, and for others to step up as mentors/maintainers (ideally from the hundreds of top companies that use this project everyday) to bring people in.\\n- Ultimately, this is just about building a community and making a great experience for our students/interns.\\n\\nIt takes a lot of work to get involved in any community, and it\'s up to the people already involved to make this as easy as possible to join in. It requires one to spend the time to meet people where they are at (in many ways), not just write code but to invest in others. A community is about the people, and open source is about the community.\\n\\nParticipating in Summer of Code gives us a great opportunity to make this happen, and we\'re continuously working on improving.\\n\\nLook at all the amazing work they\'ve already done! We\'re really excited for what\'s to come and will do another post on our results and what we\'ve learned.\\n\\n> Look out for next year\'s [RGSoC](https://twitter.com/RailsGirlsSoC) and [GSoC](https://twitter.com/gsoc) if you want to participate (for your own project, as a participant, or to help us out) *cough Sean*.\\n\\n---\\n\\n## Thanks\\n\\nTo my team at Behance/Adobe for allowing me to spend time at work maintaining Babel and participating in Summer of Code!\\n\\nThanks to all the other helpers/maintainers ([Brian](https://github.com/existentialism), [Logan](https://github.com/loganfsmyth), [Jessica](https://github.com/Jessidhia), [Sven](https://github.com/xtuc), [Justin](https://github.com/jridgewell), [Boopathi](https://github.com/boopathi)), on Slack and GitHub issues! It can be a lot of work managing all the parts of an open source project, so we are glad to have the extra help!\\n\\nHuge shoutout to many [TC39](https://github.com/tc39) members like [@littledan](https://twitter.com/littledan), [@bakkoting](https://twitter.com/bakkoting), [@ljharb](https://twitter.com/ljharb) for helping review PRs, better inform/work on [babel/proposals](https://github.com/babel/proposals), and discuss implementation/spec details in our Slack rooms! I know it\'s a lot of work \ud83d\ude42\\n\\nAnd thanks to [Brian](https://github.com/existentialism) again for help with editing!"},{"id":"/2017/03/01/upgrade-to-babel-7-for-tool-authors","metadata":{"permalink":"/babel-website/blog/2017/03/01/upgrade-to-babel-7-for-tool-authors","source":"@site/blog/2017-03-01-upgrade-to-babel-7-for-tool-authors.md","title":"Upgrade to Babel 7 for Tool Authors (WIP)","description":"We are moving the migration guide to a docs page instead of a blog post!","date":"2017-03-01T11:00:00.000Z","formattedDate":"March 1, 2017","tags":[],"readingTime":0.185,"hasTruncateMarker":false,"authors":[{"name":"Sven SAULEAU, Henry Zhu"}],"frontMatter":{"layout":"post","title":"Upgrade to Babel 7 for Tool Authors (WIP)","author":"Sven SAULEAU, Henry Zhu","date":"2017-03-01T11:00:00.000Z","categories":"announcements","share_text":"Upgrade to Babel 7 for Tool Authors","third_party_js":["https://platform.twitter.com/widgets.js"],"custom_js_with_timestamps":["docs.js"]},"prevItem":{"title":"Babel and Summer of Code 2017","permalink":"/babel-website/blog/2017/08/09/babel-and-summer-of-code"},"nextItem":{"title":"Upgrade to Babel 7 (moved)","permalink":"/babel-website/blog/2017/03/01/upgrade-to-babel-7"}},"content":"We are moving the migration guide to a docs page instead of a blog post!\\n\\n## Check out [v7-migration-api](https://babeljs.io/docs/en/next/v7-migration-api)!\\n\\nRefer users to this document for those that create tools that depend on Babel (such as Babel plugins)."},{"id":"/2017/03/01/upgrade-to-babel-7","metadata":{"permalink":"/babel-website/blog/2017/03/01/upgrade-to-babel-7","source":"@site/blog/2017-03-01-upgrade-to-babel-7.md","title":"Upgrade to Babel 7 (moved)","description":"We are moving the migration guide to a docs page instead of a blog post!","date":"2017-03-01T11:00:00.000Z","formattedDate":"March 1, 2017","tags":[],"readingTime":0.095,"hasTruncateMarker":false,"authors":[{"name":"Sven SAULEAU, Henry Zhu"}],"frontMatter":{"layout":"post","title":"Upgrade to Babel 7 (moved)","author":"Sven SAULEAU, Henry Zhu","date":"2017-03-01T11:00:00.000Z","categories":"announcements","share_text":"Upgrade to Babel 7","third_party_js":["https://platform.twitter.com/widgets.js"],"custom_js_with_timestamps":["docs.js"]},"prevItem":{"title":"Upgrade to Babel 7 for Tool Authors (WIP)","permalink":"/babel-website/blog/2017/03/01/upgrade-to-babel-7-for-tool-authors"},"nextItem":{"title":"6.23.0 Released","permalink":"/babel-website/blog/2017/02/13/6.23.0"}},"content":"We are moving the migration guide to a docs page instead of a blog post!\\n\\n## Check out [v7-migration](https://babeljs.io/docs/en/next/v7-migration)!"},{"id":"/2017/02/13/6.23.0","metadata":{"permalink":"/babel-website/blog/2017/02/13/6.23.0","source":"@site/blog/2017-02-13-6.23.0.md","title":"6.23.0 Released","description":"In this release: multiple improvements to the react-constant-elements plugin by @STRML, some codegen optimizations, and lots of bug fixes! Thanks to @loganfsmyth for the release + reviews!","date":"2017-02-13T20:00:00.000Z","formattedDate":"February 13, 2017","tags":[],"readingTime":6.62,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"6.23.0 Released","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2017-02-13T20:00:00.000Z","categories":"announcements","share_text":"6.23.0"},"prevItem":{"title":"Upgrade to Babel 7 (moved)","permalink":"/babel-website/blog/2017/03/01/upgrade-to-babel-7"},"nextItem":{"title":"The State of Babel","permalink":"/babel-website/blog/2016/12/07/the-state-of-babel"}},"content":"In this release: multiple improvements to the `react-constant-elements` plugin by [@STRML](https://github.com/STRML), some codegen optimizations, and lots of bug fixes! Thanks to [@loganfsmyth](https://github.com/loganfsmyth) for the release + reviews!\\n\\n\x3c!--truncate--\x3e\\n\\n> Shoutouts to [@xtina-starr](https://github.com/xtina-starr), [@finkef](https://github.com/finkef), [@chitchu](https://github.com/chitchu), [@yongxu](https://github.com/yongxu), [@jwbay](https://github.com/jwbay), [@hex13](https://github.com/hex13) for their first PRs! \ud83c\udf89\\n\\nCheck out [GitHub](https://github.com/babel/babel/releases/tag/v6.23.0) for the whole changelog.\\n\\n---\\n\\nI\'ll be writing up the 7.0 post (our current progress) soon so look out for that! We want to do whatever we can to make it easy for both end-users and plugin/tool authors to upgrade seamlessly: whether it be a beta period for the release, a [7.0 upgrade guide](https://github.com/babel/babel.github.io/pull/1146), codemods if necessary, a bot to automatically upgrade your OSS project from 6 to 7, or any other suggestions you can give us!\\n\\nSince not everyone realises, I wanted to re-iterate again that our [team](https://github.com/babel/babel#team) is still a small group of volunteers. There\'s no company sponsor or even anyone working on it full time.\\n\\nWe\'d love for you to contribute (especially not code!), so please reach out to us! More designers, technical writers/editors, and teachers for our website would be amazing.\\n\\nAnd in other news, Babel has been accepted as a [Rails Girls Summer of Code](https://teams.railsgirlssummerofcode.org/projects/177-babel) project as well as waiting to hear back as a mentor organization for [Google Summer of Code](https://summerofcode.withgoogle.com/)!\\n\\n---\\n\\n## \ud83d\ude80 New Feature\\n\\n### [#5236](https://github.com/babel/babel/pull/5236) `transform-es2015-block-scoping`: Add option `throwIfClosureRequired` to throw on slow code. ([@spicyj](https://github.com/spicyj))\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\n    [\\"transform-es2015-block-scoping\\", {\\n      \\"throwIfClosureRequired\\": true\\n    }]\\n  ]\\n}\\n```\\n\\nIn cases such as the following, it is impossible to rewrite let/const without adding an additional function and closure while transforming:\\n\\n```js title=\\"JavaScript\\"\\nfor (let i = 0; i < 5; i++) {\\n  setTimeout(() => console.log(i), 1);\\n}\\n```\\n\\nIn extremely performance-sensitive code, this can be undesirable. If `\\"throwIfClosureRequired\\": true` is set, Babel throws when transforming these patterns instead of automatically adding an additional function.\\n\\n### [#4812](https://github.com/babel/babel/pull/4812) `transform-react-constant-elements`: Support pure expressions ([@STRML](https://github.com/STRML))\\n\\nAdds a `path.isPure()` check to the plugin.\\n\\n> The expression will remain in the hoisted code, even though it could be statically evaluated. UglifyJS/Babili will take care of that in many cases.\\n\\nIn\\n\\n```js title=\\"JavaScript\\"\\nconst OFFSET = 3;\\n\\nvar Foo = React.createClass({\\n  render: function () {\\n    return (\\n      <div tabIndex={OFFSET + 1} />\\n    );\\n  }\\n});\\n```\\n\\nOut\\n\\n```js title=\\"JavaScript\\"\\nconst OFFSET = 3;\\n\\nvar _ref = <div tabIndex={OFFSET + 1} />;\\n\\nvar Foo = React.createClass({\\n  render: function () {\\n    return _ref;\\n  }\\n});\\n```\\n\\n> Deopt\\n\\nAs noted in [facebook/react#3226](https://github.com/facebook/react/issues/3226), it\'s not safe to reuse elements with mutable props.\\n\\n```js title=\\"JavaScript\\"\\n<div style={\\n  { width: 100 }\\n} />\\n```\\n\\n### [#5288](https://github.com/babel/babel/pull/5288) `babel-preset-flow`: Add new preset ([@thejameskyle](https://github.com/thejameskyle))\\n\\n`babel-preset-flow` just includes `transform-flow-strip-types`.\\n\\nBefore (still valid)\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"plugins\\": [\\"transform-flow-strip-types\\"]\\n}\\n```\\n\\nAfter\\n\\n```json title=\\"babel.config.json\\"\\n{\\n  \\"presets\\": [\\"flow\\"]\\n}\\n```\\n\\n> FYI: the React preset still includes the flow plugin by default (we might change it when TS support is added)\\n\\nThanks to [@simnalamburt](https://github.com/simnalamburt) for giving us the package name!\\n\\n### [#5230](https://github.com/babel/babel/pull/5230) `babel-traverse`: Add extra sibling methods ([@chitchu](https://github.com/chitchu))\\n\\nFor plugin authors: there\'s already a `path.getSibling(number)`, so we\'re adding a few helper methods.\\n\\n```js title=\\"JavaScript\\"\\npath.getPrevSibling(); // path.getSibling(path.parentPath.key - 1)\\npath.getNextSibling(); // path.getSibling(path.parentPath.key + 1)\\npath.getAllPrevSiblings(); // returns Array<NodePath> of previous siblings\\npath.getAllNextSiblings();// returns Array<NodePath> of next siblings\\n```\\n\\n## \ud83d\udc1b Bug Fixes\\n\\n> Because almost every bug fix can be an opportunity to learn more about JavaScript and how the tool that you use works, I would check out some of the PRs!\\n\\n### [#5298](https://github.com/babel/babel/pull/5298) Fix loose `transform-es2015-for-of` with label. ([@jridgewell](https://github.com/jridgewell))\\n\\n```js title=\\"JavaScript\\"\\nb: for (let c of d()) { // previously, the label was completely dropped\\n  for (let e of f()) {\\n    continue b;\\n  }\\n}\\n```\\n\\n### [#5153](https://github.com/babel/babel/pull/5153) `transform-react-constant-elements`: Hoisting fixes ([@STRML](https://github.com/STRML))\\n\\n> Better hoisting inside variable declarations\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nfunction render() {\\n  const bar = \\"bar\\", renderFoo = () => <foo bar={bar} baz={baz} />, baz = \\"baz\\";\\n\\n  return renderFoo();\\n}\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nfunction render() {\\n  const bar = \\"bar\\",\\n        renderFoo = () => _ref2,\\n        baz = \\"baz\\",\\n        _ref2 = <foo bar={bar} baz={baz} />;\\n\\n  return renderFoo();\\n}\\n```\\n\\n> Hoisting with Higher Order Components\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nconst HOC = component => component;\\n\\nconst Parent = () => (\\n  <div className=\\"parent\\">\\n    <Child/>\\n  </div>\\n);\\n\\nexport default Parent;\\n\\nlet Child = () => (\\n  <div className=\\"child\\">\\n    ChildTextContent\\n  </div>\\n);\\nChild = HOC(Child);\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nconst HOC = component => component;\\n\\nconst Parent = () => _ref;\\n\\nexport default Parent;\\n\\nvar _ref2 = <div className=\\"child\\">\\n    ChildTextContent\\n  </div>;\\n\\nlet Child = () => _ref2;\\nChild = HOC(Child);\\n\\nvar _ref = <div className=\\"parent\\">\\n    <Child />\\n  </div>;\\n```\\n\\n### [#5143](https://github.com/babel/babel/pull/5143) `transform-react-constant-elements`: Fix `PathHoister` hoisting JSX member expressions on `this` ([@STRML](https://github.com/STRML))\\n\\n`<this.component />` was previously hoisted outside its own function (doesn\'t make sense because otherwise `this` would be `undefined`)\\n\\n```js title=\\"JavaScript\\"\\nfunction render() {\\n  this.component = \\"div\\";\\n  return () => <this.component />;\\n}\\n```\\n\\n\\n```js title=\\"JavaScript\\"\\nfunction render() {\\n  this.component = \\"div\\";\\n\\n  var _ref = <this.component />;\\n\\n  return () => _ref;\\n}\\n```\\n\\n### [#5030](https://github.com/babel/babel/pull/5030) `transform-do-expressions`: Prevent multiple return statements in a loop when replacing expressions. ([@existentialism](https://github.com/existentialism))\\n\\n```js title=\\"JavaScript\\"\\nlet p\\nlet a = do {\\n  while (p = p.parentPath) {\\n    if (a) {\\n      \'a\'\\n    } else {\\n      \'b\'\\n    }\\n  }\\n};\\n```\\n\\n```js title=\\"JavaScript\\"\\nlet p;\\nlet a = function () {\\n  var _ret;\\n\\n  while (p = p.parentPath) {\\n    if (a) {\\n      _ret = \'a\';\\n    } else {\\n      _ret = \'b\';\\n    }\\n  }\\n  return _ret; // previously had an extra return\\n}();\\n```\\n\\n### [#5260](https://github.com/babel/babel/pull/5260) `babel-register`: Fix a TypeError with the cache. ([@xtuc](https://github.com/xtuc))\\n\\n### [#5206](https://github.com/babel/babel/pull/5206) `babel-traverse`: Deopt evaluation of undefined with a local binding ([@boopathi](https://github.com/boopathi))\\n\\nIf `undefined`, `NaN`, `Infinity` are redefined, deopt.\\n\\n### [#5195](https://github.com/babel/babel/pull/5195) `babel-plugin-transform-runtime`: Don\'t compile certain symbol properties. ([@taion](https://github.com/taion))\\n\\nDon\'t pull in the individual `Symbol.asyncIterator`/`Symbol.observable` polyfills and pull in the full `Symbol` polyfill instead.\\n\\n### [#5258](https://github.com/babel/babel/pull/5258) `babel`: Check if it is installed globally and displays correct cli message. ([@xtina-starr](https://github.com/xtina-starr))\\n\\nNow if you install `babel` the error message will display either `-g` or not.\\n\\n### [#5270](https://github.com/babel/babel/pull/5270) `babel-generator`: Emit parens for await of ternary expressions. ([@erikdesjardins](https://github.com/erikdesjardins))\\n\\n```js title=\\"JavaScript\\"\\nasync function asdf() {\\n  await (1 ? 2 : 3);\\n}\\n```\\n\\n### [#5193](https://github.com/babel/babel/pull/5193) `babel-generator`: Fix missing parens when `FunctionExpression` is a tag in a template string. ([@existentialism](https://github.com/existentialism))\\n\\n```js title=\\"JavaScript\\"\\n(() => {})``;\\n(function(){}``);\\n```\\n\\n### [#5235](https://github.com/babel/babel/pull/5235) `transform-es2015-modules-commonjs`: Limit export node default assignment stack size #4323. ([@mattste](https://github.com/mattste))\\n\\nAn interesting issue when importing/exporting a lot!\\n\\n```js title=\\"JavaScript\\"\\nimport { foo, foo1, foo2 ... } from \\"foo\\"; // assume ... is 100 imports/exports\\nexport { foo, foo1, foo2 ... }\\n```\\n\\nPart of the generated code looks like:\\n\\n```js title=\\"JavaScript\\"\\nexports.Foo6 = exports.Foo5 = ...\\n```\\n\\nThus with a file that [exports a lot of modules](https://github.com/callemall/material-ui/blob/c9af9606bcea6551ceaadc2f6430d629eb679e84/src/svg-icons/index.js) it creates so many nested assignment nodes in the AST the code generator errors with `Maximum call stack size exceeded`.\\n\\nThe solution is to break up the expression into sets of 100.\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nexports.foo100 = undefined; // split by 100\\nexports.foo99 = exports.foo98 = ... exports.foo1 = exports.foo = undefined\\n```\\n\\n### [#5255](https://github.com/babel/babel/pull/5255) `babel-generator`: Use `trim` instead of `lodash/trimEnd` for codegen performance ([@jwbay](https://github.com/jwbay))\\n\\n> `lodash/trimEnd` executes a regex against potentially massive strings which can freeze node. (106ms vs. 5ms)\\n\\n### [#5050](https://github.com/babel/babel/pull/5050) `babel-traverse`: Rewrite `Hub` as an interface ([@yongxu](https://github.com/yongxu))\\n\\n> This was reverted due to an incompatible change to babel-core\\n\\nThere are a few cases where `babel-traverse` can\'t be used standalone so this removes some code that tied `babel-traverse` to `babel-core`\'s implementation.\\n\\n---\\n\\n## \ud83c\udf0f Committers: 20\\n\\n- Andres Suarez ([zertosh](https://github.com/zertosh))\\n- Ben Alpert ([spicyj](https://github.com/spicyj))\\n- Boopathi Rajaa ([boopathi](https://github.com/boopathi))\\n- Brian Ng ([existentialism](https://github.com/existentialism))\\n- Christina ([xtina-starr](https://github.com/xtina-starr)) First PR!\\n- Erik Desjardins ([erikdesjardins](https://github.com/erikdesjardins))\\n- Fabian Finke ([finkef](https://github.com/finkef)) First PR!\\n- Henry Zhu ([hzoo](https://github.com/hzoo))\\n- Jimmy Jia ([taion](https://github.com/taion))\\n- Justin Ridgewell ([jridgewell](https://github.com/jridgewell))\\n- Logan Smyth ([loganfsmyth](https://github.com/loganfsmyth))\\n- Matt Stewart ([mattste](https://github.com/mattste))\\n- Samuel Reed ([STRML](https://github.com/STRML))\\n- Sergey Rubanov ([chicoxyzzy](https://github.com/chicoxyzzy))\\n- Sven SAULEAU ([xtuc](https://github.com/xtuc))\\n- Vicente Jr Yuchitcho ([chitchu](https://github.com/chitchu)) First PR!\\n- Yongxu Ren ([yongxu](https://github.com/yongxu)) First PR!\\n- [jwbay](https://github.com/jwbay) First PR!\\n- james kyle ([thejameskyle](https://github.com/thejameskyle))\\n- \u0141ukasz Lity\u0144ski ([hex13](https://github.com/hex13)) First PR!\\n\\nCheck out [Github](https://github.com/babel/babel/releases/tag/v6.23.0) for the whole changelog!"},{"id":"/2016/12/07/the-state-of-babel","metadata":{"permalink":"/babel-website/blog/2016/12/07/the-state-of-babel","source":"@site/blog/2016-12-07-the-state-of-babel.md","title":"The State of Babel","description":"- Some History","date":"2016-12-07T14:30:00.000Z","formattedDate":"December 7, 2016","tags":[],"readingTime":21.91,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"The State of Babel","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2016-12-07T14:30:00.000Z","categories":"announcements","share_text":"The State of Babel","third_party_js":["https://platform.twitter.com/widgets.js"],"custom_js_with_timestamps":["docs.js"]},"prevItem":{"title":"6.23.0 Released","permalink":"/babel-website/blog/2017/02/13/6.23.0"},"nextItem":{"title":"6.19.0 Released","permalink":"/babel-website/blog/2016/11/16/6.19.0"}},"content":"- [Some History](https://babeljs.io/blog/2016/12/07/the-state-of-babel#some-history)\\n- [Current Status](https://babeljs.io/blog/2016/12/07/the-state-of-babel#current-status)\\n- [The Future](https://babeljs.io/blog/2016/12/07/the-state-of-babel#the-future)\\n- [Community](https://babeljs.io/blog/2016/12/07/the-state-of-babel#community)\\n\\n\x3c!--truncate--\x3e\\n\\n> Previous issues: [Babel Roadmap #4130](https://github.com/babel/babel/issues/4130), [6.0 #2168](https://github.com/babel/babel/issues/2168)\\n\\nPlease check out the [Community](https://babeljs.io/blog/2016/12/07/the-state-of-babel#community) section if nothing else.\\n\\n> Also published as part of [Mariko Kosaka\'s](https://twitter.com/kosamari) 2016 [Web Advent Calendar](http://web.advent.today/)!\\n\\n## Some History\\n\\n[Sebastian](https://github.com/kittens) created \\"6to5\\" in September of 2014. Interestingly enough, he made it to scratch an itch he had with understanding programming languages and how they work. You might have assumed whoever created the project already knew how compilers worked and understood JavaScript perfectly... but you would be wrong! Check out his post for a great read of his story: [~2015 in Review](https://medium.com/@sebmck/2015-in-review-51ac7035e272#.jdoo279bl).\\n\\n6to5 did exactly that: easily turn ES6 code into ES5 code. When 6to5 became Babel as mentioned in [Not Born to Die](https://babeljs.io/blog/2015/02/15/not-born-to-die), it became a platform: a suite of tools designed to create the next generation of JavaScript tooling. No longer did it just compile ES6 to ES5, it allowed developers to build tools on top of it.\\n\\nHere are some of our milestones:\\n\\n- In [5.0.0](https://babeljs.io/blog/2015/03/31/5.0.0), Babel aligned more with the [TC39 process](https://tc39.github.io/process-document/) by introducing `stages`, added a `.babelrc` config option, and created a plugin system for custom transforms.\\n- In [6.0.0](https://babeljs.io/blog/2015/10/29/6.0.0), Babel became modular (a pretty controversial idea at the time). This was a huge change that led to opt-in functionality (no defaults) and the concept of `Presets` and Plugin Options.\\n  - As mentioned in his article, Sebastian joined Facebook in July 2015 and worked on the entire development of Babel 6 on company time.\\n- [6.3.13](https://github.com/babel/babel/blob/main/.github/CHANGELOG-v6.md#638-6313) Sebastian extracted our [monorepo](https://github.com/babel/babel/blob/main/doc/design/monorepo.md) build/publish tools into what is now [Lerna](https://github.com/lerna/lerna). (What\'s funny is [James](https://github.com/thejameskyle) rewrote it 3 times and I had to review everything)\\n  - After this was around when both Sebastian and James got burned out on Babel, and a few contributors stepped up.\\n  - We struggled to find direction and deal with the bugs/requests coming in but we got a lot of stuff done!\\n- [6.13.0](https://github.com/babel/babel/releases/tag/v6.13.0) finally added [Preset Options](http://babeljs.io/docs/plugins/#plugin-preset-options).\\n- [6.14.0](http://babeljs.io/blog/2016/08/24/6.14.0) added a [latest-preset](http://babeljs.io/docs/plugins/preset-latest/) that keeps up to date with the yearly JavaScript specification.\\n- [6.16.0](http://babeljs.io/blog/2016/09/28/6.16.0) allowed changing out the parser or code-generator.\\n- In August, we released [Babili, a minifier based on Babel](https://babeljs.io/blog/2016/08/30/babili).\\n- In September, we released the first version of [babel-preset-env](https://github.com/babel/babel-preset-env) (read on for details).\\n- After a year on [Phabricator](https://twitter.com/sebmck/status/667097915605708804), we moved back to to [GitHub issues](https://twitter.com/left_pad/status/773619871074648064) thanks solely to [@danez](https://github.com/danez) and his amazing (and underappreciated) work.\\n\\n> If you\'re using Babel, let us know with a [PR](https://github.com/babel/babel.github.io/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Aclosed+%22New+User%3A%22) to our [users page](http://babeljs.io/users/)!\\n\\nNow `babel-core` is downloaded over 5 million times per month and almost 60 million times total and used at huge companies like Facebook/Netflix/Airbnb and other OSS projects like React/Yarn.\\n\\n\\nThanks everyone for your continued support! We want to continue acting as the foundation of the JavaScript toolchain: compilation, linting, minification, codemods, code coverage, etc.\\n\\n## Current Status\\n\\nIf you\'re interested in helping out please check out the issues linked below!\\n\\n### Maintaining Babel plugins [for each proposal in TC39](https://github.com/tc39/proposals) starting from Stage 0\\n\\n[TC39](https://github.com/tc39) stands for Ecma International, Technical Committee 39: it\'s the committee that makes JavaScript.\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\"><a href=\\"https://twitter.com/b0rk\\">@b0rk</a> Short answers:<br/><br/>Who&#39;s there? Engine implementers, developers, a handful of academics and theorists, and <a href=\\"https://twitter.com/BrendanEich\\">@BrendanEich</a>.</p>&mdash; Yehuda Katz (@wycats) <a href=\\"https://twitter.com/wycats/status/803821500394598401\\">November 30, 2016</a></blockquote>\\n\\nBabel uses [TC39\'s concept of stages](http://babeljs.io/docs/plugins/#stage-x-experimental-presets-) to categorize its experimental plugins. Users should be able to easily use features before they are all implemented in browsers in [stage 4 of the TC39 process](https://tc39.github.io/process-document/).\\n\\nBabel is fundamental in the process given its place in the ecosystem: it is significantly easier for a developer to update a `.babelrc` file than a browser flag and much faster to write a Babel plugin than to implement the feature natively in the browser. This is the core of Babel.\\n\\nBut the proposals process involves significant iteration: proposals can change in syntax or even get dropped. Because TC39 meets every 2 months, plugins should be updated as least as often as each change in stage so that users can be in sync.\\n\\n> Early feedback to the proposal champion and committee is extremely valuable although it is recommended to use Stage 0/1/2 features with caution.\\n> Although companies like Facebook take advantage of these kinds of features, they have created codemods to allow easy change.\\n\\n---\\n\\nThere isn\'t enough time or resources to maintain each plugin, especially when there are spec updates.\\n\\n- Some transforms are simply out of date such as decorators. Logan had to port the previous spec [babel-plugin-transform-decorators-legacy](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy) for Babel 6 and we haven\'t had anyone able to rewrite it for the updated spec.\\n- [babel/babel#3473 - Async iteration proposal](https://github.com/babel/babel/pull/3473) wasn\'t merged for so long because we just didn\'t have time to review it. By the time it was merged it had already moved\\nfrom stage 2 to stage 3.\\n\\n---\\n\\nNext we\'re going to be working with:\\n\\n- [Daniel Ehrenberg](https://github.com/littledan) on [Private Fields (Stage 2)](https://github.com/tc39/proposal-private-fields)\\n- [Yehuda Katz](https://github.com/wycats) on [Class and Property Decorators (Stage 2)](http://tc39.github.io/proposal-decorators/)\\n- [Mathias Bynens](https://mathiasbynens.be/) on [Unicode Property Escapes in Regular Expressions (Stage 2)](https://github.com/tc39/proposal-regexp-unicode-property-escapes) via [babel/babel#3683](https://github.com/babel/babel/pull/3683)\\n\\nRelevant Issues:\\n\\n- Should we create a codemod for Stage X proposals at the same time as creating the actual transform?\\n- [Private Fields](https://github.com/babel/babel/issues/4408)\\n- [Decorators Proposal](https://github.com/babel/babel/issues/2645)\\n\\n> Check out [thefeedbackloop.xyz](https://thefeedbackloop.xyz/tc39-november-2016-day-1/) for more info on TC39!\\n\\n### Maintaining other ecosystem plugins: JSX/Flow\\n\\nBabel is vital to the [React](https://reactjs.org) and [Flow](https://flowtype.org/) ecosystems, and we work closely with the relevant teams at Facebook.\\n\\n- [React plugins](https://babeljs.io/docs/plugins/#react), [React preset](https://babeljs.io/docs/plugins/preset-react/)\\n  - These cover the main `JSX` transform, development plugins, and optimizations.\\n- [Flow plugin](https://babeljs.io/docs/plugins/transform-flow-strip-types)\\n\\nRelevant Issue Labels:\\n\\n- [babel/babel: React issues](https://github.com/babel/babel/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20label%3A%22react%22%20)\\n- [facebook/react: Optimizing Compiler](https://github.com/facebook/react/labels/Component%3A%20Optimizing%20Compiler)\\n\\n### [babel-preset-env](https://github.com/babel/babel-preset-env) (\\"autoprefixer\\" for Babel)\\n\\nJavaScript compilation is a moving target: There are yearly updates to the spec, browser vendors are constantly updating to that spec, and users may drop support for earlier browsers. At first glance, there doesn\'t seem to be a fixed target for what we should compile our JavaScript down to.\\n\\n![](https://cloud.githubusercontent.com/assets/588473/19214029/58deebce-8d48-11e6-9004-ee3fbcb75d8b.png)\\n\\n> The [compat-table](https://github.com/kangax/) is updated constantly and is used for this preset.\\n\\nThis is where `babel-preset-env` comes in: it\'s a Babel preset that automatically determines the correct Babel plugins to use based on the provided environments.\\n\\nIts goal is both simplicity in use and efficiency in output: you only need to worry about your target environments to be able to take advantage of native code. The preset decides for you the required plugins.\\n\\n#### Some example configs\\n\\nTargeting Chrome 55 + last 2 versions of other browsers via [browserslist](https://github.com/ai/browserslist)\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"presets\\": [\\n    [\\"env\\", {\\n      \\"targets\\": {\\n        \\"chrome\\": 55,\\n        \\"browsers\\": [\\"last 2 versions\\"]\\n      }\\n    }]\\n  ]\\n}\\n```\\n\\nTargeting the current Node.js version (uses `process.versions.node`)\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"presets\\": [\\n    [\\"env\\", {\\n      \\"targets\\": {\\n        \\"node\\": \\"current\\"\\n      }\\n    }]\\n  ]\\n}\\n```\\n\\nChrome 55 `useBuiltIns` + webpack 2\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"presets\\": [\\n    [\\"env\\", {\\n      \\"targets\\": {\\n        \\"chrome\\": 55\\n      },\\n      \\"modules\\": false,\\n      \\"useBuiltIns\\": true\\n    }]\\n  ]\\n}\\n```\\n\\n**In**\\n\\n```js title=\\"JavaScript\\"\\nimport \\"babel-polyfill\\";\\n```\\n\\n**Out (different based on environment)**\\n\\n```js title=\\"JavaScript\\"\\nimport \\"core-js/modules/es7.string.pad-start\\";\\nimport \\"core-js/modules/es7.string.pad-end\\";\\n```\\n\\nRelevant Issues:\\n\\n- Next big feature: apply the same idea of preset-env to polyfills as well [babel/babel-preset-env#20](https://github.com/babel/babel-preset-env/issues/20) with corresponding PR in [babel/babel-preset-env#56](https://github.com/babel/babel-preset-env/pull/56).\\n- [Using browserslist](https://github.com/babel/babel-preset-env/issues/26) and [PR](https://github.com/babel/babel-preset-env/pull/51)\\n- [\\"Node.js versions support\\" in Browserslist](https://github.com/ai/browserslist/issues/75)\\n- [Publish runnable tests & browser data to npm](https://github.com/kangax/compat-table/issues/711)\\n\\n### Linting via [babel-eslint](https://github.com/babel/babel-eslint)\\n\\n<img class=\\"img-responsive\\" alt=\\"example of eslint\\" src=\\"/assets/2016-12-07-the-state-of-babel/eslint.png\\" />\\n\\nESLint doesn\'t support new language features until they reach Stage 4 of the proposals process. For this reason we maintain [babel-eslint](https://github.com/babel/babel-eslint) (a custom ESLint parser) so you can continue to lint JavaScript with experimental syntax.\\n\\nThis project was one of the hardest projects to work on: because it is just a compatibility layer between Babel and ESLint there is inherently a constant need for updates when either projects update and a high risk of unexpected changes due to monkey-patching. It was unfortunate to get issues like [babel/babel-eslint#243](https://github.com/babel/babel-eslint/issues/243) or [babel/babel-eslint#267](https://github.com/babel/babel-eslint/issues/267).\\n\\nTo that end, we\'d like to lessen the maintenance burden of this project by improving our scope and traversal interop with ESLint. It might even be interesting to be able to write ESLint rules using babel APIs or vice versa?\\n\\nRelevant Issues:\\n\\n- [Previous Linting APIs Discussion](https://github.com/babel/babel/issues/1829)\\n- [Running smoke tests on ESLint](https://github.com/babel/babel-eslint/issues/62)\\n- [babel/babel-eslint#88](https://github.com/babel/babel-eslint/issues/88) is still relevant now\\n\\n### Minification\\n\\n[Babili](https://github.com/babel/babili) is our new Babel-powered minifier, enabling you to produce minified code while targeting the latest browsers.\\n\\n**In**\\n\\n```js title=\\"JavaScript\\"\\nclass Mangler {\\n  constructor(program) {\\n    this.program = program;\\n  }\\n}\\nnew Mangler();\\n```\\n\\n**Out**\\n\\n```js title=\\"JavaScript\\"\\n// ES2015 code -> Babili -> Minified ES2015 Code\\nclass a{constructor(b){this.program=b}}new a;\\n```\\n\\nCheck out our [blog post](http://babeljs.io/blog/2016/08/30/babili) for more info.\\n\\nSince it was recently released, we\'re looking for some new contributors! There\'s a lot of small bugs and things that could be improved for those looking for a new project to help out with!\\n\\n### Codemods / Refactoring / `eslint --fix`\\n\\nA `codemod` is a tool-assisted code modification; a fancy find-and-replace.\\n\\nIf you wanted to change `merge({})` to `Object.assign({})` (and maybe later [object rest](https://github.com/sebmarkbage/ecmascript-rest-spread)) you might do a regex replace. But you don\'t want to replace the other parts of the code that also might be called `merge` such as imports/exports, strings, comments, and local variables. To do it safely you\'ll want something more powerful that only changes the specific code you need.\\n\\nAlthough Babel already handles transforming code into other code, it doesn\'t really care about the styling of the input code as a compiler. After using Babel with its default options to do a codemod, `git diff` looks really messy.\\n\\nEnter [Recast](https://github.com/benjamn/recast): a tool that preserves the formatting of unmodified code while also pretty-printing any new AST nodes.\\n\\n![recast](https://cloud.githubusercontent.com/assets/588473/16584612/04a82078-428b-11e6-9f79-a665eef848ea.gif)\\n\\n> In the screenshot above, the top-left pane is the input code and the bottom-right pane is the output code after the babel plugin is run. In this case it\'s preserving the whitespace of the input code when possible.\\n\\nBy passing in [Recast](https://github.com/benjamn/recast) in the options, Babel can power the future of codemods.\\n\\n`.babelrc`\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"parserOpts\\": {\\n    \\"parser\\": \\"recast\\"\\n  },\\n  \\"generatorOpts\\": {\\n    \\"generator\\": \\"recast\\"\\n  }\\n}\\n```\\n\\nRun the relevant Babel transform(s) on the source code and overwrite it:\\n\\n```sh title=\\"Shell\\"\\nbabel src -d src\\n```\\n\\nThis feature was just made possible so we\'re looking forward to making it easier to use and seeing the transformations it can enable. Check out the [6.16.0 blog post](https://babeljs.io/blog/2016/09/28/6.16.0#-new-feature) for more info!\\n\\nOther relevant projects: [JSCodeshift](https://github.com/facebook/jscodeshift), [js-codemod](https://github.com/cpojer/js-codemod), [Lebab](https://github.com/lebab/lebab).\\n\\nRelevant Issues:\\n\\n- [Rewriting Lebab as a Babel transformer](https://github.com/lebab/lebab/issues/138)\\n- [Babel integration with jscodeshift](https://github.com/facebook/jscodeshift/issues/168)\\n\\n### Code Coverage / Instrumentation\\n\\n![](https://istanbul.js.org/assets/browser.png)\\n\\nWe want to support tools like [nyc](https://github.com/istanbuljs/nyc) and [babel-plugin-istanbul](https://github.com/istanbuljs/babel-plugin-istanbul).\\n\\n### Plugin Ecosystem\\n\\nThanks to our vibrant community, new plugins are constantly being created: whether it be a new way to write your [css in jsx](https://github.com/zeit/styled-jsx) or [rewire your tests](https://github.com/speedskater/babel-plugin-rewire).\\n\\n> Currently there are > 1200 [babel-plugins on npm](https://www.npmjs.com/search?q=babel-plugin-).\\n\\nWe\'ve had some interesting discussions on how we can grow and support the plugin ecosystem. We could try to watch all the repos but that is obviously overwhelming.\\n\\nIt might be interesting to create some bots to automate a few tasks: create specific Babel plugins/ESLint rules for babel-plugins, write codemods to update API changes, and integrate plugins into our smoke test.\\n\\n<blockquote class=\\"twitter-tweet\\" data-conversation=\\"none\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\"><a href=\\"https://twitter.com/jaredforsyth\\">@jaredforsyth</a> <a href=\\"https://twitter.com/reactjs\\">@reactjs</a> My five minute POC \u263a\ufe0f <a href=\\"https://t.co/v74UFHsSJG\\">https://t.co/v74UFHsSJG</a> <a href=\\"https://t.co/B3YwVWkH5g\\">pic.twitter.com/B3YwVWkH5g</a></p>&mdash; Henry Zhu (@left_pad) <a href=\\"https://twitter.com/left_pad/status/805971589430968320\\">December 6, 2016</a></blockquote>\\n\\n- Should we create a newsletter for new/useful plugins?\\n- How can we teach people about plugins and how to write them?\\n- How can we make [ASTExplorer](http://astexplorer.net/) better?\\n\\n### Documentation (this website!)\\n\\nDocs contributions have definitely been lacking in the [last year](https://github.com/babel/babel.github.io/graphs/contributors).\\n\\nHowever just recently we\'ve done a lot of awesome stuff:\\n\\n- [@Daniel15](https://github.com/Daniel15) has been maintaining [babel-standalone](https://github.com/babel/babel-standalone) which we use in the REPL and has some automation when new releases get out.\\n- [@maxiloc](https://github.com/maxiloc) added search functionality via Algolia via [#977](https://github.com/babel/babel.github.io/pull/977)\\n\\nWe\'ve also added new collaborators:\\n\\n- [@STRML](https://github.com/STRML): Added Discourse to all github pages via [#875](https://github.com/babel/babel.github.io/pull/875)\\n- [@xtuc](https://github.com/xtuc): Added support for reading the README from the babel repo so we don\'t have to sync 2 copies of docs via [#990](https://github.com/babel/babel.github.io/pull/990)\\n- [@fredericmarx](https://github.com/fredericmarx): Added support for a copy to clipboard button for code snippets via [#998](https://github.com/babel/babel.github.io/pull/998)\\n- [@seedofjoy](https://github.com/seedofjoy): Added a resize ability for the REPL via [#1003](https://github.com/babel/babel.github.io/pull/1003)\\n\\nSome Ideas\\n\\n- All plugins should have examples. Can also embed [RunKit](https://runkit.com/home) or the REPL.\\n- Update FAQ with common errors\\n- API docs / make [babel-handbook](https://github.com/thejameskyle/babel-handbook) better\\n\\nRelevant Issues:\\n\\n- [Reorganizing the docs layout](https://github.com/babel/babel.github.io/issues/930)\\n- [Showcase community plugins](https://github.com/babel/babel.github.io/issues/831)\\n- [Adding a resources page](https://github.com/babel/babel.github.io/issues/27)\\n- [Learn ES2015: teach others about ES2015+](https://github.com/babel/babel.github.io/issues/994)\\n- [REPL: adding example dropdowns](https://github.com/babel/babel.github.io/issues/59)\\n- [REPL: supporting all options](https://github.com/babel/babel.github.io/issues/92)\\n- [REPL: allow the REPL to import any community plugin from npm](https://github.com/babel/babel.github.io/issues/858)\\n- [REPL: Use ASTexplorer](https://github.com/fkling/astexplorer/issues/70)\\n- [ASTexplorer: Real Time collaboration](https://github.com/fkling/astexplorer/issues/166)\\n\\n## The Future\\n\\n> NOTE: Everything below can be changed or dropped. Some might be already in the works and others are just suggestions that need a proper discussion/champion.\\n\\n> Priority should be determined on what the community needs: not because it would be nice to have.\\n\\n### [Plugin API Changes](https://github.com/babel/notes/blob/master/2016/2016-08/august-01.md#potential-api-changes-for-traversal)\\n\\nThere is a lot of confusion around how plugins/presets interact regarding ordering. This results in bugs and issues with the config which require users to place plugins before/after others in a non-intuitive way.\\n\\nWe\u2019re currently discussing API changes that could reduce the confusion. However, since this is a fundamental change to the core of Babel, it might take a while to figure out the best approach.\\n\\n### Versioning\\n\\nSince Babel 6 we\'ve used a [\\"fixed\\" mode of versioning](https://github.com/lerna/lerna#how-it-works) via Lerna. This is what allows us to release multiple packages at the same time all under the same version (if that package changes). This is nice because you don\'t have to manually set a version for each package but everything moves together. The only time this could cause an error is when one on the packages makes a breaking change: then every package also will bump major versions.\\n\\nThis is explained more in [babel/notes](https://github.com/babel/notes/blob/master/2016/2016-07/july-31.md#future-of-babels-release-process-and-its-ecosystem) but we still need to figure out the best plan of action for the project.\\n\\nWhat happens when we need to update a Stage 0 spec to Stage 1 and it\'s a breaking change to the parser? Are we just going to bump the major version, wait to batch some changes up, or figure out how to do it via multiple versions of plugins?\\n\\n[Discussion Issue](https://github.com/babel/babel/issues/4950)\\n\\n#### Changing the Mindset Around Stage X Presets\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">My rule of thumb on how I decide what future features to transpile:<br/>&quot;Could I reasonably codemod this if it changes?&quot;<br/>Don&#39;t do it otherwise.</p>&mdash; Kent C. Dodds (@kentcdodds) <a href=\\"https://twitter.com/kentcdodds/status/803815749416456196\\">November 30, 2016</a></blockquote>\\n\\nRelevant Issues:\\n\\n- [Should we rename the stage x presets to explain more that they are \\"experimental\\"](https://github.com/babel/babel/issues/4914)\\n\\n#### Speed\\n\\nPerformance is a feature! Other things can be more of a priority at times (bug fixes, spec compliancy, etc) but it\'s still important in a few different aspects.\\n\\n- How can we reduce the size/time of install, especially for a project with multiple packages? (this is helped by [yarn](https://yarnpkg.com))\\n- How can we parse faster?\\n- How can we make faster plugins (and measure them individually)?\\n- How can we generate the transformed code faster?\\n- How can we generate code that runs fast in the browser (https://fhinkel.github.io/six-speed/)?\\n\\nIf you to read the compiled output and see issues, then report it and ask for help in making a PR!\\n\\nPrevious Issues:\\n\\n- [Speeeeed](https://github.com/babel/babel/issues/1486)\\n- [Amazing PR to improve babel-generator by @gzzhanghao](https://github.com/babel/babel/pull/3283)\\n\\n### Possible TypeScript Support?\\n\\nMaybe Babel could learn to understand TypeScript syntax (like we do with Flow)? We could add a plugin to strip TypeScript types for better interop.\\n\\nThis would mean parsing TypeScript specific syntax and stripping it out. However TypeScript does have non-type syntax, so for things like `enum` we will would have to discuss more.\\n\\n### Use Type Information?\\n\\nIntegrate with a type system such as Flow/TypeScript to make optimizations. This just means that Babel should be able to gain the knowledge through those tools that an identifier `arr` is actually an `Array` or not.\\n\\n> There are a few plugins that actually do type checking: [babel-plugin-typecheck](https://github.com/codemix/babel-plugin-typecheck) and [babel-plugin-tcomb](https://github.com/gcanti/babel-plugin-tcomb)\\n\\n- [Previous Issue](https://github.com/babel/babel/issues/653)\\n\\n### Taking in a Dependency Graph / Operate Multi-file?\\n\\nThen we could integrate with other tools like Webpack better. This would allow cross file transformations or whole codebase optimizations. The main reason for this would be for the minifier (being able to remove properties based on checking the usage across the whole application) or for example providing errors for missing/invalid import/exports.\\n\\n- [Discussion Issue](https://github.com/babel/babel/issues/4949)\\n\\n### Parser Errors\\n\\nBetter error messages from the parser like in [Compiler Errors for Humans](http://elm-lang.org/blog/compiler-errors-for-humans).\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">babel-eslint@7.1.1: now adds the code frame when there&#39;s a parser error! <a href=\\"https://t.co/yoxRpGXq5E\\">pic.twitter.com/yoxRpGXq5E</a></p>&mdash; Henry Zhu (@left_pad) <a href=\\"https://twitter.com/left_pad/status/799388723896946692\\">November 17, 2016</a></blockquote>\\n\\n> It is obvious that we all want to see helpful errors!\\n\\nWe can do better inference/guessing on user intention to prevent vague errors. Let us know in what cases that happens!\\n\\nRelevant Issues:\\n\\n- [#125 Better message when using `await` in a non-async function](https://github.com/babel/babylon/pull/125)\\n- [#169 Better message for a syntax error when a plugin isn\'t enabled](https://github.com/babel/babylon/issues/169)\\n- [#212 Better message for using super when not using a non-object method](https://github.com/babel/babylon/issues/212)\\n\\n### `babel-init`\\n\\nBasically a way to set up Babel more easily like [create-react-app](https://github.com/facebookincubator/create-react-app) does.\\n\\n- Set up a `.babelrc` from scratch, prompt with questions\\n\\nPossible Idea:\\n\\n- Ask about target environments (browsers, node) and pass to `babel-preset-env`\\n- Ask about experimental features (add specific plugins)\\n- Update the `babel` npm package to do something again: Make it the default/opt-in/opinionated `babel` that Babel 5 was. It can default to using `env` and say the `latest 2 browsers` (without any config).\\n\\nRelevant Issues:\\n\\n- [CLI (babel init) command](https://github.com/babel/babel/issues/3977)\\n- [Repurpose `babel` npm package](https://github.com/babel/babel/issues/4951)\\n\\n### Run [tc39/test262](https://github.com/tc39/test262)\\n\\n> test262 tests conformance to the continually maintained draft future ECMAScript standard found at [tc39.github.io/ecma262](http://tc39.github.io/ecma262/), together with any Stage 3 or later TC39 proposals. It is maintained by Tom Care ([@tcare](https://github.com/tcare)) with significant contributions from many in the ECMAScript community.\\n\\nRunning the official spec tests against Babel can make sure we comply to the spec or at least know when we don\'t. We\'ll want to figure out how to do filtering on things we can\'t compile (proxy, TCO, etc) and set up an easy way to check failing tests and file issues and PRs for them.\\n\\nRelevant Issues:\\n\\n- [Adding test262 to compat-table](https://github.com/kangax/compat-table/issues/830)\\n- [Running test262 on the web](https://github.com/bakkot/test262-web-runner/)\\n\\n### Smoke/Integration Tests\\n\\nIt would be useful to either have a reverse [Greenkeeper](https://greenkeeper.io) or to run tests with master branch of Babel so that we can catch any major regressions before any release (node has the [citgm project](https://github.com/nodejs/citgm) for this). In theory we would want to take the biggest open source projects that use Babel and run their tests.\\n\\n[motiz88/babel-smoke-tests](https://github.com/motiz88/babel-smoke-tests) is a good start! It would also be great if there\'s already something like this out there!\\n\\n### Program Analysis\\n\\n- [Program Slicing](https://en.wikipedia.org/wiki/Program_slicing)\\n\\nThere was a great talk by [Alan Shreve](https://twitter.com/inconshreveable) called [\\"Idealized Commit Logs: Code Simplification via Program Slicing\\"](https://www.youtube.com/watch?v=dSqLt8BgbRQ) which inspired @kentcdodds to try it out in JavaScript via [slice-js](http://slides.com/kentcdodds/faster-javascript#/).\\n\\nThe general idea is that we have a lot of tools to help us write code but not a lot for helping us understand/read code. You can think of code-slicing as a form of targeted dead-code elimination.\\n\\n![slice-js](https://s3.amazonaws.com/media-p.slid.es/uploads/55780/images/3189688/Screen_Shot_2016-11-02_at_11.46.25_PM.png)\\n\\nA program slice basically cuts away from the source code the code that isn\'t used for a test case that you run. If there are lots of if statements and loops that aren\'t run during your usecase then it won\'t show up in the program slice.\\n\\n- Semantic (AST aware) Grepping tool?\\n\\nSimilar to [graspjs](http://www.graspjs.com/), I think it would be interesting to be able to do a find-replace with the input being an AST. It would allow us to create other analysis tools: the ability to find all IIFE\'s in our code, the number of times a method is called, or even how many Classes we have in our codebase.\\n\\n### `babel --settings`\\n\\nThis command would print out all info (also when erroring). It would also include performance metrics on how long each plugin takes.\\n\\n- [Discussion Issue](https://github.com/babel/babel/issues/2960)\\n\\n### Parser Unity\\n\\nThere have also been some discussions around parser/AST unity, in [TheLarkInn/js-parser-discussions](https://github.com/TheLarkInn/js-parser-discussions) and previously with [ESTree](https://github.com/estree/estree).\\n\\nUnfortunately with Babel 6, we have \\"forked\\" and have a few differences in [our AST](https://github.com/babel/babylon#output) than ESTree. Babel aims to support stage x features while other parsers may only want to support stage 4 features. We all might prioritize certain things more than others regarding spec compliancy, performance, stage x features, error messages, extensibility, releases, etc. However it\'s important for us to be open to breaking changes that may lead to better interop and a better community.\\n\\n### Sweet.js Interop?\\n\\nPrevious [issue](https://github.com/babel/babel/issues/568#issuecomment-71716260). Maybe we can just figure out how to have better interop instead?\\n\\n### Node.js Support\\n\\nShould we drop support according to the EOL of Node.js versions? How long should we wait to do this in general?\\n\\n- Do we want to continue to support our users who haven\'t updated yet?\\n- There are certain transforms/PRs that are blocked by this, due to tools that have also dropped older versions.\\n- Many other build-time projects like ESLint have done so already.\\n- Are we going to make a major version just for this or plan out other changes in addition?\\n\\n- [Discussion Issue](https://github.com/babel/babel/issues/4315)\\n\\n### Babel 5 to 6 transition / Upgrade Paths\\n\\nBabel 6 was really difficult for the community to upgrade to. The initial release was a bit rushed. Although we did have a [6.0 release post](http://babeljs.io/blog/2015/10/29/6.0.0), a [setup guide](http://babeljs.io/blog/2015/10/31/setting-up-babel-6) soon after, a even a [tool (now deprecated)](http://babeljs.io/blog/2015/11/03/babel-doctor) to help with the transition it was still difficult for users to understand the changes.\\n\\nThere are still [a good amount of users on Babel 5](https://libraries.io/npm/babel-core/usage) that we don\'t want to leave behind. What can we do to help them upgrade? What steps do we need to take in the future to make sure the same thing doesn\'t happen with a Babel 7? Are there other projects/communities we should be reaching out to and helping?\\n\\nRelevant Issues:\\n\\n- [ember-cli Babel 6.0 Issue](https://github.com/ember-cli/ember-cli/issues/5015) needs help!\\n- Any others?\\n\\n### What else?\\n\\nAnything else not already brought up here? Please send us a tweet [@babeljs](https://twitter.com/babeljs), a message on our slack (join at [https://slack.babeljs.io/](https://slack.babeljs.io), comment on this post, or create an discussion issue in our repo!)\\n\\nAre there projects or communities we should partner with more? How can we make the contributing experience more welcome? What can we do to make the development process more transparent?\\n\\n## Community\\n\\nOld Issues:\\n\\n- [Call for Contributors!](https://github.com/babel/babel/issues/1347)\\n- [Being Prepared for Getting Hit by a Bus](https://github.com/babel/babel/issues/1888)\\n\\nYou might think that as [a project gets more widely used](https://npm-stat.com/charts.html?package=babel-core&from=2015-02-07&to=2016-12-07) that more people show up to help out. But like most OSS projects that aren\'t backed by a company, there is a constant issue with maintenance and sustainability; people get burned out, move on to other cool projects, or get busy with work/family/etc.\\n\\nLike James describes in [Dear JavaScript](https://medium.com/@thejameskyle/dear-javascript-7e14ffcae36c), the current Babel team is pretty small.\\n\\n> Babel isn\'t a company, a special team at Facebook, or corporate-funded OSS project. It\'s a community-driven effort currently held up by a few people and we want that to grow.\\n\\nSo if you\'re interested in contributing to a tool you use, we\'re hoping this could be the one!\\n\\n### What issues should I look at or contribute to?\\n\\nMany of our projects have both [`beginner-friendly`](https://github.com/babel/babel/labels/beginner-friendly) and [`help-wanted`](https://github.com/babel/babel/labels/help-wanted) labels. You can also check out [`discussion`](https://github.com/babel/babel/labels/discussion).\\n\\n### Team\\n\\nOur core team is:\\n\\n- [Henry Zhu, @hzoo](https://github.com/hzoo)\\n- [Logan Smyth, @loganfsmyth](https://github.com/loganfsmyth)\\n- [Daniel Tschinder, @danez](https://github.com/danez)\\n\\nAnd just in the last 3 months a lot more collaborators:\\n\\n- [Moti Zilberman, @motiz88](https://github.com/motiz88)\\n- [Dan Harper, @danharper](https://github.com/danharper)\\n- [Kai Cataldo, @kaicataldo](https://github.com/kaicataldo)\\n- [Andrew Levine, @drewml](https://github.com/DrewML)\\n- [Brian Ng, @existentialism](https://github.com/existentialism)\\n- [Jessica Franco, @Jessidhia](https://github.com/Jessidhia)\\n\\nBabili core team:\\n\\n- [Juriy Zaytsev, @kangax](https://github.com/kangax)\\n- [Boopathi Rajaa, @boopathi](https://github.com/boopathi)\\n\\nAs mentioned above we have a lot of website collaborators:\\n\\n- [Daniel Lo Nigro, @daniel15](https://github.com/daniel15)\\n- [Samuel Reed, @STRML](https://github.com/STRML)\\n- [Sven SAULEAU, @xtuc](https://github.com/xtuc)\\n- [Frederic Marx, @fredericmarx](https://github.com/fredericmarx)\\n- [Igor Mozharovsky, @seedofjoy](https://github.com/seedofjoy)\\n\\nInactive but still a resource:\\n\\n- [Sebastian McKenzie, @kittens](https://github.com/kittens) - Yarn\\n- [James Kyle, @thejameskyle](https://github.com/thejameskyle) - Flow/Yarn\\n- [Amjad Masad, @amasad](https://github.com/amasad) - [repl.it](https://repl.it/)\\n- [Jesse McCarthy, @jmm](https://github.com/jmm)\\n\\n### How can I contact the team?\\n\\n#### GitHub\\n\\nFor bug reports/PRs you can check our [repositories](https://github.com/babel/).\\n\\n#### Twitter\\n\\nYou can ping us on Twitter with [@babeljs](https://twitter.com/babeljs) - or mention us individually.\\n\\nI myself joined Twitter to be able to talk with users and help out. Being able to post new features and changelogs is really useful and can help give us feedback!\\n\\n#### Slack\\n\\nWe have a relatively active community on there!\\n\\nYou\'ll find a lot of awesome community members willing to help such as [Jordan Harband, @ljharb](https://github.com/ljharb), [Jessica Franco, @Jessidhia](https://github.com/Jessidhia), [Jimmy Jia, @taion](https://github.com/taion), [Denis Pushkarev, @zloirock](https://github.com/zloirock) and more!\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">If you haven&#39;t joined our slack yet: please join at <a href=\\"https://t.co/h3m7l9jkrg\\">https://t.co/h3m7l9jkrg</a>. Check out development/plugins to see what&#39;s up! <a href=\\"https://t.co/f1CKaV8G6G\\">pic.twitter.com/f1CKaV8G6G</a></p>&mdash; Babel (@babeljs) <a href=\\"https://twitter.com/babeljs/status/793223871080136705\\">October 31, 2016</a></blockquote>\\n\\nIf you just have questions join [#discussion](https://babeljs.slack.com/messages/discussion/) and if you want to help or listen in check out [#development](https://babeljs.slack.com/messages/development/).\\n\\nWe try not to discuss in private if there\'s no need to: I myself usually post the issues/PRs I\'m working on for people to review and talk about.\\n\\n#### Other\\n\\nHow else can we interact with the community? Should we go and start meetups, go to conferences, or manage hackathons?\\n\\nHow can we make Babel sustainable? Should we setup a [Open Collective](https://opencollective.com/opensource) or seek a foundation? Should we pay for a [project manager](https://medium.com/open-collective/wanted-a-product-manager-for-open-source-projects-bf19bcd680f5#.awwsg684n)?\\n\\nLet us know your thoughts! What do you want out of Babel?\\n\\n---\\n\\n> See typos/issues? Please send a PR or comment on [babel/babel.github.io#1014](https://github.com/babel/babel.github.io/pull/1014)\\n\\nIf anything we want to let you know that many of us got our start with Babel in order to learn JavaScript rather than helping because we already knew it. Personally, I knew nothing about compilers and had just learned what ES6 was when I found the project. I got here because of a tiny bit of curiosity and [some encouragement from a lot of people](https://medium.com/@hzoo/ossthanks-some-thoughts-d0267706c2c6#.lcga2ggrw). I want to carry that forward and hope that we can all succeed together.\\n\\nThanks so much for reading!\\n\\nHenry Zhu ([@hzoo](https://github.com/hzoo)) ([@left_pad](https://twitter.com/left_pad))\\n\\n> Thanks to way too many folks for their review and thoughts: @DrewML, @mrjoelkemp, @kentcdodds, @existentialism, @jdalton, @gaearon, @nolanlawson, @jayphelps, @montogeek, @TheLarkInn, @jasonLaster, @benjamn, @addyosmani, @Daniel15, @loganfsmyth, @gr2m, @mathiasbynens, @chicoxyzzy, @bvaughn, @bcoe."},{"id":"/2016/11/16/6.19.0","metadata":{"permalink":"/babel-website/blog/2016/11/16/6.19.0","source":"@site/blog/2016-11-16-6.19.0.md","title":"6.19.0 Released","description":"object-rest-spread works standalone and a few new plugin options APIs were added!","date":"2016-11-16T11:00:00.000Z","formattedDate":"November 16, 2016","tags":[],"readingTime":3.71,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"6.19.0 Released","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2016-11-16T11:00:00.000Z","categories":"announcements","share_text":"6.19.0"},"prevItem":{"title":"The State of Babel","permalink":"/babel-website/blog/2016/12/07/the-state-of-babel"},"nextItem":{"title":"6.18.0 Released","permalink":"/babel-website/blog/2016/10/24/6.18.0"}},"content":"`object-rest-spread` works standalone and a few new plugin options APIs were added!\\n\\n\x3c!--truncate--\x3e\\n\\n## v6.19.0 Summary (2016-11-16)\\n\\n## \ud83d\ude80 New Feature\\n\\n[#4755](https://github.com/babel/babel/pull/4755) Make `object-rest-spread` work as an independent plugin. ([@hzoo](https://github.com/hzoo))\\n\\nThis rewrite fixes a long standing issue where the `object-rest-spread` plugin was depending on 2 other plugins to compile `RestProperty` properly.\\n\\nThis fix important given the assumption that plugins should be independent and is vital for the use of [babel-preset-env](https://github.com/babel/babel-preset-env/) since new environments support destructuring natively.\\n\\nIn\\n\\n```js title=\\"JavaScript\\"\\nconst { a, ...b } = c;\\n```\\n\\nOut\\n\\n```js title=\\"JavaScript\\"\\nconst { a } = c; // remove the `...b`\\nconst b = _objectWithoutProperties(c, [\\"a\\"]); // use the helper\\n```\\n\\nIt\'s interesting to see all the places where you can destructure!\\n\\n*RestProperty*\\n\\n``` js\\nfunction a({ b, ...c }) {} // Parameters\\n```\\n\\n```js title=\\"JavaScript\\"\\nconst { a, ...b } = c; // VariableDeclaration\\n```\\n\\n```js title=\\"JavaScript\\"\\nexport var { a, ...b } = c; // ExportNamedDeclaration\\n```\\n\\n```js title=\\"JavaScript\\"\\ntry {} catch ({a, ...b}) {} // CatchClause\\n```\\n\\n```js title=\\"JavaScript\\"\\n({a, ...b} = c); // AssignmentExpression\\n```\\n\\n```js title=\\"JavaScript\\"\\nfor ({a, ...b} of []) {} // ForXStatement\\n```\\n\\n*SpreadProperty*\\n\\n```js title=\\"JavaScript\\"\\nvar a = { ...b, ...c } // ObjectExpression\\n```\\n\\n---\\n\\n[#4544](https://github.com/babel/babel/pull/4544) Add the `spec` option to `\\"transform-class-properties\\"`. ([@motiz88](https://github.com/motiz88))\\n\\nClass properties will use `Object.defineProperty` instead of a simple `this.x = y`.\\nStatic fields are will use `value: undefined` even if they are not initialized.\\n\\nUsage\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"plugins\\": [\\n    [\\"transform-class-properties\\", {\\n      \\"spec\\": true\\n    }]\\n  ]\\n}\\n```\\n\\nIn\\n\\n```js title=\\"JavaScript\\"\\nclass Foo {\\n  static bar;\\n  baz = \'guy\';\\n}\\n```\\n\\nOut\\n\\n```js title=\\"JavaScript\\"\\nvar Foo = function Foo() {\\n  _classCallCheck(this, Foo);\\n  this.baz = \'guy\';\\n};\\n```\\n\\nOut w/ `\\"spec\\": true`\\n\\n```js title=\\"JavaScript\\"\\nvar Foo = function Foo() {\\n  babelHelpers.classCallCheck(this, Foo);\\n  _initialiseProps.call(this);\\n};\\n\\nObject.defineProperty(Foo, \\"bar\\", {\\n  enumerable: true,\\n  writable: true,\\n  value: undefined\\n});\\n\\nvar _initialiseProps = function () {\\n  Object.defineProperty(this, \\"bar\\", {\\n    enumerable: true,\\n    writable: true,\\n    value: foo\\n  });\\n};\\n```\\n\\n---\\n\\n[#4836](https://github.com/babel/babel/pull/4836) Add path utilities `path.isAncestor` and `path.isDescendant`. ([@boopathi](https://github.com/boopathi))\\n\\nWe\'ve added 2 similar \\"ancestry\\" path methods to `path.findParent`:\\n\\nUsage\\n\\n```js title=\\"JavaScript\\"\\nlet programPath, numberPath;\\ntraverse(ast, {\\n  Program(path) { programPath = path; },\\n  NumberPath(path) { numberPath = path; },\\n});\\n\\nprogramPath.isAncestor(numberPath); // true\\nnumberPath.isDescendant(programPath); // true\\n```\\n\\n---\\n\\n[#4835](https://github.com/babel/babel/pull/4835) Add `clearCache` and `clearPath` as separate APIs under traverse. ([@boopathi](https://github.com/boopathi))\\n\\nUsage\\n\\n```js title=\\"JavaScript\\"\\ntraverse.clearCache(); // clears both path\'s and scope cache\\ntraverse.clearCache.clearPath();\\ntraverse.clearCache.clearScope();\\n```\\n\\n---\\n\\n[#4827](https://github.com/babel/babel/pull/4827) Add `jsonCompatibleStrings` option to `babel-generator`. ([@kangax](https://github.com/kangax))\\n\\nUsage\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"generatorOpts\\": {\\n    \\"jsonCompatibleStrings\\": true // defaults to false\\n  }\\n}\\n```\\n\\nSet to true for the generator to use `jsesc` with `\\"json\\": true`. This will make it print `\\"\\\\u00A9\\"` vs. `\\"\xa9\\"`;\\n\\n---\\n\\n[#3547](https://github.com/babel/babel/pull/3547) Added `flowCommaSeparator` to `babel-generator`. ([@sampepose](https://github.com/sampepose))\\n\\nUsage\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"generatorOpts\\": {\\n    \\"flowCommaSeparator\\": true // defaults to false\\n  }\\n}\\n```\\n\\nCurrently there are 2 supported syntaxes (`,` and `;`) in Flow Object Types. The use of commas is in line with the more popular style and matches how objects are defined in JavaScript, making it a bit more natural to write.\\n\\n```js title=\\"JavaScript\\"\\nvar a: { param1: number; param2: string }\\nvar a: { param1: number, param2: string }\\n```\\n\\n---\\n\\n[#3553](https://github.com/babel/babel/pull/3553) Add `t.isNodesEquivalent`. ([@hzoo](https://github.com/hzoo))\\n\\nUsage\\n\\n```js title=\\"JavaScript\\"\\nassert(t.isNodesEquivalent(parse(\\"1 + 1\\"), parse(\\"1+1\\")) === true);\\n```\\n\\n---\\n\\n[#4789](https://github.com/babel/babel/pull/4789) Support stage-2 `import()` as contextual import in `transform-es2015-modules-systemjs`. ([@guybedford](https://github.com/guybedford))\\n\\nYou\'ll want to add the `stage-2` preset or explicitly include `babel-plugin-syntax-dynamic-import` (not enabled by default).\\n\\n```js title=\\"JavaScript\\"\\nexport function lazyLoadOperation () {\\n  return import(\'./x\')\\n  .then(function (x) {\\n    x.y();\\n  });\\n}\\n```\\n\\n## \ud83d\udc1b Bug Fixes\\n\\n[#4830](https://github.com/babel/babel/pull/4830) Will print the shorter of the `NumericLiteral`s if using the `minified` option. ([@shinew](https://github.com/shinew))\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\n5e1;\\n5e4;\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\n50;\\n5e4;\\n```\\n\\n---\\n\\n[#4832](https://github.com/babel/babel/pull/4832) Fix `transform-es2015-modules-systemjs` to ensure consistent modules iteration. ([@guybedford](https://github.com/guybedford))\\n\\n```js title=\\"JavaScript\\"\\nimport \\"2\\"; // should be imported first\\nimport \\"1\\"; // second\\n```\\n\\n---\\n\\n[#4813](https://github.com/babel/babel/pull/4813) Fix `binding` kind of destructured variables relating to `transform-react-constant-elements` ([@STRML](https://github.com/STRML))\\n\\nFixes an issue with destructuring parameters being hoisted incorrectly.\\n\\nInput\\n\\n```js title=\\"JavaScript\\"\\nfunction render({ text }) {\\n  return () => (<Component text={text} />);\\n}\\n```\\n\\nOutput\\n\\n```js title=\\"JavaScript\\"\\nfunction render(_ref) {\\n  let text = _ref.text;\\n  var _ref2 = <Component text={text} />;\\n  return () => _ref2;\\n}\\n```\\n\\n---\\n\\n## \ud83c\udf0f Committers: 10\\n\\n- Boopathi Rajaa ([boopathi](https://github.com/boopathi))\\n- Guy Bedford ([guybedford](https://github.com/guybedford))\\n- Henry Zhu ([hzoo](https://github.com/hzoo))\\n- Juriy Zaytsev ([kangax](https://github.com/kangax))\\n- Moti Zilberman ([motiz88](https://github.com/motiz88))\\n- Sam Pepose ([sampepose](https://github.com/sampepose))\\n- Samuel Reed ([STRML](https://github.com/STRML))\\n- Scott Stern ([sstern6](https://github.com/sstern6))\\n- Shine Wang ([shinew](https://github.com/shinew))\\n- lion ([lion-man44](https://github.com/lion-man44))\\n\\n---\\n\\nCheck out [Github](https://github.com/babel/babel/releases/tag/v6.19.0) for the whole changelog!"},{"id":"/2016/10/24/6.18.0","metadata":{"permalink":"/babel-website/blog/2016/10/24/6.18.0","source":"@site/blog/2016-10-24-6.18.0.md","title":"6.18.0 Released","description":"More flow updates, and lots of fixes!","date":"2016-10-24T03:45:00.000Z","formattedDate":"October 24, 2016","tags":[],"readingTime":6.415,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"6.18.0 Released","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2016-10-24T03:45:00.000Z","categories":"announcements","share_text":"6.18.0"},"prevItem":{"title":"6.19.0 Released","permalink":"/babel-website/blog/2016/11/16/6.19.0"},"nextItem":{"title":"6.16.0 Released","permalink":"/babel-website/blog/2016/09/28/6.16.0"}},"content":"More flow updates, and lots of fixes!\\n\\n\x3c!--truncate--\x3e\\n\\nWe\'ve added 4 new collaborators to Babel since the last release!\\n\\nAll of the hard work goes to them and our new contributors!\\n\\n- Moti Zilberman: \ud83d\udc19 [@motiz88](https://github.com/motiz88), \ud83d\udc26 [@motiz88](https://twitter.com/motiz88)\\n- Dan Harper: \ud83d\udc19 [@danharper](https://github.com/danharper), \ud83d\udc26 [@DanHarper7](https://twitter.com/DanHarper7)\\n- Kai Cataldo: \ud83d\udc19 [@kaicataldo](https://github.com/kaicataldo), \ud83d\udc26 [@kai_cataldo](https://twitter.com/kai_cataldo)\\n- Andrew Levine: \ud83d\udc19 [@DrewML](https://github.com/DrewML), \ud83d\udc26 [@drewml](https://twitter.com/drewml)\\n\\nThey\'ve been helping keep this project afloat with [@loganfsmyth](https://github.com/loganfsmyth), [@danez](https://github.com/danez), and me!\\n\\n## v6.18.0 Summary (2016-10-24)\\n\\n> Again if you haven\'t checked recently, we\'ve moved back to [Github Issues](https://github.com/babel/babel/issues)! This is all thanks to [@danez](https://github.com/danez)\\n\\n## \ud83d\ude80 New Feature\\n[#4697](https://github.com/babel/babel/pull/4697) Add variance node type and generate property variance annotations. ([@samwgoldman](https://github.com/samwgoldman))\\n\\nCheck out the [blog post](https://flowtype.org/blog/2016/10/04/Property-Variance.html) and [flow docs](https://flowtype.org/docs/variance.html) for more info:\\n\\n```js title=\\"JavaScript\\"\\ntype T = { +p: T };\\ninterface T { -p: T };\\ndeclare class T { +[k:K]: V };\\nclass T { -[k:K]: V };\\nclass C2 { +p: T = e };\\n```\\n\\n[#4746](https://github.com/babel/babel/pull/4746) Support `ObjectExpression` in static path evaluation. ([@motiz88](https://github.com/motiz88))\\n\\nUseful for [babel/babili](https://github.com/babel/babili) and other plugins.\\n\\n```js title=\\"JavaScript\\"\\n// in\\n{[\'a\' + \'b\']: 10 * 20, \'z\': [1, 2, 3]}\\n// out\\n{ab: 200, z: [1, 2, 3]}\\n```\\n\\n[#4699](https://github.com/babel/babel/pull/4699) `import()`: Initial support for `dynamic-import`. ([@kesne](https://github.com/kesne))\\n\\nParser support was added in [babel/babylon#v6.12.0](https://github.com/babel/babylon/releases/tag/v6.12.0).\\n\\nJust the plugin to enable it in babel.\\n\\n```js title=\\"JavaScript\\"\\n// install\\n$ npm install babel-plugin-syntax-dynamic-import --save-dev\\n```\\n\\nor use the new `parserOpts`\\n\\n```js title=\\"JavaScript\\"\\n// .babelrc\\n{\\n  \\"parserOpts\\": {\\n    \\"plugins\\": [\'dynamicImport\']\\n  }\\n}\\n```\\n\\n[#4655](https://github.com/babel/babel/pull/4655) Add `useBuiltIns` option to helper-builder-react-jsx. ([@existentialism](https://github.com/existentialism))\\n\\nPreviously we added a `useBuiltIns` for object-rest-spread so that it use the native/built in version if you use a polyfill or have it supported natively.\\n\\nThis change just uses the same option from the plugin to be applied with spread inside of jsx.\\n\\n```js title=\\"JavaScript\\"\\n// in\\nvar div = <Component {...props} foo=\\"bar\\" />\\n// out\\nvar div = React.createElement(Component, Object.assign({}, props, { foo: \\"bar\\" }));\\n```\\n\\n[#4724](https://github.com/babel/babel/pull/4724) Add `EmptyTypeAnnotation`. ([@samwgoldman](https://github.com/samwgoldman))\\n\\nAdded in flow [here](https://github.com/facebook/flow/commit/c603505583993aa953904005f91c350f4b65d6bd) and in babylon [here](https://github.com/babel/babylon/pull/171).\\n\\n```js title=\\"JavaScript\\"\\nfunction f<T>(x: empty): T {\\n  return x;\\n}\\nf(); // nothing to pass...\\n```\\n\\n[#4758](https://github.com/babel/babel/pull/4758) Make getBinding ignore labels; add Scope#getLabel, Scope#hasLabel, Scope#registerLabel. ([@kangax](https://github.com/kangax))\\n\\nTrack `LabeledStatement` separately (not part of bindings).\\n\\n## \ud83d\udc85 Polish\\n[#4690](https://github.com/babel/babel/pull/4690) Consolidate contiguous var declarations in destructuring transform. ([@motiz88](https://github.com/motiz88))\\n\\n```js title=\\"JavaScript\\"\\n// in\\nconst [a, b] = [1, 2];\\n// out\\nvar a = 1,\\n    b = 2;\\n```\\n\\n[#4685](https://github.com/babel/babel/pull/4685) Better error messaging when preset options are given without a corresponding preset. ([@kaicataldo](https://github.com/kaicataldo))\\n\\n> We\'ve had a few reports of users not wrapping a preset in `[]` when passing in options so we added an extra error message for this.\\n\\n```js title=\\"JavaScript\\"\\n// incorrect, and current gives a unexpected error message\\n{\\n  \\"presets\\": [\\n    \\"preset\\",\\n    { \\"presetOptions\\": \'hi\' } // gets parsed as another preset instead of being part of the \\"preset\\"\\n  ]\\n}\\n// correct\\n{\\n  \\"presets\\": [\\n    [\\"preset\\",\\n      {\\n        \\"presetOptions\\": \'hi\'\\n      }\\n    ]\\n  ]\\n}\\n```\\n\\n```\\nReferenceError: [BABEL] /test.js: Unknown option: base.loose2. Check out http://babeljs.io/docs/usage/options/ for more information about options.\\n\\nA common cause of this error is the presence of a configuration options object without the corresponding preset name. Example:\\n\\nInvalid:\\n  `{ presets: [{option: value}] }`\\nValid:\\n  `{ presets: [[\\"presetName\\", {option: value}]] }`\\n\\nFor more detailed information on preset configuration, please see http://babeljs.io/docs/plugins/#pluginpresets-options.\\n```\\n\\n[#4646](https://github.com/babel/babel/pull/4646) Change babel-generator to output `boolean` instead of `bool` for the `BooleanTypeAnnotation` AST node. ([@existentialism](https://github.com/existentialism))\\n\\n```js title=\\"JavaScript\\"\\nvar a: Promise<boolean>[];\\n// instead of\\nvar a: Promise<bool>[];\\n```\\n\\n## \ud83d\udcdd Documentation\\n[#4653](https://github.com/babel/babel/pull/4653) Tweak license for GitHub display. ([@existentialism](https://github.com/existentialism))\\n\\nSo that our MIT License [shows up](https://github.com/blog/2252-license-now-displayed-on-repository-overview).\\n\\n## \ud83d\udc1b Bug Fixes\\n\\n[#4765](https://github.com/babel/babel/pull/4765) Don\'t treat `JSXIdentifier` in `JSXMemberExpression` as HTML tag. Closes [#4027](https://github.com/babel/babel/issues/4027). ([@DrewML](https://github.com/DrewML))\\n\\n```js title=\\"JavaScript\\"\\n// transform-react-inline-elements\\n// issue with imported components that were JSXMemberExpression\\nimport { form } from \\"./export\\";\\n\\nfunction ParentComponent() {\\n  return <form.TestComponent />;\\n}\\n```\\n\\n[#4763](https://github.com/babel/babel/pull/4763) Handle remapping of JSXIdentifier to MemberExpression in CommonJS transform. Closes [#3728](https://github.com/babel/babel/issues/3728). ([@DrewML](https://github.com/DrewML))\\n\\n```\\n// transform-react-inline-elements\\nimport { Modal } from \\"react-bootstrap\\";\\nexport default CustomModal = () => <Modal.Header>foobar</Modal.Header>;\\n```\\n\\n[#4736](https://github.com/babel/babel/pull/4736) Fix replacing for-of if inside label. ([@danez](https://github.com/danez))\\n\\n```js title=\\"JavaScript\\"\\nif ( true ) {\\n  loop: for (let ch of []) {}\\n}\\n```\\n\\n[#4502](https://github.com/babel/babel/pull/4502) Make special case for class property initializers in `shadow-functions`. ([@motiz88](https://github.com/motiz88))\\n\\n```\\nclass A {\\n  prop1 = () => this;\\n  static prop2 = () => this;\\n  prop3 = () => arguments;\\n}\\n```\\n\\n[#4719](https://github.com/babel/babel/pull/4719) Fixed incorrect compilation of async iterator methods. ([@Jamesernator](https://github.com/Jamesernator))\\n\\n```js title=\\"JavaScript\\"\\n// in\\nclass C {\\n  async *g() { await 1; }\\n}\\n// out\\nclass C {\\n  g() { // was incorrectly outputting the method with a generator still `*g(){`\\n    return _asyncGenerator.wrap(function* () {\\n      yield _asyncGenerator.await(1);\\n    })();\\n  }\\n}\\n```\\n\\n[#4690](https://github.com/babel/babel/pull/4690) Consolidate contiguous var declarations in destructuring transform. ([@motiz88](https://github.com/motiz88))\\n\\n```js title=\\"JavaScript\\"\\n// was wrapping variables in an IIFE incorrectly\\nfor ( let i = 0, { length } = list; i < length; i++ ) {\\n    console.log( i + \': \' + list[i] )\\n}\\n```\\n\\n[#4666](https://github.com/babel/babel/pull/4666) Fix error when constructor default arg refers to self or own static property. ([@danharper](https://github.com/danharper))\\n\\n```js title=\\"JavaScript\\"\\n// was producing invalid code\\nclass Ref {\\n  static nextId = 0\\n  constructor(id = ++Ref.nextId, n = id) {\\n    this.id = n\\n  }\\n}\\n\\nassert.equal(1, new Ref().id)\\nassert.equal(2, new Ref().id)\\n```\\n\\n[#4674](https://github.com/babel/babel/pull/4674) Handle side effects correctly in rest params index expressions (#4348). ([@motiz88](https://github.com/motiz88))\\n\\n```js title=\\"JavaScript\\"\\nfunction first(...values) {\\n    let index = 0;\\n    return values[index++]; // ++ was happening twice\\n}\\n\\nconsole.log(first(1, 2));\\n```\\n\\n[#4669](https://github.com/babel/babel/pull/4669) Fix block scoping transform for declarations in labeled statements. ([@motiz88](https://github.com/motiz88))\\n\\n```js title=\\"JavaScript\\"\\nlet x = 10;\\nif (1)\\n{\\n    ca: let x = 20;\\n}\\n```\\n\\n[#4672](https://github.com/babel/babel/pull/4672) Avoid repeating impure (template) literals when desugaring **= (#4403). ([@motiz88](https://github.com/motiz88))\\n\\n```js title=\\"JavaScript\\"\\na[`${b++}`] **= 1;\\n```\\n\\n[#4642](https://github.com/babel/babel/pull/4642) Exclude super from being assign to ref variable. ([@danez](https://github.com/danez))\\n\\n```js title=\\"JavaScript\\"\\nfoo = {\\n  bar() {\\n    return super.baz **= 12;\\n  }\\n}\\n```\\n\\n[#4670](https://github.com/babel/babel/pull/4670) Retain return types on ObjectMethods in transform-es2015-shorthand-properties. ([@danharper](https://github.com/danharper))\\n\\n```js title=\\"JavaScript\\"\\n// @flow\\nvar obj = {\\n  method(a: string): number {\\n    return 5 + 5;\\n  }\\n};\\n```\\n\\n[#4668](https://github.com/babel/babel/pull/4668) Retain method return types on transform-es2015-classes (Closes [#4665](https://github.com/babel/babel/issues/4665)). ([@danharper](https://github.com/danharper))\\n\\n```js title=\\"JavaScript\\"\\n// @flow\\nclass C {\\n  m(x: number): string {\\n    return \'a\';\\n  }\\n}\\n```\\n\\n## \ud83c\udfe0 Internal\\n[#4725](https://github.com/babel/babel/pull/4725) Remove babel-doctor from babel-cli. ([@kaicataldo](https://github.com/kaicataldo))\\n\\nIt\'s a one-time use tool (helpful after the initial release when upgrading from v5 to v6) that doesn\'t need to be a part of `babel-cli`. We\'ll publish it as a standalone package it someone asks for it.\\n\\n[#4764](https://github.com/babel/babel/pull/4764) Add TEST_DEBUG env var option for test.sh, to enable node 6 debugger. ([@DrewML](https://github.com/DrewML))\\n\\nWill be useful for contributors: `TEST_DEBUG=true make test` to run `node --inspect` on node v6+.\\n\\n[#4735](https://github.com/babel/babel/pull/4735) Automatically generate missing expected.js fixtures. ([@motiz88](https://github.com/motiz88))\\n\\nAlso amazing for contributors: if you create an `actual.js` test file without the `expected.js` it will generate it for you (like snapshot tests but with babel output).\\n\\n[#4734](https://github.com/babel/babel/pull/4734) Change usage of \\"suite\\"/\\"test\\" in unit-tests to \\"describe\\"/\\"it\\". ([@DrewML](https://github.com/DrewML))\\n\\n[#4564](https://github.com/babel/babel/pull/4564) Enable babel for tests. ([@danez](https://github.com/danez))\\n\\nThe non-fixture tests finally are also transpiled as well!\\n\\n[#4732](https://github.com/babel/babel/pull/4732) Run ESLint on test files, and fix lint errors in test files.. ([@DrewML](https://github.com/DrewML))\\n\\n[#4680](https://github.com/babel/babel/pull/4680) Update: Eslint to 3.0 and update CI builds (Closes [#4638](https://github.com/babel/babel/issues/4638)). ([@gyandeeps](https://github.com/gyandeeps))\\n\\nAllows us to use the latest version of eslint which drops support of node < 4 by only running lint on the lastest node which should save CI time.\\n\\n## \ud83c\udf89 First Merged Pull Request!\\n- Andrew Levine ([DrewML](https://github.com/DrewML))\\n- Eric Rozell ([rozele](https://github.com/rozele))\\n- Gyandeep Singh ([gyandeeps](https://github.com/gyandeeps))\\n- [Jamesernator](https://github.com/Jamesernator)\\n- Jordan Gensler ([kesne](https://github.com/kesne))\\n- Nazim Hajidin ([nhajidin](https://github.com/nhajidin))\\n- Simen Bekkhus ([SimenB](https://github.com/SimenB))\\n- [sugargreenbean](https://github.com/sugargreenbean)\\n\\n## \ud83c\udf0f Committers: 17\\n\\n- Brian Ng ([existentialism](https://github.com/existentialism))\\n- Dan Harper ([danharper](https://github.com/danharper))\\n- Daniel Tschinder ([danez](https://github.com/danez))\\n- Greenkeeper ([greenkeeperio-bot](https://github.com/greenkeeperio-bot))\\n- Henry Zhu ([hzoo](https://github.com/hzoo))\\n- Juriy Zaytsev ([kangax](https://github.com/kangax))\\n- Kai Cataldo ([kaicataldo](https://github.com/kaicataldo))\\n- Moti Zilberman ([motiz88](https://github.com/motiz88))\\n- Sam Goldman ([samwgoldman](https://github.com/samwgoldman))\\n\\n---\\n\\nCheck out [Github](https://github.com/babel/babel/releases/tag/v6.18.0) for the whole changelog!"},{"id":"/2016/09/28/6.16.0","metadata":{"permalink":"/babel-website/blog/2016/09/28/6.16.0","source":"@site/blog/2016-09-28-6.16.0.md","title":"6.16.0 Released","description":"Happy Birthday Babel \ud83c\udf82 !","date":"2016-09-28T03:45:00.000Z","formattedDate":"September 28, 2016","tags":[],"readingTime":7.755,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"6.16.0 Released","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2016-09-28T03:45:00.000Z","categories":"announcements","share_text":"6.16.0"},"prevItem":{"title":"6.18.0 Released","permalink":"/babel-website/blog/2016/10/24/6.18.0"},"nextItem":{"title":"Babili (babel-minify)","permalink":"/babel-website/blog/2016/08/26/babili"}},"content":"<p style={{textAlign:\\"center\\"}}>\\nHappy Birthday Babel \ud83c\udf82 !\\n</p>\\n\\n\x3c!--truncate--\x3e\\n\\n<blockquote class=\\"twitter-tweet\\" data-lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">Happy 2nd birthday <a href=\\"https://twitter.com/babeljs\\">@babeljs</a></p>&mdash; Sebastian McKenzie (@sebmck) <a href=\\"https://twitter.com/sebmck/status/781079584460697601\\">September 28, 2016</a></blockquote>\\n<script async src=\\"//platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>\\n\\n<pre style={{font: \\"10px/5px monospace\\"}}>\\n\\n                                      ```.```           ``````            ``````\\n                                     ````;````         ```:````          ```:````\\n                                    ````:;`````       ````;,````        ````;,````\\n                                   `````::,`````     ````:,:`````      ````:,:`````\\n                                   ````:,,:`````     ````:.,,````      ````:.,,````\\n                                   ````:..,.````    ````,,..:`````    ````,,..:`````\\n                                   ```.,.`,:````    ````:.`.,`````    ````:.`.,`````\\n                                   ```.,.`.:````    ````:.`.,.````    ````:.`.,.````\\n                                   ```.,...:````     ``.:...,.```      ``.:...,.```\\n                                    ::,,,.,,,:`      `:,,,.,,,:,       `:,,,.,,,::\\n                                   :,,.......,:      :,.......,,,      :,.......,,:\\n                                   :,.........,  ;++`............;++`  ,.........,:\\n                                   :.````````.. \'+\'+\'```````````,+\'++` ..````````.:\\n                                   ;,````````.,.+\'\'\'\',`````````.,\'\'++\' ,.````````,:\\n                                   ;,.`    ``.,++\'\'\'\',.``    ``.,\'\'\'\'+,,.``    `.,:\\n                                   :,.``  ```..+\'\'\'\'+,.```  ```.,\'\'\'++;,.```  ``.,:\\n                                  `:,.``  ```..+\'\'\'\'\',.```  ```.,\'\'\'\'+\',.```  ``.,:\\n                                  +,..``  ```..+++\'\'+,.```  ```.,+\'\'++;,.```  ``..:,\\n                                ,:+,.```  ```..++++++,.```  ```.,+++++.,.```  ```.,+,`\\n                              ,,.\'\',.```  ```.,`;+++\',.```  ```.,+++\'.`,.```  ```.,+.,:\\n                            `,,.`++,.```  ```.,``...`,.```  ```.,...```,.```  ```.,+`..,:\\n                           ,,..``\'+,.```  ```.,``````,.```  ```.,``````,.```  ```.,+```.,:\\n                          :,.```.,+,.```  ```.,``````,.```  ```.,``````,.```  ```.,\'.```..,`\\n                         :,.`````.,,.```  ```.,``````,.```  ```.,``````,.```  ```.,.``````.,\\n                        ,,.```````.,.```  ```.,``````,.```  ```.,``````,.```  ```.,```````..:\\n                        ,.`````````,.```  ```.,``````,.```  ```.,``````,.```  ```.,````````.,:\\n                       :,.```````` ,.```  ```.,``````,.```  ```.,``````,.```  ```., ````````.,\\n                       ,.```````.\'\'+\'```  ```., `````,.```  ```.,``````,.```  ``,\'\'+\'```````.,.\\n                       ,.```````+\'\'\'\';``  ```., `````,.```  ``..,``````,.```  ``+\'\'\'\';```````,:\\n                       ,.``````\'+\'\'\'\'+``` ```.,``````,.``` ```..,``````,.``` ``\'+\'\'\'\'+```````.:\\n                       ,.``````+\'\'\'\'\'\':`````.., `````,..`````..,,``````,..`````+\'\'\'\'\'\',``````,:\\n                       ,.``````+\'\'\'\'\'+\'.```..,````````,...``..,,````````,...``.+\'\'\'\'\'+\'`````.,,\\n                       :.``````+\'\'\'\'\'+\'......````   ```.......```   `````......+\'\'\'\'\'+\'`````.,\\n                       :.`````.+++++\'+:.....````.\'\'+\' ```....```.\'\'+\' ````.....+++++\'+:`````.,\\n                       ,,.````.:+++++\'``````````+\'\'\'\';``````````+\'\'\'\';`````````,+++++\'..````.,\\n                       .,.````..,;\';,.`````````\'+\'\'\'\'+ ````````\'+\'\'\'\'+ `````````.:\';:..`````.:\\n                        ,.``````....```````````+\'\'\'\'\'\', `````` +\'\'\'\'\'\',```````````...```````.:\\n                        ,.`````````````````````+\'\'\'\'\'+\'``````` +\'\'\'\'\'+\'````````````````````.,,\\n                        ,.`````````````````````+\'\'\'\'\'+\'````````+\'\'\'\'\'+\'````````````````````.,.\\n                        :.`````````````````````+++++\'+:``` ````+++++\'+:````````````````````.,`\\n                        :..````````````````````,+++++\'```` ````,+++++\'`````````````````````.,\\n                        ,,.`````````````````````.:\';,.```   ````.:\';,.`````````````````````.,\\n                        .,.```````````````````````````````   `````````````  ```````````````.:\\n                        `,.```````````````````` ```````       `````` `    ````````````````..:\\n                         ,..```````````````````                       ````````````````````.,:\\n                         ,...`````````````````````` ```        ```````````````````````````.,,\\n                         :....````````````````````````````````````````````````````````````.,.\\n                         :,.....`````````````````````````````````````````````````````````..,\\n                         :,......`````````````````````````````````````````````````````.....:\\n                         ,,........```````````````````````````````````````````````````.....:\\n                         .,........```````````````````````````````````````````````````....,:\\n                          ,..........```````````````````````````````````````````````......,:\\n                          :...........`````````````````````````````````````````````.......,:\\n                          :,...........````````````````````````````````````````````.......,,\\n                          :,..........``````````````````````````````````````````..........,`\\n                          :,............````````````````````````````````````````..........:\\n                          :,............````````````````````````````````````````.........,:\\n                          .,..............```````````````````````````````````............,:\\n                          `,,..............``````````````````````````````````............,:\\n                           :,...........`..````````````````````````````````..............,:\\n                           :,..............````````````````````````````````..............:.\\n                           ,,,.............```````````````````````````````..............,:\\n                            :,.............````````````````````````````````............,:,\\n                            `:,.............````````````````````````````..............,,:\\n                             .:,............```````````````````````````..............,::\\n                              .:,,..........````````````````````````````............,::\\n                                :,,..........````````````````````````.............,,:,\\n                                 ,:,,.........``````````````````````............,,:;\\n                                   ::,,........``````````````````.............,,::`\\n                                     ,::,,........``````.```.``............,,,:;`\\n                                        :::,,,........`.```............,,,:::.\\n                                           ,:::,,,,..............,,,,,::::`\\n                                               `.::::::,,,,,,,::::::,`\\n</pre>\\n\\nIt\'s hard to believe it\'s been 2 years already! Thanks so much to Sebastian for creating this amazing project!\\n\\nWe\'ve grown a lot:\\n\\n- 200+ contributors\\n- There\'s been ~113 releases since 6.0.0 and 512 release total.\\n- ~4.5 million downloads of `babel-core` in the last month\\n- 1400+ results for `babel-plugin` [on npm](https://www.npmjs.com/search?q=babel-plugin)\\n- 700+ results for `babel-preset` [on npm](https://www.npmjs.com/search?q=babel-preset)\\n- 4500+ users on our [slack](https://babeljs.slack.com)\\n\\nThanks so much for using and contributing to our community!\\n\\nIf you haven\'t checked recently, we\'ve moved back to [Github Issues](https://github.com/babel/babel/issues)! This is all thanks to [@danez](https://github.com/danez)\\n\\nLike most open source projects, Babel is maintained be just a few people working in their free time. We\'ll be working on making it easier to contribute in various ways (not just to the main codebase).\\n\\nWhat Evan Czaplicki says in [Code is the Easy Part](https://www.youtube.com/watch?list=PLglJM3BYAMPH2zuz1nbKHQyeawE4SN0Cd&v=DSjbTC-hvqQ) is really relevant to any project, big or small. A big part of contributing is just talking, using, writing about the project.\\n\\nTo that point, we should setup a curated, up-to-date [Resources Page](https://github.com/babel/babel.github.io/issues/27) and maybe a newsletter to talk about the awesome stuff people are making with Babel (a new plugin, a new tool, or just an idea).\\n\\nHopefully, we can work more with TC-39 like we do with t[tc39/ecma262#current-proposals](https://github.com/tc39/ecma262#current-proposals) and our stage-x presets and plugins. We should look to run [test262](https://github.com/tc39/test262) with Babel.\\n\\nWe\'ve also released [Babili, our minifier](https://github.com/babel/babili) and started work on [babel-preset-env, \\"autoprefixer\\" for Babel](https://github.com/babel/babel-preset-env).\\n\\nThe future of Babel is bright!\\n\\n## \ud83d\udc53 Spec Compliancy\\n[#3473](https://github.com/babel/babel/pull/3473) via [#4576](https://github.com/babel/babel/pull/4576) Implement support for async generator functions and for-await statements. ([@zenparsing](https://github.com/zenparsing))\\n\\nThis change implements the [async iteration proposal](https://github.com/tc39/proposal-async-iteration), currently at stage 2 (and is planned to be pushed to stage 3 at the current TC-39 meeting). It includes the following features:\\n\\n- Transforms async generator functions (`async function* g() { }`) to wrapped generator functions, similar to the current async-to-generator transform.\\n\\n```js title=\\"JavaScript\\"\\nasync function* agf() {\\n  await 1;\\n  yield 2;\\n}\\n```\\n\\n- Transforms `for-await` statements into for loops containing yield expressions.\\n\\n```js title=\\"JavaScript\\"\\nasync function f() {\\n  for await (let x of y) {\\n    g(x);\\n  }\\n}\\n```\\n\\nExample Usage\\n\\n```js title=\\"JavaScript\\"\\nasync function* genAnswers() {\\n  var stream = [ Promise.resolve(4), Promise.resolve(9), Promise.resolve(12) ];\\n  var total = 0;\\n  for await (let val of stream) {\\n    total += await val;\\n    yield total;\\n  }\\n}\\n\\nfunction forEach(ai, fn) {\\n  return ai.next().then(function (r) {\\n    if (!r.done) {\\n      fn(r);\\n      return forEach(ai, fn);\\n    }\\n  });\\n}\\n\\nvar output = 0;\\nreturn forEach(genAnswers(), function(val) { output += val.value })\\n.then(function () {\\n  assert.equal(output, 42);\\n});\\n```\\n\\n[#4500](https://github.com/babel/babel/pull/4500) Support computed class properties. ([@motiz88](https://github.com/motiz88))\\n\\nParser support was added in [babylon@6.11.0](https://github.com/babel/babylon/releases/tag/v6.11.0) with [babel/babylon#121](https://github.com/babel/babylon/pull/121)\\n\\n```js title=\\"JavaScript\\"\\n// Example\\nclass Foo {\\n  [x]\\n  [\'y\']\\n}\\n\\nclass Bar {\\n  [p]\\n  [m] () {}\\n}\\n```\\n\\n[#3702](https://github.com/babel/babel/pull/3702) Flow: generate exact object type annotations. ([@bhosmer](https://github.com/bhosmer))\\n\\nParser support was added in [babylon@6.10.0](https://github.com/babel/babylon/releases/tag/v6.10.0) with [babel/babylon#104](https://github.com/babel/babylon/pull/104)\\n\\n```js title=\\"JavaScript\\"\\n// Example\\nvar a : {| x: number, y: string |} = { x: 0, y: \'foo\' };\\n```\\n\\n## \ud83d\ude80 New Feature\\n\\n[#3561](https://github.com/babel/babel/pull/3561) `babel-core`: add options for a different parser or generator. ([@hzoo](https://github.com/hzoo))\\n\\nBabel will now also take the options: `parserOpts` and `generatorOpts` (as objects).\\n\\n`parserOpts` will pass all properties down to the default `babylon` parser. You can also pass a `parser` option to substitute for a different parser.\\n\\nThis will allow passing down any of `babylon\'s` [options](https://github.com/babel/babylon#options):\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"parserOpts\\": {\\n    \\"allowImportExportEverywhere\\": true,\\n    \\"allowReturnOutsideFunction\\": true,\\n    \\"sourceType\\": \\"module\\",\\n    \\"plugins\\": [\\"flow\\"]\\n  }\\n}\\n```\\n\\nYou can also pass down `parserOpts.parser` and `generatorOpts.generator`. This will enable the use of [recast](https://github.com/benjamn/recast) with Babel.\\n\\nRecast is used in [jscodeshift](https://github.com/facebook/jscodeshift) which is a tool to create [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb#.kef4rnxpd). You might know of these since the React team also [publishes them](https://github.com/reactjs/react-codemod/) to help convert between React releases.\\n\\n![recast](https://cloud.githubusercontent.com/assets/588473/16584612/04a82078-428b-11e6-9f79-a665eef848ea.gif)\\n\\n```json title=\\"JSON\\"\\n{\\n  \\"parserOpts\\": {\\n    \\"parser\\": \\"recast\\"\\n  },\\n  \\"generatorOpts\\": {\\n    \\"generator\\": \\"recast\\"\\n  }\\n}\\n```\\n\\nBabel as a compiler has 3 steps: parsing, transforming, and generation.\\n\\nAt a high level, the process is:\\n- parsing: take a string (input code) and turn it into JSON.\\n- transforming (plugins): take JSON and make a different JSON structure)\\n- code generation: turn the JSON back into a string (output code).\\n\\nThe last step of babel is the code generator. Traditionally, the code generator doesn\'t really need to care about the format of your code (spaces, quotes, etc). This is because the output code is your \\"compiled\\" code and will probably go in the dist directory, you will eventually minify it, etc.\\n\\nBut what if you want to write a babel plugin that runs on your source code and outputs to source (`babel src -d src` rather than `babel src -d lib`)? You would want your diff to be readable and for the plugin to only modify what is necessary by conforming to your style guide.\\n\\nThis is because you want to write a plugin that transforms the source itself. One use case is a project called [lebab](https://github.com/mohebifar/lebab\\n) which is actually just the opposite of babel (used to be called 5to6). Currently, [it isn\'t a babel plugin](https://github.com/mohebifar/lebab/issues/138) so we wanted to help support that usecase.\\n\\nOnce [benjamn/recast#299](https://github.com/benjamn/recast/pull/299) and [benjamn/ast-types#162](https://github.com/benjamn/ast-types/pull/162) are merged you should be able to make your own codemods with Babel as well!\\n\\n[#4542](https://github.com/babel/babel/pull/4542) Add support for preset organization shortcuts. ([@nkt](https://github.com/nkt))\\n\\n```js title=\\"JavaScript\\"\\n{\\n  presets: [\\"@org/babel-preset-name\\"], // actual package\\n  presets: [\\"@org/name\\"] // shorthand name\\n}\\n```\\n\\n[#4491](https://github.com/babel/babel/pull/4491) Add object rest spread `useBuiltIns` option. ([@hzoo](https://github.com/hzoo))\\n\\n`useBuiltIns` - Do not use Babel\'s helper\'s and just transform to use the built-in method (Disabled by default).\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"plugins\\": [\\n    [\\"transform-object-rest-spread\\", { \\"useBuiltIns\\": true }]\\n  ]\\n}\\n\\n// source\\nz = { x, ...y };\\n// compiled\\nz = Object.assign({ x }, y);\\n```\\n\\n[#4561](https://github.com/babel/babel/pull/4561) `babel-code-frame`: add options for `linesBefore`, `linesAfter`. ([@hzoo](https://github.com/hzoo))\\n\\n`babel-code-frame` is a standalone package that we use in Babel when reporting errors.\\n\\nNow there is an [option](https://github.com/babel/babel/blob/main/packages/babel-code-frame/README.md#options) to specify the number of lines above and below the error\\n\\n```js title=\\"JavaScript\\"\\n  1 | class Foo {\\n> 2 |   constructor()\\n    |                ^\\n  3 | }\\n```\\n\\n[#3695](https://github.com/babel/babel/pull/#3695) via [#4566](https://github.com/babel/babel/pull/4566) Allow presets to be ES6 default exports ([@johanssj](https://github.com/johanssj))\\n\\nWe previously made presets with commonjs exports\\n\\n```js title=\\"babel.config.js\\"\\nmodule.exports = {\\n  plugins: [\\n    require(\\"babel-plugin-syntax-trailing-function-commas\\")\\n  ]\\n};\\n```\\n\\nNow you can use export default as well\\n\\n```js title=\\"JavaScript\\"\\nimport syntaxTrailingCommas from \\"...\\";\\nexport default {\\n  plugins: [\\n    syntaxTrailingCommas\\n  ]\\n};\\n```\\n\\n## \ud83d\udc85 Polish\\n\\n[#4572](https://github.com/babel/babel/pull/4572), [#4579](https://github.com/babel/babel/pull/4579) Improve syntax highlighting colors. ([@lydell](https://github.com/lydell))\\n\\nBefore\\n\\n<img width=\\"611\\" alt=\\"screen shot 2016-09-27 at 11 12 47 am\\" src=\\"https://cloud.githubusercontent.com/assets/588473/18879735/6ba2820a-84a3-11e6-9e3f-fa8612620867.png\\" />\\n\\nAfter\\n\\n<img width=\\"611\\" alt=\\"screen shot 2016-09-27 at 3 50 02 pm\\" src=\\"https://cloud.githubusercontent.com/assets/588473/18889266/38829f96-84ca-11e6-8a19-0a39e440a0d3.png\\" />\\n\\n## \ud83d\udc1b Notable Bug Fixes\\n[#3686](https://github.com/babel/babel/pull/3686) Fix `typeof Symbol.prototype`. ([@brainlock](https://github.com/brainlock))\\n\\n```js title=\\"JavaScript\\"\\n// `typeof Symbol.prototype` should be \'object\'\\ntypeof Symbol.prototype === \'object\'\\n```\\n\\n[#4507](https://github.com/babel/babel/pull/4507) Only set options in `babel-cli` if different from default. ([@danez](https://github.com/danez))\\n\\nFix an issue with defaults not being overridden. This was causing options like `comments: false` not to work correctly.\\n\\n[#4524](https://github.com/babel/babel/pull/4524) Fix default export with arrows and function naming. ([@danharper](https://github.com/danharper))\\n\\n```\\n// this wasn\'t exporting correctly before\\nexport default ({ onClick }) => {\\n  return <div onClick={() => onClick()}></div>;\\n}\\n```\\n\\n[#4518](https://github.com/babel/babel/pull/4518) Fix default exported classes without a name. ([@danez](https://github.com/danez))\\n\\n```js title=\\"JavaScript\\"\\nexport default class {};\\n// wasn\'t correctly transforming to\\nexports[\\"default\\"] = class {}\\n// with the es3-transforms\\n```\\n\\n[#4521](https://github.com/babel/babel/pull/4521) Fix striping of `typeParameters` from arrow functions. ([@danez](https://github.com/danez))\\n\\n```js title=\\"JavaScript\\"\\n// <X> wasn\'t stripped out\\nconst find = <X> (f: (x:X) => X, xs: Array<X>): ?X => (\\n  xs.reduce(((b, x) => b ? b : f(x) ? x : null), null)\\n)\\n```\\n\\n[#4552](https://github.com/babel/babel/pull/4552) Fix destructuring evaluation with call expressions. ([@danez](https://github.com/danez))\\n\\nWe noticed that we can not make this optimizations if there are function calls or member expressions on the right hand side of the assignment since the function call or the member expression (which might be a getter with side-effect) could potentially change the variables we are assigning to.\\n\\n```js title=\\"JavaScript\\"\\n[x, y] = [a(), obj.x];\\n// was transforming to\\nx = a();\\ny = obj.x;\\n// now transforms to\\nvar _ref = [a(), obj.x];\\nx = _ref[0];\\ny = _ref[1];\\n```\\n\\n[#4587](https://github.com/babel/babel/pull/4587) Prevent flow-strip-types/flow-comments from removing entire ClassProperty. ([@danharper](https://github.com/danharper))\\n\\n---\\n\\nCheck out [Github](https://github.com/babel/babel/releases/tag/v6.16.0) for the rest of the changelog!"},{"id":"/2016/08/26/babili","metadata":{"permalink":"/babel-website/blog/2016/08/26/babili","source":"@site/blog/2016-08-26-babili.md","title":"Babili (babel-minify)","description":"We released Babili as beta (0.0.1) a few days ago under an MIT license!","date":"2016-08-30T10:50:00.000Z","formattedDate":"August 30, 2016","tags":[],"readingTime":8.68,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"Babili (babel-minify)","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2016-08-30T10:50:00.000Z","categories":"announcements","share_text":"Babili (babel-minify)"},"prevItem":{"title":"6.16.0 Released","permalink":"/babel-website/blog/2016/09/28/6.16.0"},"nextItem":{"title":"6.14.0 Released","permalink":"/babel-website/blog/2016/08/24/6.14.0"}},"content":"We released [Babili](https://github.com/babel/babili) as beta (0.0.1) a few days ago under an MIT license!\\n\\n> Try it out in the Babel [REPL](http://babeljs.io/repl/#?babili=true&evaluate=false) and report any bugs or potential optimizations we can make! There\'s also a [#minify](https://babeljs.slack.com/messages/minify/) slack room!\\n\\n\x3c!--truncate--\x3e\\n\\nThere are a lot of (valid) questions about why a new minifier is a good idea, so this post should help with that.\\n\\nTL;DR: Babili can accept ES2015+ input, while current minifiers are mostly limited to ES5, requiring code to be transpiled before minification. This is becoming unnecessary as people begin to ship ES2015 to clients. Babili is also modular/flexible (being a [Babel preset](http://babeljs.io/docs/plugins/#presets) means it supports user plugins) and can be used as a preset or CLI tool. Babili will also be able to make ES2015+ specific optimizations.\\n\\n## Pronunciation\\n\\n```shell title=\\"Shell\\"\\n# sounds like \\"bah billy\\" or \\"Babadi\\" (from DBZ)\\nsay Babili\\n```\\n\\nBabili is Babylon in Akkadian.\\n\\n> If you can\'t remember the name, babel-minify works too (made [an issue](https://github.com/babel/babili/issues/124) for the name).\\n\\n## Why minify?\\n\\nAt a basic level, [minification](https://en.wikipedia.org/wiki/Minification_(programming)) removes unnecessary characters from a program without changing its functionality -- things like comments, whitespace, newlines, and extra parentheses. Advanced minification may transform programs into smaller equivalents and remove redundant/unreachable code.\\n\\nMinification is primarily useful for decreasing the size of the JavaScript payload sent from the server to the client: users will download less code to use your website. Advanced minification can also result in shorter parse time (less code to parse) and in some cases faster runtime (e.g. advanced optimizations like function inlining).\\n\\n## Current minifiers\\n\\nTools such as [Uglify](https://github.com/mishoo/UglifyJS2) don\'t currently support targeting the latest version of ECMAScript ([not yet](https://github.com/mishoo/UglifyJS2/issues/448): [harmony branch](https://github.com/mishoo/UglifyJS2/tree/harmony)).\\n\\nWe currently use tools like Babel to compile ES2015 code down to ES5 code to support older browsers. Then we use something like Uglify to cut down on the bundle size.\\n\\nAs browsers implement more ES2015 features and we drop support for older browser versions, there is a sliding window of the version of ECMAScript you write in and the target ECMAScript version you minify to. However since Uglify cannot parse ES2015+, you would still have to compile down to ES5 anyway.\\n\\n## Babili\\n\\nThat\'s where Babili comes in.\\n\\nBabili is ES2015+ aware because it is built using the Babel toolchain.\\nIt is written as a set of Babel plugins, consumable with the [`babili` preset](https://github.com/babel/babili/tree/master/packages/babel-preset-babili).\\n\\n## Example\\n\\nSay we\'re targeting the latest versions of Chrome, Firefox, Edge, and Safari -- all of which support [ES2015 classes](http://babeljs.io/learn-es2015/#classes). Then, compiling ES2015 classes to a constructor function and prototype methods (ES5) results in more code (and potentially loses any optimizations browsers might have for classes).\\n\\n```js title=\\"JavaScript\\"\\nclass Mangler {\\n  constructor(program) {\\n    this.program = program;\\n  }\\n}\\n// need this since otherwise Mangler isn\'t used\\nnew Mangler();\\n```\\n\\nBefore, we might run Babel to transpile [the class into a function](http://babeljs.io/docs/plugins/transform-es2015-classes) and run Uglify on the compiled code to send to the browser.\\n\\n```js title=\\"JavaScript\\"\\n// ES2015 code -> Babel -> Uglify/Babili -> Minified ES5 Code\\nvar a=function a(b){_classCallCheck(this,a),this.program=b};a();\\n```\\n\\nWith Babili, you can just run the minifier which works on ES2015 code.\\n\\n```js title=\\"JavaScript\\"\\n// ES2015 code -> Babili -> Minified ES2015 Code\\nclass a{constructor(b){this.program=b}}new a;\\n```\\n\\nAlso it\'s important to note that this isn\'t specific to ES2015. Because Babel updates as ECMAScript updates (with [ES2015, ES2016, and now ES2017](http://babeljs.io/docs/plugins/#official-presets)) and follows the proposal process for experimental features (with our [stage-x presets](http://babeljs.io/docs/plugins/#stage-x-experimental-presets)), the minifier should be able to output whatever version of ECMAScript that is supported.\\n\\nIn the future, we might make use of the ES2015+ syntax information we have at compile time (e.g. we know that given function is an arrow function or that a given binding is block-scoped etc) to do advanced optimizations. And we can make use of the knowledge that we\'re targeting an ES2015+ environment in creative ways.\\n\\nWe\'re just getting started so let us know if you have any ideas!\\n\\n### [Some of the Plugins](https://github.com/babel/babili#plugins-in-babel-preset-babili)\\n\\nTo give an idea of some of the transforms:\\n\\n[babel-plugin-minify-constant-folding](https://github.com/babel/babili/tree/master/packages/babel-plugin-minify-constant-folding):\\n\\nTries to evaluate expressions and inline the result. For now only deals with numbers and strings.\\n\\n```js title=\\"JavaScript\\"\\n2 * 3;\\n\\"b\\" + a + \\"c\\" + \\"d\\" + g + z + \\"f\\" + \\"h\\" + \\"z\\"\\n```\\n\\n```js title=\\"JavaScript\\"\\n6;\\n\\"b\\" + a + \\"cd\\" + g + z + \\"fhz\\";\\n```\\n\\n[babel-plugin-minify-mangle-names](https://github.com/babel/babili/tree/master/packages/babel-plugin-minify-mangle-names):\\n\\nContext- and scope- aware variable renaming.\\n\\n```js title=\\"JavaScript\\"\\nvar globalVariableName = 42;\\nfunction foo() {\\n  var longLocalVariableName = 1;\\n  if (longLocalVariableName) {\\n    console.log(longLocalVariableName);\\n  }\\n}\\n```\\n\\n```js title=\\"JavaScript\\"\\nvar globalVariableName = 42;\\nfunction foo() {\\n  var a = 1;\\n  if (a) {\\n    console.log(a);\\n  }\\n}\\n```\\n\\n## Usage\\n\\n### Babel Preset\\n\\nIf you already use Babel, you can just add the [`babili`](https://github.com/babel/babili#babel-preset) preset (`babel-preset-babili`) to your config.\\n\\nYou will want to enable this only in production, so use the [env option](http://babeljs.io/docs/usage/babelrc/#env-option) which uses either `process.env.BABEL_ENV` or `process.env.NODE_ENV`\\n\\n```shell title=\\"Shell\\"\\n$ npm install babel-preset-babili --save-dev\\n```\\n\\n```js title=\\"JavaScript\\"\\n// previous .babelrc\\n{ \\"presets\\": [\\"es2015\\"] }\\n// .babelrc\\n{\\n  \\"presets\\": [\\"es2015\\"],\\n  \\"env\\": {\\n    \\"production\\": {\\n      \\"presets\\": [\\"babili\\"]\\n    }\\n  }\\n}\\n```\\n\\nOne issue with using Babili as a preset is that then Babili would only run per-file rather than on the whole bundle. Minification usually happens after bundling as with the \\"UglifyJsPlugin\\" in webpack. However, running it after bundling\\nwould lose the speed benefits (needs to be measured) of doing the transpiling/minification in the same step. Again, this is something we need to think about: how to integrate or pass more information to the bundler.\\n\\n### Babili CLI\\n\\nIf you don\'t use Babel, you can use our standalone CLI tool [`babili`](https://github.com/babel/babili#cli). (Currently it\'s just a wrapper for `babel-cli` + the preset). You could run this after transpiling (or not) in place of Uglify.\\n\\n```shell title=\\"Shell\\"\\n$ npm install babili --save-dev\\n```\\n\\n```shell title=\\"Shell\\"\\n$ babili src -d lib\\n# equivalent to\\n# babel src -d lib --presets=babili --no-babelrc\\n```\\n\\n### Webpack\\n\\nYou can just use the preset with [`babel-loader`](https://github.com/babel/babel-loader).\\n\\n```shell title=\\"Shell\\"\\n$ npm install babel-core babel-loader babel-preset-babili\\n```\\n\\n```js title=\\"JavaScript\\"\\nmodule: {\\n  loaders: [\\n    {\\n      test: /\\\\.js$/,\\n      loader: \'babel\',\\n      query: {\\n        presets: [\'babili\']\\n      }\\n    }\\n  ]\\n}\\n```\\n\\nOr use it separately with the [babili-webpack-plugin](https://github.com/boopathi/babili-webpack-plugin) (made by [@boopathi](https://github.com/boopathi/), who also works on Babili).\\n\\n```shell title=\\"Shell\\"\\n$ npm install babili-webpack-plugin --save-dev\\n```\\n\\n```js title=\\"JavaScript\\"\\n// webpack.config.js\\nconst BabiliPlugin = require(\\"babili-webpack-plugin\\");\\nmodule.exports = {\\n  entry: //...,\\n  output: //...,\\n  plugins: [\\n    new BabiliPlugin(options)\\n  ]\\n}\\n```\\n\\nWe want to have a better story with integration with Webpack/bundlers in the near future! Also check out [#100](https://github.com/babel/babili/issues/100).\\n\\n## Pros/Cons\\n\\n**Uglify Pros**\\n\\n- No change to existing tooling if you are already minifying.\\n\\n- Battle-tested/production ready (it\'s been around for years and has wide adoption (we are all using it)!\\n\\n- It\'s super fast and outputs small code already.\\n\\n**Uglify Cons**\\n\\n- Custom parser/tooling, so it\'s difficult to output/minify ES2015+ and make changes.\\n\\n- Not modular, and currently no way to create own plugins/minification strategies outside of core.\\n\\n**Babili Pros:**\\n\\n- ES2015+ aware (nothing special needs to be done because we can use the babylon parser) and Babel will update as standards/browsers update.\\n\\n- Uses the existing Babel toolchain, can consume as a Babel preset or standalone.\\n\\n- Potential for custom smart transforms for React/Flow, etc.\\n\\n- Could use Flow/Typescript annotations to enable advanced minification.\\n\\n- Each minification step can be split into its own plugin, and there\u2019s plenty of options for customization. This makes it easier to contribute and to find/submit issues for specific problems. It also means that people can independently create their own experimental plugins before upstreaming them into core.\\n  - For example: [this](https://github.com/babel/babili/tree/master/packages/babel-plugin-transform-minify-booleans) just turns `true` into `!0` which is straightforward to write.\\n\\n- Should be an easy transition if people are familiar with transpiling with Babel already.\\n\\n**Babili Cons:**\\n\\n- We released it early, so there aren\'t many users yet. Early adopters will have to deal with a tool that isn\'t as battle-tested as Uglify at first.\\n\\n- Right now, the performance is worse/size is worse than Uglify on our benchmark tests. However, this is something we\'ll be focusing on improving.\\n\\nTL;DR: Babili should be able to keep up with the ECMAScript standard as new features get added as well as target the environments you need to support. It has a lot of potential: it may not be as production-ready as Uglify at the moment since it was just released but as we continue to optimize with more users it should be more than capable.\\n\\n## How to Help\\n\\n[Amjad](https://twitter.com/amasad) had been working on this project for a while but we decided to release it earlier as a beta to allow the community to test it out and both contribute through reporting bugs and patches.\\n\\nIt\'s still early days for this project so there\'s a lot to help out with! Our next priority is to make Babili more stable/robust for a 1.0.0 release.\\n\\nWe will be working to get it as fast and produce code sizes as small as Uglify/[Closure Compiler](https://github.com/google/closure-compiler) in simple mode.\\n\\n- **Testing on more codebases**: This will help everyone greatly. Because a minifier runs on all code it has potential for a lot of edge cases/bugs not covered in our basic unit tests. Hopefully we can setup a way to report issues easily; now that the [repl](https://babeljs.io/repl/) supports the minifier it should be easier to reproduce/link bugs. In the future we want options to enable specific plugins so we can pinpoint minimal reproduction steps.\\n- **Project infrastructure/maintenance**: We want to create more robust benchmarking, setup integration tests on popular open source projects (run the minifier, and then run all the project\'s unit tests).\\n- **Check the output**: If something can be more simplified, it should be straightforward to create an issue and suggest a new transformation to an existing plugin or create a new one. We have the benefit of being modular so anyone can also make their own plugins and then we can figure out whether to include them in the core preset.\\n\\nHuge thanks to [Amjad (@amasad)](https://github.com/amasad) for starting this project and Facebook for allowing us to release this under the Babel organization as an MIT licensed project! [Sebastian (@kittens)](https://github.com/kittens) was obviously a big part of this given this wouldn\'t have been possible without Babel. Also thanks to [James (@thejameskyle)](https://github.com/thejameskyle), [Juriy (@kangax)](https://github.com/kangax) for helping see this through to release! Also want to give a shoutout to [Boopathi (@boopathi)](https://github.com/boopathi) who we invited to help us out after seeing the work on his own [babel-minify](https://github.com/boopathi/babel-minify) project!"},{"id":"/2016/08/24/6.14.0","metadata":{"permalink":"/babel-website/blog/2016/08/24/6.14.0","source":"@site/blog/2016-08-24-6.14.0.md","title":"6.14.0 Released","description":"A new es2017, latest preset, and lots of fixes in this release.","date":"2016-08-24T09:30:00.000Z","formattedDate":"August 24, 2016","tags":[],"readingTime":1.805,"hasTruncateMarker":true,"authors":[{"name":"Henry Zhu","url":"https://twitter.com/left_pad"}],"frontMatter":{"layout":"post","title":"6.14.0 Released","author":"Henry Zhu","authorURL":"https://twitter.com/left_pad","date":"2016-08-24T09:30:00.000Z","categories":"announcements","share_text":"6.14.0"},"prevItem":{"title":"Babili (babel-minify)","permalink":"/babel-website/blog/2016/08/26/babili"},"nextItem":{"title":"Babel Doctor","permalink":"/babel-website/blog/2015/11/03/babel-doctor"}},"content":"A new `es2017`, `latest` preset, and lots of fixes in this release.\\n\\n\x3c!--truncate--\x3e\\n\\nIt\'s been a while since the last post! If you haven\'t seen it, we started posting some notes at [babel/notes](https://github.com/babel/notes).\\n\\nAnd... we usually post [the changelog](https://github.com/babel/babel/blob/main/CHANGELOG.md) in [Releases](https://github.com/babel/babel/releases), but I figured it could go as a post as well for minor versions.\\n\\n## TAKE ME TO FLAVOR TOWN\\n\\n[#3624](https://github.com/babel/babel/pull/3624) A new preset for `es2017`: it includes the 2 previous stage-3 plugins:\\n\\n- async/await (via [transform-async-to-generator](http://babeljs.io/docs/plugins/transform-async-to-generator))\\n- [trailing commas in functions](http://babeljs.io/docs/plugins/syntax-trailing-function-commas).\\n- Thanks to [@bettiolo](https://github.com/bettiolo) for transferring the npm package\\n\\n```js title=\\"JavaScript\\"\\n// .babelrc\\n{ \\"presets\\": [\\"es2017\\"] }\\n```\\n\\n[#3625](https://github.com/babel/babel/pull/3625), [#3673](https://github.com/babel/babel/pull/3673) A new preset called `latest` to include at transforms ES2015+ (currently ES2015, ES2016, ES2017). You can also pass options down to the `es2015` preset.\\n\\n> We also will be working on getting a target/env (autoprefixer) preset soon.\\n\\n```js title=\\"JavaScript\\"\\n// .babelrc\\n{ \\"presets\\": [\\"latest\\"] }\\n// with options\\n{ \\"presets\\": [\\n  [\\"latest\\", {\\n    \\"es2015\\": {\\n      \\"modules\\": false\\n    }\\n  }]\\n] }\\n```\\n\\n[#3671](https://github.com/babel/babel/pull/3671) We also are including a `spec` option for the `es2015` preset since the [arrow function](http://babeljs.io/docs/plugins/transform-es2015-arrow-functions/)/[template string](http://babeljs.io/docs/plugins/transform-es2015-template-literals/) plugins support this option.\\n\\n> `spec` for arrow functions adds a runtime check to make sure arrow functions are not instantiated (since they transform into normal functions).\\n> `spec` for template literals wraps all expressions in `String` rather than simple string concatenation.\\n\\n```js title=\\"JavaScript\\"\\n// .babelrc\\n{\\n  \\"presets\\": [\\n    [\\"es2015\\", { \\"spec\\": true }]\\n  ]\\n}\\n```\\n\\n[#3659](https://github.com/babel/babel/pull/3659) @kittens added an optional `wrapPluginVisitorMethod` callback to transform to allow for performance tracking/introspection of plugins. More docs will be added on the [website](http://babeljs.io/) soon.\\n\\n[#3658](https://github.com/babel/babel/pull/3658) sourcemaps will also now have a `names` field for identifiers to allow debuggers to do re-aliasing of mangled identifiers.\\n\\n[#3518](https://github.com/babel/babel/pull/3518) For spec compliancy, we now will throw on a file with multiple export default.\\n\\n### Notable Bug Fixes\\n\\n[#3527](https://github.com/babel/babel/pull/3527) Fix class inheritance in IE <=10 without `loose` mode.\\n\\n[#3644](https://github.com/babel/babel/pull/3644) Support the `ignore` config option in `.babelrc`.\\n\\n[#3655](https://github.com/babel/babel/pull/3655) Flow-only class props were not be stripped without `transform-class-properties`.\\n\\n#### Guy Fieri\\n[#3641](https://github.com/babel/babel/pull/3641) Fix exports of babel-core. ([@thejameskyle](https://github.com/thejameskyle))\\n\\n[#3646](https://github.com/babel/babel/pull/3646) Remove Guy Fieri from Babel\'s source code. ([@jdan](https://github.com/jdan))\\n\\nThanks!\\n\\n> And check out [babel/babel#v6.14.0](https://github.com/babel/babel/releases/tag/v6.14.0) for the rest of the changelog."},{"id":"/2015/11/03/babel-doctor","metadata":{"permalink":"/babel-website/blog/2015/11/03/babel-doctor","source":"@site/blog/2015-11-03-babel-doctor.md","title":"Babel Doctor","description":"Babel Doctor is heavily inspired ripped from the awesome","date":"2015-11-03T10:30:00.000Z","formattedDate":"November 3, 2015","tags":[],"readingTime":0.995,"hasTruncateMarker":true,"authors":[{"name":"Sebastian McKenzie","url":"https://twitter.com/sebmck"}],"frontMatter":{"layout":"post","title":"Babel Doctor","author":"Sebastian McKenzie","authorURL":"https://twitter.com/sebmck","date":"2015-11-03T10:30:00.000Z","categories":"announcements","share_text":"Babel Doctor"},"prevItem":{"title":"6.14.0 Released","permalink":"/babel-website/blog/2016/08/24/6.14.0"},"nextItem":{"title":"Setting up Babel 6","permalink":"/babel-website/blog/2015/10/31/setting-up-babel-6"}},"content":"> Babel Doctor is <s>heavily inspired</s> ripped from the awesome\\n> [Yeoman Doctor](https://github.com/yeoman/doctor) by\\n> [Sindre Sorhus](https://github.com/sindresorhus).\\n\\n---\\n\\n> babel-doctor has been removed as of v6.18.0 of `babel-cli`. If anyone needs it we will bring it back as a standalone npm module called `babel-doctor`.\\n\\n\x3c!--truncate--\x3e\\n\\nWe launched [Babel 6](https://babeljs.io/blog/2015/10/29/6.0.0/) last week. This was a\\npretty big change from the previous batteries included Babel and with it came a host of\\npotential environment issues.\\n\\nIn order to combat this we now include a `babel-doctor` command with the `babel-cli` that\\ndetects common problems with your Babel installation such as:\\n\\n- Missing `.babelrc`.\\n- Duplicate Babel core modules\\n- Outdated Babel core modules\\n\\n## Usage\\n\\nFirst, make sure you have the Babel CLI installed.\\n\\n```sh title=\\"Shell\\"\\n$ npm install -g babel-cli@^6.1.0\\n```\\n\\nThen simply `cd` into your project directory and run:\\n\\n```sh title=\\"Shell\\"\\n$ babel-doctor\\n\\nBabel Doctor\\nRunning sanity checks on your system. This may take a few minutes...\\n\\n\u2714 Found config at /Users/sebastian/.babelrc\\n\u2714 All babel packages appear to be up to date\\n\u2714 No duplicate babel packages found\\n\\nEverything looks all right!\\n\\n```\\n\\n----\\n\\nWe hope this makes it easier to setup and use Babel in your project.\\n\\nHappy hacking!"},{"id":"/2015/10/31/setting-up-babel-6","metadata":{"permalink":"/babel-website/blog/2015/10/31/setting-up-babel-6","source":"@site/blog/2015-10-31-setting-up-babel-6.md","title":"Setting up Babel 6","description":"Babel 6 is fresh off the press and we\u2019re still getting a lot sorted out. In the past two days we\'ve seen more activity on GitHub and Slack than ever before. Everyone who has been helping out has been doing a great job.","date":"2015-10-31T17:30:00.000Z","formattedDate":"October 31, 2015","tags":[],"readingTime":2.585,"hasTruncateMarker":true,"authors":[{"name":"James Kyle","url":"https://twitter.com/thejameskyle"}],"frontMatter":{"layout":"post","title":"Setting up Babel 6","author":"James Kyle","authorURL":"https://twitter.com/thejameskyle","date":"2015-10-31T17:30:00.000Z","categories":"announcements","share_text":"Setting up Babel 6"},"prevItem":{"title":"Babel Doctor","permalink":"/babel-website/blog/2015/11/03/babel-doctor"},"nextItem":{"title":"6.0.0 Released","permalink":"/babel-website/blog/2015/10/29/6.0.0"}},"content":"Babel 6 is fresh off the press and we\u2019re still getting a lot sorted out. In the past two days we\'ve seen more activity on GitHub and Slack than ever before. Everyone who has been helping out has been doing a great job.\\n\\nHowever, the documentation is still lacking at this point, I\u2019m currently going through and creating an entirely new \u201cGetting Started\u201d section of the site.\\n\\n\x3c!--truncate--\x3e\\n\\nThis blog post will cover most of the basics until that\u2019s completed.\\n\\n## Installing Babel\\n\\nThe `babel` package is no more. Previously, it was the entire compiler and all the transforms plus a bunch of CLI tools, but this lead to unnecessarily large downloads and was a bit confusing. Now we\u2019ve split it up into two separate packages: `babel-cli` and `babel-core`.\\n\\n```sh title=\\"Shell\\"\\n$ npm install --global babel-cli\\n# or\\n$ npm install --save-dev babel-core\\n```\\n\\nIf you want to use Babel from the CLI you can install `babel-cli` or if you want to use the Node API you can install `babel-core`.\\n\\nRight now, most integrations haven\u2019t been updated for Babel 6, but that will be changing over the coming days.\\n\\n## Adding Plugins and Presets\\n\\nBabel 6 ships without any default transforms, so when you run Babel on a file it will just print it back out to you without changing anything.\\n\\nIn order to start compiling various features you need to install plugins. For example if you want to use arrow functions:\\n\\nFirst install the arrow functions plugin:\\n\\n```sh title=\\"Shell\\"\\n$ npm install --save-dev babel-plugin-transform-es2015-arrow-functions\\n```\\n\\nThen add it to your `.babelrc` file like this:\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"plugins\\": [\\"transform-es2015-arrow-functions\\"]\\n}\\n```\\n\\nNow if you run Babel on a file with arrow functions they will be compiled. Easy right? Not so fast.\\n\\nBabel plugins are designed to compile down incrementally. Say if you wanted to use an ES2019 feature, it would be compiled down to ES2018 then ES2017 and so on. This ensures that people can use native implementation if they want to.\\n\\nThis even happens within a single specification, for example ES2015 constants will be compiled to ES2015 `let` variables. So if you want it to go all the way down to ES5 you need to compile that as well.\\n\\n```sh title=\\"Shell\\"\\n$ npm install --save-dev babel-plugin-check-es2015-constants\\n$ npm install --save-dev babel-plugin-transform-es2015-block-scoping\\n```\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"plugins\\": [\\n    \\"check-es2015-constants\\",\\n    \\"transform-es2015-block-scoping\\"\\n  ]\\n}\\n```\\n\\nThese dependencies aren\u2019t easy to keep track and if you don\u2019t want to manually specify them all you may install a preset instead.\\n\\n```sh title=\\"Shell\\"\\n$ npm install --save-dev babel-preset-es2015\\n```\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"presets\\": [\\"es2015\\"]\\n}\\n```\\n\\nTo Include all JavaScript versions:\\n\\n```sh title=\\"Shell\\"\\n$ npm install --save-dev babel-preset-env\\n```\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"presets\\": [\\"env\\"]\\n}\\n```\\n\\nReact also has it\u2019s own preset:\\n\\n```sh title=\\"Shell\\"\\n$ npm install --save-dev babel-preset-react\\n```\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"presets\\": [\\"react\\"]\\n}\\n```\\n\\nThis is also what the `stage` option has been replaced with:\\n\\n```sh title=\\"Shell\\"\\n$ npm install --save-dev babel-preset-stage-2\\n```\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \\"presets\\": [\\"stage-2\\"]\\n}\\n```\\n\\n> Note: Stage presets include all the stages above them automatically (ie. stage 1 includes 2 and 3)"},{"id":"/2015/10/29/6.0.0","metadata":{"permalink":"/babel-website/blog/2015/10/29/6.0.0","source":"@site/blog/2015-10-29-6.0.0.md","title":"6.0.0 Released","description":"NOTE: Not all integrations have been updated yet. This is a very disruptive major","date":"2015-10-29T17:00:00.000Z","formattedDate":"October 29, 2015","tags":[],"readingTime":5.4,"hasTruncateMarker":true,"authors":[{"name":"James Kyle","url":"https://twitter.com/thejameskyle"}],"frontMatter":{"layout":"post","title":"6.0.0 Released","author":"James Kyle","authorURL":"https://twitter.com/thejameskyle","date":"2015-10-29T17:00:00.000Z","categories":"announcements","share_text":"6.0.0"},"prevItem":{"title":"Setting up Babel 6","permalink":"/babel-website/blog/2015/10/31/setting-up-babel-6"},"nextItem":{"title":"React on ES6+","permalink":"/babel-website/blog/2015/07/07/react-on-es6-plus"}},"content":"> **NOTE:** Not all integrations have been updated yet. This is a very disruptive major\\n> so please bear with us as we smooth out the edges.\\n\\nIt\u2019s hard to believe it\u2019s been a year since the Babel project started, but there was a birthday cake, so it must be real!\\n\\n\x3c!--truncate--\x3e\\n\\n<blockquote class=\\"twitter-tweet\\" lang=\\"en\\"><p lang=\\"en\\" dir=\\"ltr\\">I work with some super awesome people. Thank you <a href=\\"https://twitter.com/cpojer\\">@cpojer</a> and Ovidiu! <a href=\\"https://t.co/l1NzyobiBz\\">pic.twitter.com/l1NzyobiBz</a></p>&mdash; Sebastian McKenzie (@sebmck) <a href=\\"https://twitter.com/sebmck/status/648495457623252992\\">September 28, 2015</a></blockquote>\\n<script async src=\\"//platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>\\n\\nA whole lot has happened over the last year. We\u2019ve travelled all over the world talking about Babel, and we\u2019ve met some really awesome people along the way.\\n\\nBabel has spent the last year finding its place in the JavaScript community. In February we decided that Babel wasn\u2019t just going to be a ES6 transpiler. Instead, it needed to become a platform. A suite of tools designed to create the next generation of JavaScript tooling.\\n\\nWhen we released Babel 5, it came with a new plugin API that allowed anyone to use the full power of Babel to create tools that plug directly into the transform process. In just a few short months this has blown up into an [entire ecosystem of tools](https://www.npmjs.com/search?q=babel-plugin).\\n\\nDevelopers have built everything from debugging tools, framework optimizations, and minifiers to experimental new syntaxes and systems to enforce complex rules on their codebases. These extensions have proven to be both creative and extremely useful.\\n\\nPeople have also built complex tooling on top of Babel internals, like [documentationjs](http://documentation.js.org) which uses Babel\u2019s Babylon parser to replace an existing tool with a much more intelligent version.\\n\\nBut we think we can go even further. Babel should be able to power minifiers, linters, formatters, syntax highlighters, code completion tools, type checkers, codemod tools, and every other tool to be using the same foundation to do their job better than ever before.\\n\\nSo today we\u2019re releasing Babel 6.\\n\\nThis is the most significant update we\u2019ve ever made and enables the project to truly become a platform for the community to build upon.\\n\\n### Modularization\\n\\nThe biggest change you\u2019ll notice is that Babel has been completely restructured to be as modular as possible, and all of the transformers have been rewritten as plugins using the same API that is exposed to everyone.\\n\\nAll of the internals have been pulled out into separate packages as well, each defining a lightweight public API that can be used independently of everything else.\\n\\nIf there\u2019s something you want to build with some Babel internals, you can now just install the package and have full access to them. Inside the [packages directory](https://github.com/babel/babel/tree/development/packages) you\u2019ll find all existing packages and plugins.\\n\\n### Opt-in Plugins\\n\\nSince Babel is focusing on being a platform for JavaScript tooling and not an ES2015 transpiler, we\u2019ve decided to make all of the plugins opt-in. This means when you install Babel it will no longer transpile your ES2015 code by default.\\n\\nIn order to drastically simplify the public API of Babel, each transformer is now completely independent. This means the \u2018blacklist\u2019, \u2018whitelist\u2019, \u2018optional\u2019, \u2018nonStandard\u2019, and \u2018modules\u2019 options have all been removed, but that doesn\u2019t mean you need to do more work to get Babel to transform your codebase.\\n\\n### Plugin Presets\\n\\nSince specifying and maintaining dozens of transformers in a config file would be a lot of work, Babel 6 is introducing the concept of Plugin Presets which group together similar plugins for easy consumption.\\n\\n```sh title=\\"Shell\\"\\n$ npm install --save-dev babel-preset-es2015\\n```\\n\\n```js title=\\"JavaScript\\"\\n{\\n  \u201cpresets\u201d: [\u201ces2015\u201d]\\n}\\n```\\n\\nThe official presets included today are `babel-preset-es2015` and `babel-preset-react`, but we expect there will be many more in the future.\\n\\nWe also added presets for stages such as `babel-preset-stage-0` (used to be `stage: 0` in `.babelrc` in babel 5.x).\\n\\n### Performance Improvements\\n\\nPerformance continues to be one of the top priorities of Babel. Babel 5 changed the transformation and traversal pipeline dramatically to make way for some major performance improvements that have been implemented in Babel 6.\\n\\nThe traversal process is one of biggest chunks of time spent in the Babel pipeline. With any AST-based tool you want to make sure that you traverse the tree as little as possible to keep it fast. Plugins were designed around this so that they could be lightning fast while working with everything else.\\n\\nBabel 6 implements a new optimization which merges all plugins together into a single traversal. It then manages the traversal process completely so plugins don\u2019t ever have to worry about doing so manually. As a developer you can simply focus on writing your transform, and Babel will handle the rest.\\n\\n### Plugin API\\n\\nWe received a lot of feedback that the plugin API was confusing, so in Babel 6, it\u2019s a bit simpler. Note that this is a breaking change, but it should reduce confusion quite a bit.\\n\\n**Babel 5**\\n\\n```js title=\\"JavaScript\\"\\nexport default function({ Plugin, types: t }) {\\n  return new Plugin(\u2018ast-transform\u2019, {\\n    visitor: { \u2026 }\\n  });\\n}\\n```\\n\\n**Babel 6**\\n\\n```js title=\\"JavaScript\\"\\nexport default function({ types: t }) {\\n  return {\\n    visitor: { \u2026 }\\n  };\\n}\\n```\\n\\n> **Plugin Authors**: When updating your plugins, please remember to bump your major versions since this makes Babel 5 and 6 incompatible. Semver is important!\\n\\n### New/Updated Proposals\\n\\nThere are a couple of updated TC39 proposals that have come out. Babel 6 updates to the latest revisions of decorators, class properties, and others.\\n\\n### In Closing\\n\\nThis is a really exciting release for us.\\n\\nAnyone who\'s ever been involved with an open source project knows that it\'s a ton of work, but at the end of the day it\'s incredibly gratifying to be able to contribute even the tiniest bit back to the community.\\n\\nSebastian has been up literally all night to finish all the last minute things needed to launch Babel 6 during his EmberCamp keynote. It\'s currently 1am for me in San Francisco and I\'m writing this blog post as quickly as possible, listening to EDM music to stay awake.\\n\\nI want to thank everyone who has ever helped out even the littlest bit with Babel. A huge shoutout to Logan Smyth ([@loganfsmyth](https://github.com/loganfsmyth)), Henry Zhu ([@hzoo](https://github.com/hzoo)), Jesse McCarthy ([@jmm](https://github.com/jmm)), and Denis Pushkarev ([@zloirock](https://github.com/zloirock)) for all their hard work managing issues and contributing to Babel.\\n\\nWe\u2019re excited to finally release Babel 6 to the world. As always, we\u2019re committed to pushing Babel to be the best tool it can be, so please keep the GitHub issues and pull requests coming!"},{"id":"/2015/07/07/react-on-es6-plus","metadata":{"permalink":"/babel-website/blog/2015/07/07/react-on-es6-plus","source":"@site/blog/2015-07-07-react-on-es6-plus.md","title":"React on ES6+","description":"While redesigning Instagram Web from the inside out this year, we enjoyed using a number of ES6+ features to write our React components. Allow me to highlight some of the ways that these new language features can change the way you write a React app, making it easier and more fun than ever.","date":"2015-06-07T17:00:00.000Z","formattedDate":"June 7, 2015","tags":[],"readingTime":4.96,"hasTruncateMarker":true,"authors":[{"name":"Steven Luscher","url":"https://twitter.com/steveluscher"}],"frontMatter":{"layout":"post","title":"React on ES6+","author":"Steven Luscher","authorURL":"https://twitter.com/steveluscher","date":"2015-06-07T17:00:00.000Z","categories":"announcements","share_text":"React on ES6+","guest_post":true,"guest_description":"This is a guest post from Steven Luscher. Steven works on Relay at Facebook \u2013\\na JavaScript framework for building applications using React and GraphQL.\\nFollow Steven on <a href=\\"https://instagram.com/steveluscher/\\">Instagram</a>, <a href=\\"https://github.com/steveluscher\\">GitHub</a>,\\nand <a href=\\"https://twitter.com/steveluscher\\">Twitter</a>.\\n"},"prevItem":{"title":"6.0.0 Released","permalink":"/babel-website/blog/2015/10/29/6.0.0"},"nextItem":{"title":"Function Bind Syntax","permalink":"/babel-website/blog/2015/05/14/function-bind"}},"content":"While redesigning [Instagram Web](https://instagram.com/instagram/) from the inside out this year, we enjoyed using a number of ES6+ features to write our React components. Allow me to highlight some of the ways that these new language features can change the way you write a React app, making it easier and more fun than ever.\\n\\n\x3c!--truncate--\x3e\\n\\n## Classes\\n\\nBy far the most outwardly visible change to how we write React components using ES6+ comes about when we choose to use the **[class definition syntax](https://babeljs.io/docs/learn-es2015/#classes)**. Instead of using the `React.createClass` method to define a component, we can define a bonafide ES6 class that extends `React.Component`:\\n\\n```js title=\\"JavaScript\\"\\nclass Photo extends React.Component {\\n  render() {\\n    return <img alt={this.props.caption} src={this.props.src} />;\\n  }\\n}\\n```\\n\\nRight away, you\'ll notice a subtle difference \u2013 a more terse syntax is available to you when defining classes:\\n\\n```js title=\\"JavaScript\\"\\n// The ES5 way\\nvar Photo = React.createClass({\\n  handleDoubleTap: function(e) { \u2026 },\\n  render: function() { \u2026 },\\n});\\n```\\n\\n```js title=\\"JavaScript\\"\\n// The ES6+ way\\nclass Photo extends React.Component {\\n  handleDoubleTap(e) { \u2026 }\\n  render() { \u2026 }\\n}\\n```\\n\\nNotably, we\'ve dropped two parentheses and a trailing semicolon, and for each method declared we omit a colon, a `function` keyword, and a comma.\\n\\nAll of the lifecycle methods but one can be defined as you would expect when using the new class syntax. The class\' `constructor` now assumes the role previously filled by `componentWillMount`:\\n\\n```js title=\\"JavaScript\\"\\n// The ES5 way\\nvar EmbedModal = React.createClass({\\n  componentWillMount: function() { \u2026 },\\n});\\n```\\n\\n```js title=\\"JavaScript\\"\\n// The ES6+ way\\nclass EmbedModal extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    // Operations usually carried out in componentWillMount go here\\n  }\\n}\\n```\\n\\n## Property initializers\\n\\nIn the ES6+ class world, prop types and defaults live as static properties on the class itself. These, as well as the component\'s initial state, can be defined using ES7 **[property initializers](https://gist.github.com/jeffmo/054df782c05639da2adb)**:\\n\\n```js title=\\"JavaScript\\"\\n// The ES5 way\\nvar Video = React.createClass({\\n  getDefaultProps: function() {\\n    return {\\n      autoPlay: false,\\n      maxLoops: 10,\\n    };\\n  },\\n  getInitialState: function() {\\n    return {\\n      loopsRemaining: this.props.maxLoops,\\n    };\\n  },\\n  propTypes: {\\n    autoPlay: React.PropTypes.bool.isRequired,\\n    maxLoops: React.PropTypes.number.isRequired,\\n    posterFrameSrc: React.PropTypes.string.isRequired,\\n    videoSrc: React.PropTypes.string.isRequired,\\n  },\\n});\\n```\\n\\n```js title=\\"JavaScript\\"\\n// The ES6+ way\\nclass Video extends React.Component {\\n  static defaultProps = {\\n    autoPlay: false,\\n    maxLoops: 10,\\n  }\\n  static propTypes = {\\n    autoPlay: React.PropTypes.bool.isRequired,\\n    maxLoops: React.PropTypes.number.isRequired,\\n    posterFrameSrc: React.PropTypes.string.isRequired,\\n    videoSrc: React.PropTypes.string.isRequired,\\n  }\\n  state = {\\n    loopsRemaining: this.props.maxLoops,\\n  }\\n}\\n```\\n\\nES7 property initializers operate inside the class\' constructor, where `this` refers to the instance of the class under construction, so the initial state can still be made to depend on `this.props`. Notably, we no longer have to define prop defaults and the initial state object in terms of a getter function.\\n\\n## Arrow functions\\n\\nThe `React.createClass` method used to perform some extra binding work on your component\'s instance methods to make sure that, inside them, the `this` keyword would refer to the instance of the component in question.\\n\\n```js title=\\"JavaScript\\"\\n// Autobinding, brought to you by React.createClass\\nvar PostInfo = React.createClass({\\n  handleOptionsButtonClick: function(e) {\\n    // Here, \'this\' refers to the component instance.\\n    this.setState({showOptionsModal: true});\\n  },\\n});\\n```\\n\\nSince we don\'t involve the `React.createClass` method when we define components using the ES6+ class syntax, it would seem that we need to manually bind instance methods wherever we want this behavior:\\n\\n```js title=\\"JavaScript\\"\\n// Manually bind, wherever you need to\\nclass PostInfo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    // Manually bind this method to the component instance...\\n    this.handleOptionsButtonClick = this.handleOptionsButtonClick.bind(this);\\n  }\\n  handleOptionsButtonClick(e) {\\n    // ...to ensure that \'this\' refers to the component instance here.\\n    this.setState({showOptionsModal: true});\\n  }\\n}\\n```\\n\\nLuckily, by combining two ES6+ features \u2013 **[arrow functions](https://babeljs.io/docs/learn-es2015/#arrows)** and property initializers \u2013 opt-in binding to the component instance becomes a breeze:\\n\\n```js title=\\"JavaScript\\"\\nclass PostInfo extends React.Component {\\n  handleOptionsButtonClick = (e) => {\\n    this.setState({showOptionsModal: true});\\n  }\\n}\\n```\\n\\nThe body of ES6 arrow functions share the same lexical `this` as the code that surrounds them, which gets us the desired result because of the way that ES7 property initializers are scoped. [Peek under the hood](https://babeljs.io/repl/#?experimental=true&evaluate=true&loose=false&spec=false&code=class%20PostInfo%20extends%20React.Component%20%7B%0A%09handleOptionsButtonClick%20%3D%20(e)%20%3D%3E%20%7B%0A%20%20%20%20this.setState(%7BshowOptionsModal%3A%20true%7D)%3B%0A%20%20%7D%0A%7D) to see why this works.\\n\\n## Dynamic property names & template strings\\n\\nOne of the **[enhancements to object literals](https://babeljs.io/docs/learn-es2015/#enhanced-object-literals)** includes the ability to assign to a derived property name. We might have originally done something like this to set a piece of state:\\n\\n```js title=\\"JavaScript\\"\\nvar Form = React.createClass({\\n  onChange: function(inputName, e) {\\n    var stateToSet = {};\\n    stateToSet[inputName + \'Value\'] = e.target.value;\\n    this.setState(stateToSet);\\n  },\\n});\\n```\\n\\nNow, we have the ability to construct objects whose property names are determined by a JavaScript expression at runtime. Here, we use a **[template string](https://babeljs.io/docs/learn-es2015/#template-strings)** to determine which property to set on state:\\n\\n```js title=\\"JavaScript\\"\\nclass Form extends React.Component {\\n  onChange(inputName, e) {\\n    this.setState({\\n      [`${inputName}Value`]: e.target.value,\\n    });\\n  }\\n}\\n```\\n\\n## Destructuring & spread attributes\\n\\nOften when composing components, we might want to pass down *most* of a parent component\'s props to a child component, but not all of them. In combining ES6+ **[destructuring](https://babeljs.io/docs/learn-es2015/#destructuring)** with JSX **[spread attributes](https://facebook.github.io/react/docs/jsx-spread.html)**, this becomes possible without ceremony:\\n\\n```js title=\\"JavaScript\\"\\nclass AutoloadingPostsGrid extends React.Component {\\n  render() {\\n    const {\\n      className,\\n      ...others  // contains all properties of this.props except for className\\n    } = this.props;\\n    return (\\n      <div className={className}>\\n        <PostsGrid {...others} />\\n        <button onClick={this.handleLoadMoreClick}>Load more</button>\\n      </div>\\n    );\\n  }\\n}\\n```\\n\\nWe can combine JSX spread attributes with regular attributes too, taking advantage of a simple precedence rule to implement overrides and defaults. This element will acquire the `className` \u201coverride\u201d even if there exists a `className` property in `this.props`:\\n\\n```js title=\\"JavaScript\\"\\n<div {...this.props} className=\\"override\\">\\n  \u2026\\n</div>\\n```\\n\\nThis element will regularly have the `className` \u201cbase\u201d unless there exists a `className` property in `this.props` to override it:\\n\\n```js title=\\"JavaScript\\"\\n<div className=\\"base\\" {...this.props}>\\n  \u2026\\n</div>\\n```\\n\\n## Thanks for reading\\n\\nI hope that you enjoy using ES6+ language features to write React code as much as we do. Thanks to my colleagues for their contributions to this post, and thanks especially to the Babel team for making the future available to all of us, today."},{"id":"/2015/05/14/function-bind","metadata":{"permalink":"/babel-website/blog/2015/05/14/function-bind","source":"@site/blog/2015-05-14-function-bind.md","title":"Function Bind Syntax","description":"Babel 5.4 was just released and with it comes support for a new","date":"2015-05-14T19:30:00.000Z","formattedDate":"May 14, 2015","tags":[],"readingTime":2.015,"hasTruncateMarker":true,"authors":[{"name":"James Kyle","url":"https://twitter.com/thejameskyle"}],"frontMatter":{"layout":"post","title":"Function Bind Syntax","author":"James Kyle","authorURL":"https://twitter.com/thejameskyle","date":"2015-05-14T19:30:00.000Z","categories":"announcements","share_text":"New in Babel 5.4: Function Bind Syntax"},"prevItem":{"title":"React on ES6+","permalink":"/babel-website/blog/2015/07/07/react-on-es6-plus"},"nextItem":{"title":"5.0.0 Released","permalink":"/babel-website/blog/2015/03/31/5.0.0"}},"content":"Babel 5.4 was just released and with it comes support for a new\\n[experimental ES7 syntax](https://github.com/zenparsing/es-function-bind)\\nproposed by Kevin Smith ([@zenparsing](https://github.com/zenparsing)) and\\nimplemented in Babel by Ingvar Stepanyan\\n([@RReverser](https://github.com/RReverser)).\\n\\n\x3c!--truncate--\x3e\\n\\n> ***Warning: This syntax is highly experimental and you should not use\\n> it for anything serious (yet).*** If you do use this syntax, please\\n> provide feedback on [GitHub](https://github.com/zenparsing/es-function-bind).\\n\\nThe function bind syntax introduces a new operator `::` which performs function\\nbinding and method extraction.\\n\\n### Virtual Methods\\n\\nUsing an iterator library implemented as a module of \\"virtual methods\\":\\n\\n```js title=\\"JavaScript\\"\\n/* ES7 */\\nimport { map, takeWhile, forEach } from \\"iterlib\\";\\n\\ngetPlayers()\\n::map(x => x.character())\\n::takeWhile(x => x.strength > 100)\\n::forEach(x => console.log(x));\\n```\\n```js title=\\"JavaScript\\"\\n/* ES6 */\\nimport { map, takeWhile, forEach } from \\"iterlib\\";\\n\\nlet _val;\\n_val = getPlayers();\\n_val = map.call(_val, x => x.character());\\n_val = takeWhile.call(_val, x => x.strength > 100);\\n_val = forEach.call(_val, x => console.log(x));\\n```\\n\\n> **Note:** Babel\'s [output](/repl/#?experimental=true&evaluate=false&loose=false&spec=false&playground=false&code=import%20%7B%20map%2C%20takeWhile%2C%20forEach%20%7D%20from%20%22iterlib%22%3B%0A%0AgetPlayers()%0A%3A%3Amap(x%20%3D%3E%20x.character())%0A%3A%3AtakeWhile(x%20%3D%3E%20x.strength%20%3E%20100)%0A%3A%3AforEach(x%20%3D%3E%20console.log(x))%3B)\\n> looks different than this in order to be more concise.\\n\\nUsing a jquery-like library of virtual methods:\\n\\n```js title=\\"JavaScript\\"\\n/* ES7 */\\n// Create bindings for just the methods that we need\\nlet { find, html } = jake;\\n\\n// Find all the divs with class=\\"myClass\\", then get all of the\\n// \\"p\\"s and replace their content.\\ndocument.querySelectorAll(\\"div.myClass\\")::find(\\"p\\")::html(\\"hahaha\\");\\n```\\n```js title=\\"JavaScript\\"\\n/* ES6 */\\nlet _val;\\n_val = document.querySelectorAll(\\"div.myClass\\");\\n_val = find.call(_val, \\"p\\");\\n_val = html.call(_val, \\"hahaha\\");\\n```\\n\\n### Method Extraction\\n\\nUsing method extraction to print the eventual value of a promise to the console:\\n\\n```js title=\\"JavaScript\\"\\n/* ES7 */\\nPromise.resolve(123).then(::console.log);\\n```\\n```js title=\\"JavaScript\\"\\n/* ES6 */\\n// Which could be written in ES6 as:\\nPromise.resolve(123).then(console.log.bind(console));\\n```\\n\\nUsing method extraction to call an object method when a DOM event occurs:\\n\\n```js title=\\"JavaScript\\"\\n/* ES7 */\\n$(\\".some-link\\").on(\\"click\\", ::view.reset);\\n```\\n```js title=\\"JavaScript\\"\\n/* ES6 */\\n$(\\".some-link\\").on(\\"click\\", view.reset.bind(view));\\n```\\n\\n> **Note:** You can read more about this syntax in the\\n> [Function Bind Syntax proposal](https://github.com/zenparsing/es-function-bind).\\n\\n### Usage\\n\\nEnable by stage:\\n\\n```sh title=\\"Shell\\"\\n$ babel --stage 0\\n```\\n\\nEnable by transformer:\\n\\n```sh title=\\"Shell\\"\\n$ babel --optional es7.functionBind\\n```\\n\\n---\\n\\nThe function bind syntax will only make it into ES7 if there is enough interest.\\nIf you would like to see this syntax make it in, please give it a star on\\n[GitHub](https://github.com/zenparsing/es-function-bind) and provide any\\nfeedback you have on [GitHub issues](https://github.com/zenparsing/es-function-bind/issues).\\n\\nSpecial thanks to Ingvar Stepanyan ([@RReverser](https://github.com/RReverser))\\nfor the [implementation](https://github.com/babel/babel/pull/1518) in Babel.\\n\\n<p class=\\"text-right\\">\u2014 The Babel team</p>"},{"id":"/2015/03/31/5.0.0","metadata":{"permalink":"/babel-website/blog/2015/03/31/5.0.0","source":"@site/blog/2015-03-31-5.0.0.md","title":"5.0.0 Released","description":"In the past few months Babel has been welcomed into several major communities","date":"2015-03-31T10:00:00.000Z","formattedDate":"March 31, 2015","tags":[],"readingTime":8.005,"hasTruncateMarker":true,"authors":[{"name":"Sebastian McKenzie","url":"https://twitter.com/sebmck"}],"frontMatter":{"layout":"post","title":"5.0.0 Released","author":"Sebastian McKenzie","authorURL":"https://twitter.com/sebmck","date":"2015-03-31T10:00:00.000Z","categories":"announcements","share_text":"5.0.0 Released"},"prevItem":{"title":"Function Bind Syntax","permalink":"/babel-website/blog/2015/05/14/function-bind"},"nextItem":{"title":"Babel <3 React","permalink":"/babel-website/blog/2015/02/23/babel-loves-react"}},"content":"In the past few months Babel has been welcomed into several major communities\\nsuch as Node, React, Ember, Backbone, Angular, Rails, and many others. We\\nlaunched the [Users page](/users) only a few weeks ago and it\'s really cool to\\nsee everyone that is using it. Companies like CloudFlare, Netflix, Mozilla, and\\nYahoo!. Projects like Ghost, Atom, Mapbox, and so many more.\\n\\nWe\'ve seen tons of blog posts, talks, events, courses all about ES6+ using\\nBabel, and official Babel tools have been downloaded nearly 2 million times.\\n\\nToday we are making by far the largest release of Babel ever.\\n\\n\x3c!--truncate--\x3e\\n\\n**If you\'re upgrading from Babel 4.x please see the\\n[breaking changes](#breaking-changes)**.\\n\\nThis release includes the new ES7 proposals:\\n\\n- [Decorators](https://github.com/wycats/javascript-decorators)\\n- [Class properties](https://gist.github.com/jeffmo/054df782c05639da2adb)\\n- [Export extensions](https://github.com/leebyron/ecmascript-more-export-from)\\n\\nThe entire internal traversal and transformation pipeline has undergone a\\nrewrite that substantially increases flexibility and will allow many future\\npipeline performance optimisations.\\n\\nThis release also brings a plugin API, this allows consumers to plug in their\\nown custom transformers to utilise the powerful transformation mechanisms that\\nBabel has to offer.\\n\\nYou can view the complete CHANGELOG\\n[here](https://github.com/babel/babel/blob/main/.github/CHANGELOG-v5.md#500).\\n\\nAnd as usual **if you run into any regressions please report them immediately**.\\n\\n### TC39 Process\\n\\nIn this release you\'ll start to see us aligned with the\\n[TC39 process](https://docs.google.com/document/d/1QbEE0BsO4lvl7NFTn5WXWeiEIBfaVUF7Dk0hpPpPDzU).\\nThe TC39 is the technical committee from ECMA that writes the ECMAScript\\nstandard. Their process is categorised into 5 stages:\\n\\n- Stage 0 - Strawman\\n- Stage 1 - Proposal\\n- Stage 2 - Draft\\n- Stage 3 - Candidate\\n- Stage 4 - Finished\\n\\nProposals that are **stage 2 or above** are enabled in Babel by default. Now\\nthis does not mean that they\'re guaranteed to be included in future ECMAScript\\nspecifications or even Babel itself. Stage 2 is considered a good point for\\ninclusion by default in Babel due to their relative maturity and need for\\ncritical proposal feedback.\\n\\nNow let\'s dive into the changes we made to 5.0.\\n\\n---\\n\\n**Contents:**\\n\\n- [New Features](#new-features)\\n  - [New Proposals](#new-proposals)\\n    - [Stage 0: Class Properties](#stage-0:-class-properties)\\n    - [Stage 1: Decorators](#stage-1:-decorators)\\n    - [Stage 1: Export Extensions](#stage-1:-export-extensions)\\n  - [React Optimisations](#react-optimisations)\\n    - [Constant Elements](#constant-elements)\\n    - [Inline Elements](#inline-elements)\\n  - [.babelrc](#babelrc)\\n  - [Plugin API](#plugin-api)\\n- [Breaking Changes](#breaking-changes)\\n  - [Experimental Option](#experimental-option)\\n  - [Class Changes](#class-changes)\\n  - [Removed Features](#removed-features)\\n  - [imports are now hoisted](#imports-are-now-hoisted)\\n\\n<h1 id=\\"new-features\\" class=\\"babel-blog-section-title\\">New Features</h1>\\n\\n## New Proposals\\n\\n### Stage 0: Class Properties\\n\\n[Jeff Morrison\'s](https://github.com/jeffmo) stage 0\\n[class property initializers proposal](https://gist.github.com/jeffmo/054df782c05639da2adb)\\nfills the void of property composition on classes. These are analogous with the\\nclass properties example listed in the\\n[React 0.13 beta announcement](https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers).\\n\\n**Example:**\\n\\n```js title=\\"JavaScript\\"\\nclass Person {\\n  firstName = \\"Sebastian\\";\\n  static lastName = \\"McKenzie\\";\\n}\\n\\nassert(new Person().firstName, \\"Sebastian\\");\\nassert(Person.lastName, \\"McKenzie\\");\\n```\\n\\n**Usage:**\\n\\n```js title=\\"JavaScript\\"\\nrequire(\\"babel\\").transform(\\"code\\", {\\n  optional: [\\"es7.classProperties\\"]\\n});\\n// or\\nrequire(\\"babel\\").transform(\\"code\\", { stage: 0 });\\n```\\n\\n```sh title=\\"Shell\\"\\n$ babel --optional es7.classProperties script.js\\n# or\\n$ babel --stage 0 script.js\\n```\\n\\n### Stage 1: Decorators\\n\\n[Yehuda Katz\'](https://github.com/wycats) stage 1\\n[decorators proposal](https://github.com/wycats/javascript-decorators) allows\\nyou to elegantly compose property descriptors and metadata decoration. In the\\nfuture this will allow the powerful\\n[Ember Object Model](http://guides.emberjs.com/v1.10.0/object-model/classes-and-instances/)\\nto easily be represented with native classes.\\n\\n**Example:**\\n\\n```js title=\\"JavaScript\\"\\nfunction concat(...args) {\\n  let sep = args.pop();\\n\\n  return function(target, key, descriptor) {\\n    descriptor.initializer = function() {\\n      return args.map(arg => this[arg]).join(sep);\\n    }\\n  }\\n}\\n\\nfunction autobind(target, key, descriptor) {\\n  var fn = descriptor.value;\\n  delete descriptor.value;\\n  delete descriptor.writable;\\n  descriptor.get = function () {\\n    var bound = fn.bind(this);\\n    Object.defineProperty(this, key, {\\n      configurable: true,\\n      writable: true,\\n      value: bound\\n    });\\n    return bound;\\n  };\\n}\\n\\nclass Person {\\n  firstName = \\"Sebastian\\";\\n  lastName = \\"McKenzie\\";\\n\\n  @concat(\\"firstName\\", \\"lastName\\", \\" \\") fullName;\\n  @concat(\\"lastName\\", \\"firstName\\", \\", \\") formalName;\\n\\n  @autobind\\n  getFullName() {\\n    return `${this.firstName} ${this.lastName}`;\\n  }\\n}\\n\\nassert(new Person().fullName, \\"Sebastian McKenzie\\");\\nassert(new Person().formalName, \\"McKenzie, Sebastian\\");\\nassert(new Person().getFullName.call(null), \\"Sebastian McKenzie\\");\\n```\\n\\n**Usage:**\\n\\n```js title=\\"JavaScript\\"\\nrequire(\\"babel\\").transform(\\"code\\", {\\n  optional: [\\"es7.decorators\\"]\\n});\\n// or\\nrequire(\\"babel\\").transform(\\"code\\", { stage: 1 });\\n```\\n\\n```sh title=\\"Shell\\"\\n$ babel --optional es7.decorators script.js\\n# or\\n$ babel --stage 1 script.js\\n```\\n\\n### Stage 1: Export Extensions\\n\\n[Lee Byron\'s](https://github.com/leebyron) stage 1\\n[additional export-from statements proposal](https://github.com/leebyron/ecmascript-more-export-from)\\ncompletes the symmetry between import and export statement, allowing you to\\neasily export namespaces and defaults from external modules without\\nmodifying the local scope.\\n\\n**Exporting a default**\\n\\n```js title=\\"JavaScript\\"\\nexport foo from \\"bar\\";\\n```\\n\\nequivalent to:\\n\\n```js title=\\"JavaScript\\"\\nimport _foo from \\"bar\\";\\nexport { _foo as foo };\\n```\\n\\n**Exporting a namespace**\\n\\n```js title=\\"JavaScript\\"\\nexport * as ns from \\"mod\\";\\n```\\n\\nequivalent to:\\n\\n```js title=\\"JavaScript\\"\\nimport * as _ns from \\"mod\\";\\nexport { _ns as ns };\\n```\\n\\n**Usage:**\\n\\n```js title=\\"JavaScript\\"\\nrequire(\\"babel\\").transform(\\"code\\", {\\n  optional: [\\"es7.exportExtensions\\"]\\n});\\n// or\\nrequire(\\"babel\\").transform(\\"code\\", { stage: 1 });\\n```\\n\\n```sh title=\\"Shell\\"\\n$ babel --optional es7.exportExtensions script.js\\n# or\\n$ babel --stage 1 script.js\\n```\\n\\n## React Optimisations\\n\\nIn preparation for React 0.14, Babel supports some optimisation transformers for\\nJSX.\\n\\n### [Constant Elements](https://github.com/facebook/react/issues/3226)\\n\\nStarting with 0.14 ReactElements and their props objects can be treated as\\nvalue types. i.e. any instance is conceptually equivalent if all their values\\nare the same.\\n\\nTake this function for example:\\n\\n```js title=\\"JavaScript\\"\\nimport React from \\"react\\";\\n\\nfunction render() {\\n  return <div className=\\"foo\\" />;\\n}\\n```\\n\\nThis can be optimized by moving the JSX out of the function body so that each\\ntime it is called the same instance is returned:\\n\\n```js title=\\"JavaScript\\"\\nimport React from \\"react\\";\\n\\nvar _ref = <div className=\\"foo\\" />;\\n\\nfunction render() {\\n  return _ref;\\n}\\n```\\n\\nNot only does it allow us to reuse the same objects, React will automatically\\nbail out any reconciliation of constant components - without a manual\\n`shouldComponentUpdate`.\\n\\n**Usage:**\\n\\n```js title=\\"JavaScript\\"\\nrequire(\\"babel\\").transform(\\"code\\", {\\n  optional: [\\"optimisation.react.constantElements\\"]\\n});\\n```\\n\\n```sh title=\\"Shell\\"\\n$ babel --optional optimisation.react.constantElements script.js\\n```\\n\\n### [Inline Elements](https://github.com/facebook/react/issues/3228)\\n\\n<blockquote class=\\"alert alert--warning\\">\\n  <h4>Production only</h4>\\n  <p>\\n    Inline Elements should <strong>only</strong> be enabled in production as\\n    multiple React warning messages are suppressed which is extremely risky\\n    in development.\\n  </p>\\n</blockquote>\\n\\nStarting with React 0.14 ReactElements can be inlined:\\n\\n```js title=\\"JavaScript\\"\\n<div className=\\"foo\\">{bar}<Baz key=\\"baz\\" /></div>\\n```\\n\\nas objects:\\n\\n```js title=\\"JavaScript\\"\\n{ type: \'div\', props: { className: \'foo\', children:\\n  [ bar, { type: Baz, props: { }, key: \'baz\', ref: null } ]\\n}, key: null, ref: null }\\n```\\n\\nThis improves performance over the existing `React.createElement` call by\\ninlining the result of it.\\n\\n**Usage:**\\n\\n```js title=\\"JavaScript\\"\\nrequire(\\"babel\\").transform(\\"code\\", {\\n  optional: [\\"optimisation.react.inlineElements\\"]\\n});\\n```\\n\\n```sh title=\\"Shell\\"\\n$ babel --optional optimisation.react.inlineElements script.js\\n```\\n\\n## .babelrc\\n\\nBabel 5.0.0 has support for `.babelrc` out of the box across its **entire**\\nrange of integrations. This means that it will work across\\n[`babel/register`](/docs/babel-register),\\n[`babel-node`](/docs/babel-node) as well as across the entire range\\nof build system plugins and module loaders such as\\n[`babel-loader`](https://github.com/babel/babel-loader),\\n[`babelify`](https://github.com/babel/babelify), and others.\\n\\n`.babelrc` is equivalent to JSHint\'s [`.jshintrc`](http://jshint.com/docs/) and\\nJSCS\' [`.jscsrc`](http://jscs.info/overview.html).\\n\\n```json title=\\"JSON\\"\\n{\\n  \\"stage\\": 1,\\n  \\"ignore\\": [\\n    \\"foo.js\\",\\n    \\"bar/**/*.js\\"\\n  ]\\n}\\n```\\n\\nSee the [docs](/docs/options) for more info.\\n\\n## Plugin API\\n\\n5.0.0 also introduces the long anticipated plugin API. This allows you to hook\\ninto the powerful traversal and transformation internals of Babel. See the\\n[docs](/docs/plugins) for more info.\\n\\n<h1 id=\\"breaking-changes\\" class=\\"babel-blog-section-title\\">Breaking Changes</h1>\\n\\n### Experimental Option\\n\\nThe `experimental` option has been **removed**. Fear not though, there is a\\nreplacement. Babel now categories the ES7 transformers by\\n[TC39 stages](#tc39-changes).\\n\\ntl;dr If you\'re using the `experimental` option, simply change it to\\n`$ babel --stage 0` or `{ stage: 0 }`.\\n\\n> **Reminder:** Proposals that are **stage 2 or above** are enabled by default.\\n\\n**Stage 0**\\n\\n- `es7.classProperties`\\n- `es7.comprehensions`\\n\\n**Stage 1**\\n\\n- `es7.asyncFunctions`\\n- `es7.decorators`\\n- `es7.exportExtensions`\\n- `es7.objectRestSpread`\\n\\n**Stage 2** (Stage 2 and above are enabled by default)\\n\\n- `es7.exponentiationOperator`\\n\\nFor a list of all current ES7 proposals please see the\\n[tc39/ecma262 repo](https://github.com/tc39/ecma262).\\n\\n### `returnUsedHelpers` option\\n\\nThe `returnUsedHelpers` option has been renamed to `metadataUsedHelpers` and the returning result\\nobject has been changed from `usedHelpers` to `metadata.usedHelpers`.\\n\\n### Class Changes\\n\\n5.0.0 introduces some updated derived class semantics that are long overdue.\\n\\n`super()` **must** be called in a derived class constructor.\\n\\n```js title=\\"JavaScript\\"\\nclass Foo extends Bar {\\n  constructor() {\\n    // no `super();`\\n  }\\n}\\n```\\n\\nAccess to `this` before `super()` in a derived class constructor is **not**\\nallowed.\\n\\n```js title=\\"JavaScript\\"\\nclass Foo extends Bar {\\n  constructor() {\\n    this.foo; // `this` access before `super();`\\n    super();\\n  }\\n}\\n```\\n\\n`super()` is **only** allowed in derived class constructors.\\n\\n```js title=\\"JavaScript\\"\\nclass Foo {\\n  constructor() {\\n    super(); // not in a derived constructor\\n  }\\n}\\n```\\n\\n## Removed Features\\n\\n- The playground has been removed so development can be focussed on mainstream\\nES features and proposals. This also reduces the risk of syntactic conflicts\\npreventing certain official features from being implemented.\\n- [Abstract references](https://github.com/zenparsing/es-abstract-refs) have\\nbeen removed as the proposal has been superseded. Support for one or more of the\\nsuperseding proposals may be implemented in the future.\\n\\n---\\n\\nIn closing, we hope that you are now as excited about this release as we are.\\nThere\'s a lot that went into it, and we believe this will set us up for a long\\ntime into the future.\\n\\n<p class=\\"text-right\\">\u2014 The Babel team</p>\\n\\n## Imports are now hoisted\\n\\nIn `4.x`, imports were inlined as where they appeared in the code. Which means that this code:\\n\\n```\\nglobal.test = \'test\'\\nimport \'./test\'\\n```\\n\\nwould compile to:\\n\\n```\\n\'use strict\';\\n\\nglobal.test = \'test\';\\nrequire(\'./test\');\\n```\\n\\nHowever, from `5.x` on, this behaviour has been changed in order to comply with the ES6 spec and *[imports will](https://gitter.im/babel/babel?at=5525474d80f7bb0315a369ce) [now be hoisted](https://stackoverflow.com/questions/29329662/are-es6-module-imports-hoisted)*. What this means in practical code is that the snippet above will get converted to something like:\\n\\n\\n```\\n\'use strict\';\\n\\nrequire(\'./test\');\\nglobal.test = \'test\';\\n```\\n\\nIf your code required certain bits and pieces to be executed in between a specific module being imported -which might be the case while testing code and you need to fake some `window` properties :)- you may want to extract that away into its own file and import it before the code that needs it."},{"id":"/2015/02/23/babel-loves-react","metadata":{"permalink":"/babel-website/blog/2015/02/23/babel-loves-react","source":"@site/blog/2015-02-23-babel-loves-react.md","title":"Babel <3 React","description":"One of the things that surprises people quite often is that Babel supports JSX","date":"2015-02-23T10:00:00.000Z","formattedDate":"February 23, 2015","tags":[],"readingTime":1.145,"hasTruncateMarker":true,"authors":[{"name":"James Kyle","url":"https://twitter.com/thejameskyle"}],"frontMatter":{"layout":"post","title":"Babel <3 React","author":"James Kyle","authorURL":"https://twitter.com/thejameskyle","date":"2015-02-23T10:00:00.000Z","categories":"announcements","share_text":"Babel <3 React"},"prevItem":{"title":"5.0.0 Released","permalink":"/babel-website/blog/2015/03/31/5.0.0"},"nextItem":{"title":"Not Born to Die","permalink":"/babel-website/blog/2015/02/15/not-born-to-die"}},"content":"One of the things that surprises people quite often is that Babel supports JSX\\nout of the box.\\n\\n\x3c!--truncate--\x3e\\n\\nLet me show you just how easy it is to switch:\\n\\n> **Note:** There are _tons_ of ways to use Babel, I\'ll only list a few of them\\n> here. If you\'d like to see a more complete list check out our\\n> [Using Babel](/setup) page.\\n\\n**In the Browser** ([docs](/setup#browser/))\\n\\nBefore:\\n\\n```html\\n<script type=\'text/jsx\'><\/script>\\n```\\n\\nAfter:\\n\\n```html\\n<script type=\'text/babel\'><\/script>\\n```\\n\\n**In Browserify** ([docs](/setup#browserify))\\n\\nBefore:\\n\\n```sh title=\\"Shell\\"\\n$ browserify -t reactify main.js\\n```\\n\\nAfter:\\n\\n```sh title=\\"Shell\\"\\n$ browserify -t babelify main.js\\n```\\n\\n**In Node** ([docs](/setup#require/))\\n\\nBefore:\\n\\n```js title=\\"JavaScript\\"\\nrequire(\'node-jsx\').install();\\n```\\n\\nAfter:\\n\\n```js title=\\"JavaScript\\"\\nrequire(\'babel/register\');\\n````\\n\\n**In Webpack** ([docs](/setup#webpack))\\n\\nBefore:\\n\\n```js title=\\"JavaScript\\"\\nloaders: [\\n  { test: /\\\\.js$/, exclude: /node_modules/, loader: \'jsx-loader\'}\\n]\\n```\\n\\nAfter:\\n\\n```js title=\\"JavaScript\\"\\nloaders: [\\n  { test: /\\\\.js$/, exclude: /node_modules/, loader: \'babel-loader\'}\\n]\\n```\\n\\n**In Gulp** ([docs](/setup#gulp))\\n\\nBefore:\\n\\n```js title=\\"JavaScript\\"\\ngulp.src(\'views/**/*.js\')\\n\xa0\xa0\xa0\xa0.pipe(jsx())\\n\xa0\xa0\xa0\xa0.pipe(gulp.dest(\'dist\'));\\n```\\n\\nAfter:\\n\\n```js title=\\"JavaScript\\"\\ngulp.src(\'views/**/*.js\')\\n    .pipe(babel())\\n    .pipe(gulp.dest(\'dist\'));\\n```\\n\\n---\\n\\nThe list goes on, but you probably get how simple it is by now. If you didn\'t\\nsee the tool you are looking for don\'t worry we have a full list of them on our\\n[Using Babel](/setup) page.\\n\\nIf you need more help getting setup be sure to read our [JSX](/setup#jsx/)\\ndocs or come ask other Babel users in our\\n[support chat](https://gitter.im/babel/babel).\\n\\n<p class=\\"text-right\\">\u2014 The Babel team</p>"},{"id":"/2015/02/15/not-born-to-die","metadata":{"permalink":"/babel-website/blog/2015/02/15/not-born-to-die","source":"@site/blog/2015-02-15-not-born-to-die.md","title":"Not Born to Die","description":"I like to start off our blog posts with the latest big thing 6to5 has achieved. We haven\u2019t reached it quite yet, but in a few days 6to5 and 6to5-core will have been downloaded half a million times, and in a month or so it will be over a million times.","date":"2015-02-15T09:18:00.000Z","formattedDate":"February 15, 2015","tags":[],"readingTime":2.01,"hasTruncateMarker":true,"authors":[{"name":"James Kyle","url":"https://twitter.com/thejameskyle"}],"frontMatter":{"layout":"post","title":"Not Born to Die","author":"James Kyle","authorURL":"https://twitter.com/thejameskyle","date":"2015-02-15T09:18:00.000Z","categories":"announcements","share_text":"Not Born to Die: 6to5 has been renamed to Babel"},"prevItem":{"title":"Babel <3 React","permalink":"/babel-website/blog/2015/02/23/babel-loves-react"},"nextItem":{"title":"2to3","permalink":"/babel-website/blog/2015/01/27/2to3"}},"content":"I like to start off our blog posts with the latest big thing 6to5 has achieved. We haven\u2019t reached it quite yet, but in a few days 6to5 and 6to5-core will have been downloaded **half a million times**, and in a month or so it will be over a **million** times.\\n\\nThere has been a bit of confusion in the past as to 6to5\u2019s role in the JavaScript community, which can largely be attributed to its name.\\n\\n6to5 was not born to die.\\n\\n\x3c!--truncate--\x3e\\n\\nEven when the next edition of JavaScript is supported across all environments, the work that has gone into 6to5 will continue to serve an important role in the community.\\n\\nFrom minifiers to beautifiers, from linters to code coverage instrumentors, compile-to-javascript languages and syntax extensions, code highlighters and on and on. There are two things that almost any tooling of any programming language depends on really heavily: parsers and transpilers.\\n\\nThe history of these tools in JavaScript has been long and sad. Everyone is constantly reimplementing the same things and it\u2019s created an absolute mess. It\u2019s also the number one reason new language features take a long time to roll out (i.e. \u201cI love using Arrow Functions, but it breaks our code coverage\u201d).\\n\\nLuckily a lot of work is happening to improve this.\\n\\nRecently a number of people from Mozilla, Esprima, The jQuery Foundation, Acorn, 6to5, ESLint, and others have come together to create [ESTree](https://github.com/estree/estree), a standard upon which all parser and transpiler tooling will be based on.\\n\\nWe want for 6to5 to solve the transpiler story. If the community could rally around a tool that provides a solid foundation for dealing with a lot of shared issues then we\u2019ll all be much better off.\\n\\nThat might sound a bit absurd and like a fairly lofty goal. Many will think it\u2019s _out of scope_ for something named \u201c6to5\u201d.\\n\\nI guess it\u2019d be a good idea to rename the project then!\\n\\n6to5 is now Babel.\\n\\nBabel will continue to serve as a JavaScript transpiler for using the very latest standards, but will also begin to open up its API for other tools. Anyone who has worked on the project internally knows that Babel is incredibly easy to work with.\\n\\nWe\u2019re incredibly excited for the future and we hope that we can make an even bigger impact on the JavaScript community.\\n\\nAlways bet on JavaScript.\\n\\n<p class=\\"text-right\\">\u2014 The recently Babel team</p>"},{"id":"/2015/01/27/2to3","metadata":{"permalink":"/babel-website/blog/2015/01/27/2to3","source":"@site/blog/2015-01-27-2to3.md","title":"2to3","description":"These past few weeks we\u2019ve seen lots of activity on 6to5; thousands are downloading it every day from all corners of the world.\xa0In the past month, over 200 issues have been closed. Since the 2.0 release, there have been 867 commits and 60 minor and patch releases. It\u2019s now among the top 1% of most downloaded packages on npm, with nearly 100k downloads in the last month alone.","date":"2015-01-27T11:40:00.000Z","formattedDate":"January 27, 2015","tags":[],"readingTime":2.675,"hasTruncateMarker":true,"authors":[{"name":"James Kyle","url":"https://twitter.com/thejameskyle"}],"frontMatter":{"layout":"post","title":"2to3","author":"James Kyle","authorURL":"https://twitter.com/thejameskyle","date":"2015-01-27T11:40:00.000Z","categories":"announcements","share_text":"6to5: 2to3"},"prevItem":{"title":"Not Born to Die","permalink":"/babel-website/blog/2015/02/15/not-born-to-die"},"nextItem":{"title":"6to5 + esnext","permalink":"/babel-website/blog/2015/01/12/6to5-esnext"}},"content":"These past few weeks we\u2019ve seen lots of activity on 6to5; thousands are downloading it every day from all corners of the world.\xa0In the past month, over 200 issues have been closed. Since the 2.0 release, there have been 867 commits and 60 minor and patch releases. It\u2019s now among the top 1% of most downloaded packages on npm, with nearly 100k downloads in the last month alone.\\n\\nToday we are releasing 3.0.\\n\\n\x3c!--truncate--\x3e\\n\\n> **Note:** 6to5 doesn\'t hold onto bug fixes or new backwards compatible features for major releases. Some of the features listed are from later 2.x releases.\\n\\n### Loose Mode\\n\\n6to5 is very focused on spec-compliancy in everything that it does. Sometimes the spec requires a lot of complexity around edgecases that don\'t affect most code.\\n\\nWe\u2019ve added Loose Mode for ignoring some of these edgecases in order to create cleaner, smaller, and faster executing output.\\n\\nFor example, calling `super()` inside a constructor would normally be compiled to:\\n\\n```js title=\\"JavaScript\\"\\nfunction Foo() {\\n  _get(Object.getPrototypeOf(Foo.prototype), \\"constructor\\", this).call(this);\\n}\\n```\\n\\nHowever, with Loose Mode it is compiled to:\\n\\n```js title=\\"JavaScript\\"\\nfunction Foo() {\\n  Bar.call(this);\\n}\\n```\\n\\nBefore you use Loose Mode, you should be aware that it doesn\'t line up with the spec completely, it may lead to incompatible code if you aren\'t aware of these inconsistencies. Check out the [docs](https://hzoo.github.io/babel.github.io/docs/usage/loose/) for more info.\\n\\n### Performance Improvements\\n\\nIn the past few weeks [@gaearon](https://github.com/gaearon) has done some amazing work to improve 6to5 compilation time by over 200%. These kinds of improvements are extremely important to us and we\u2019re happy to see such great contributions from community members.\\n\\n### Playground: Mallet Operator\\n\\nAs seen in Ruby and CoffeeScript, the Mallet operator allows you to conditionally assign values based on their falsy-ness.\\n\\n```js title=\\"JavaScript\\"\\na ||= b\\n```\\n\\nwill behave like\\n\\n```js title=\\"JavaScript\\"\\nif (!a) a = b;\\n```\\n\\nThis one comes to you from [@jridgewell](https://github.com/jridgewell). We encourage proposal authors to come forward in order to get their ideas implemented alongside all of the latest language and API features.\\n\\n### selfContained\\n\\nWe\u2019ve also introduced a new optional transformer that negates the need for a polyfill and bypasses all 6to5 [caveats](https://hzoo.github.io/babel.github.io/docs/usage/caveats/). It will automatically alias ES6 static methods and built-ins as well as include `regenerator` whenever you use async functions or generators. This is great for libraries that don\'t want to pollute the global scope.\\n\\nThis replaces the `coreAliasing` transform and the `includeRegenerator` option. Check out the [docs](https://hzoo.github.io/babel.github.io/docs/usage/transformers#selfContained) for more info.\\n\\n### Namespaced Transformers\\n\\nIn 3.0, we\u2019ve renamed all of the transformers, not just for consistency but in order to namespace them.\\n\\nFor example, we\u2019ve renamed all of the es7 transformers to be things like `es7.comprehensions` or `es7.objectSpread` so if you would like to blacklist all of the es7 transformers you can simply:\\n\\n```sh title=\\"Shell\\"\\n$ 6to5 --blacklist es7\\n```\\n\\nFor a full list of the renamed transformers see the [Changelog](https://github.com/6to5/6to5/blob/master/CHANGELOG.md#300).\\n\\n---\\n\\nThere are many new features and bug fixes that makes v3 an excellent release. Be sure to review them all in the [Changelog](https://github.com/6to5/6to5/blob/master/CHANGELOG.md#300).\\n\\nWe\u2019d like to thank everyone who has been involved in the 6to5 community and especially those who have contributed to making 3.0 happen.\\n\\nThe future is looking bright.\\n\\n<p class=\\"text-right\\">\u2014 The 6to5 team</p>"},{"id":"/2015/01/12/6to5-esnext","metadata":{"permalink":"/babel-website/blog/2015/01/12/6to5-esnext","source":"@site/blog/2015-01-12-6to5-esnext.md","title":"6to5 + esnext","description":"The past few months have been exciting for 6to5. We\u2019ve gone from being an educational project to having 100k downloads on npm, there\u2019s been 1,800 commits and 155 releases, we now support every major JavaScript build system, and recently we became a Sprockets 4.0 default. To top it off, our new website and documentation received tens of thousands of pageviews, and has been featured by several publications including JavaScript Weekly.","date":"2015-01-12T10:40:00.000Z","formattedDate":"January 12, 2015","tags":[],"readingTime":2.32,"hasTruncateMarker":true,"authors":[{"name":"James Kyle","url":"https://twitter.com/thejameskyle"}],"frontMatter":{"layout":"post","title":"6to5 + esnext","author":"James Kyle","authorURL":"https://twitter.com/thejameskyle","date":"2015-01-12T10:40:00.000Z","categories":"announcements","share_text":"6to5 + esnext: Joining Forces"},"prevItem":{"title":"2to3","permalink":"/babel-website/blog/2015/01/27/2to3"}},"content":"The past few months have been exciting for 6to5. We\u2019ve gone from being an educational project to having 100k downloads on npm, there\u2019s been 1,800 commits and 155 releases, we now support every major JavaScript build system, and recently we became a Sprockets 4.0 default. To top it off, our new website and documentation received tens of thousands of pageviews, and has been featured by several publications including JavaScript Weekly.\\n\\n\x3c!--truncate--\x3e\\n\\n<img class=\\"img-responsive\\" alt=\\"npm downloads of 6to5, traceur, and esnext\\" src=\\"/assets/2015-01-12-6to5-esnext/chart-1.png\\" />\\n\\n<p class=\\"text-center small text-muted\\">(Source: npm, includes 5-day moving point average)</p>\\n\\nAnd we\u2019re just getting started...\\n\\n6to5\u2019s mission is to take future versions of JavaScript and compile them into spec compliant, performant, and readable JavaScript files you can run today. With built-in support for JSX and Flow Types, 6to5 provides a lot more than other transpilers.\\n\\nOur top priority is eliminating any barriers to ES6+ adoption, and while 6to5 may be the most feature-ready ES6 transpiler out there right now, there are other great projects attempting to do the same. Traceur Compiler is the most common alternative to our compiler, but it\u2019s also the most different since it relies heavily on a runtime. Other alternatives with similar approach to 6to5 include: es6-transpiler, es6now, jstransform, and esnext.\\n\\nesnext is the closest 6to5 in it\u2019s aim. With a focus on creating a smarter transpiler that can create higher quality ES5-compatible output, both projects are easy to get started with, and both care deeply about creating the best tool for developers.\\n\\nA few weeks back, Stefan Penner reached out to us hoping that, because we share the same mission, we might be able to unite our efforts. Excited by the idea, we quickly scheduled a meeting to discuss what that might mean.\\n\\nThe meeting went well:\\n\\n<blockquote class=\\"twitter-tweet center-block\\" lang=\\"en\\"><p><a href=\\"https://twitter.com/hashtag/6to5?src=hash\\">#6to5</a> + <a href=\\"https://twitter.com/hashtag/esnext?src=hash\\">#esnext</a> I&#39;m looking forward to our future together! Thanks guys <a href=\\"https://twitter.com/sebmck\\">@sebmck</a> <a href=\\"https://twitter.com/stefanpenner\\">@stefanpenner</a> <a href=\\"https://twitter.com/eventualbuddha\\">@eventualbuddha</a> <a href=\\"https://twitter.com/Rich_Harris\\">@Rich_Harris</a></p>&mdash; James Kyle (@thejameskyle) <a href=\\"https://twitter.com/thejameskyle/status/551474226708766720\\">January 3, 2015</a></blockquote>\\n<script async src=\\"//platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>\\n\\nWe\u2019ve decided that because of our shared goals and philosophy it makes sense to merge the two projects in an effort to build a better transpiler.\\n\\nSo what will this mean for both projects?\\n\\nThe esnext team will start work on 6to5 bringing their skillset and experience to make it faster and more spec-compliant. On our end, we will be migrating people from esnext to 6to5\u2014we\u2019ve already ported all of the esnext tests to 6to5 to ensure nothing will break.\\n\\n> Ember CLI users (currently using esnext) can expect 6to5 to become installed by default replacing esnext.\\n\\nYou can expect continued work on 6to5; we\u2019re always finding ways to grow and refine. We hope others will join our efforts so our energy can be spent improving rather the competing.\\n\\n<p class=\\"text-right\\">\u2014 The 6to5 team</p>"}]}')}}]);