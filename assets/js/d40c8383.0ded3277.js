"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["6825"],{55731:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var s=n(58205),r=n(85893),o=n(50065);let a={layout:"post",title:"7.17.0 Released: RegExp 'v' mode and ... \uD83E\uDD41 decorators!",authors:"team",date:new Date("2022-02-02T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.17.0 Released"},i=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Highlights",id:"highlights",level:2},{value:"Decorators (#14004, #13681)",id:"decorators-14004-13681",level:3},{value:"RegExp set notation and properties of strings (#14125)",id:"regexp-set-notation-and-properties-of-strings-14125",level:3},{value:"<code>@@</code> and <code>^^</code> topic tokens for Hack-style pipes (#13973)",id:"-and--topic-tokens-for-hack-style-pipes-13973",level:3},{value:"Experimental <code>@babel/register</code> rewrite (#13782)",id:"experimental-babelregister-rewrite-13782",level:3}];function p(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"We just published Babel 7.17.0!"}),"\n",(0,r.jsxs)(t.p,{children:["After years of ",(0,r.jsx)(t.a,{href:"https://babeljs.io/blog/2018/09/17/decorators",children:"iterations"}),", rewrites and adjustments it looks like the ",(0,r.jsx)(t.a,{href:"https://github.com/tc39/proposal-decorators",children:"decorators proposal"})," has finally stabilized again on a new design! This release includes both parse and transform support for the new proposal."]}),"\n",(0,r.jsxs)(t.p,{children:["We also implemented the ",(0,r.jsxs)(t.a,{href:"https://github.com/tc39/proposal-regexp-set-notation",children:["RegExp ",(0,r.jsx)(t.code,{children:"v"})," flag proposal"]})," and added parsing support for ",(0,r.jsx)(t.a,{href:"https://github.com/tc39/proposal-destructuring-private",children:"destructuring private fields"}),", both currently Stage 2. Lastly, a new experimental implementation of ",(0,r.jsx)(t.code,{children:"@babel/register"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["You can read the whole changelog ",(0,r.jsx)(t.a,{href:"https://github.com/babel/babel/releases/tag/v7.17.0",children:"on GitHub"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on our ",(0,r.jsx)(t.a,{href:"https://opencollective.com/babel#category-CONTRIBUTE",children:"Open Collective"})," or ",(0,r.jsx)(t.a,{href:"https://github.com/babel/babel?sponsor=1",children:"GitHub Sponsors"})," and, better yet, work with us on the implementation of ",(0,r.jsx)(t.a,{href:"https://github.com/babel/proposals",children:"new ECMAScript proposals"})," directly! As a volunteer-driven project, we rely on the community's support to fund our efforts in supporting the wide range of JavaScript users. Reach out at ",(0,r.jsx)(t.a,{href:"mailto:team@babeljs.io",children:"team@babeljs.io"})," if you'd like to discuss more!"]}),"\n",(0,r.jsx)(t.h2,{id:"highlights",children:"Highlights"}),"\n",(0,r.jsxs)(t.h3,{id:"decorators-14004-13681",children:["Decorators (",(0,r.jsx)(t.a,{href:"https://github.com/babel/babel/pull/14004",children:"#14004"}),", ",(0,r.jsx)(t.a,{href:"https://github.com/babel/babel/pull/13681",children:"#13681"}),")"]}),"\n",(0,r.jsxs)(t.p,{children:["After receiving feedback from JavaScript developers, engine developers and language experts, ",(0,r.jsx)(t.a,{href:"https://github.com/tc39/proposal-decorators/",children:"the decorators proposal"})," was rewritten to take into account multiple constraints and desires. We collaborated with the current proposal author, ",(0,r.jsx)(t.a,{href:"https://www.pzuraq.com/",children:"@pzuraq"})," to implement the new Stage 2 proposal in Babel."]}),"\n",(0,r.jsx)(t.p,{children:'The new implementation also supports decorating private class elements, as well as the new "class auto accessors" syntax:'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'@defineElement("button")\nclass Button {\n  @reactive accessor enabled = true; // class auto accessors\n\n  @event("onClick") #handleClick() { // decorator on a private method\n    console.log("clicked!");\n  }\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["You can enable the new proposal by passing the ",(0,r.jsx)(t.code,{children:'"version": "2021-12"'})," option to ",(0,r.jsx)(t.a,{href:"https://babeljs.io/docs/en/babel-plugin-proposal-decorators",children:(0,r.jsx)(t.code,{children:"@babel/plugin-proposal-decorators"})}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",metastring:'title="babel.config.json"',children:'{\n  "plugins": [\n    ["@babel/plugin-proposal-decorators", {\n        "version": "2021-12"\n    }]\n  ]\n}\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"caution",children:(0,r.jsxs)(t.p,{children:["While the new decorators syntax is compatible with the previous proposal, the semantics are different: decorators already written for Babel ",(0,r.jsx)(t.em,{children:'"legacy"'}),", Babel ",(0,r.jsx)(t.em,{children:"older-but-not-legacy"}),", or TypeScript will not work with the new proposal."]})}),"\n",(0,r.jsxs)(t.p,{children:["If you want to help move the proposal forward, you can try using it and leave feedback in ",(0,r.jsx)(t.a,{href:"https://github.com/tc39/proposal-decorators/issues",children:"their GitHub repository"}),"."]}),"\n",(0,r.jsxs)(t.h3,{id:"regexp-set-notation-and-properties-of-strings-14125",children:["RegExp set notation and properties of strings (",(0,r.jsx)(t.a,{href:"https://github.com/babel/babel/pull/14125",children:"#14125"}),")"]}),"\n",(0,r.jsxs)(t.p,{children:["Babel now supports the ",(0,r.jsx)(t.a,{href:"https://github.com/tc39/proposal-regexp-set-notation/",children:"RegExp set notation and properties of strings"})," proposal, which introduces three new regular expression features behind a new ",(0,r.jsx)(t.code,{children:"v"})," flag:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Extended set notation, which allows computing difference, intersection and union of characters or strings sets","\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"/[\\p{Decimal_Number}--[0-9]]/v; // Non-ASCII decimal digits\n/[\\p{ASCII}&&\\p{Letter}]/v; // ASCII letters\n/[[\\p{ASCII}&&\\p{Letter}]\\p{Number}]/v; // ASCII letters, or any digit\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["Properties of strings, which allow using ",(0,r.jsx)(t.code,{children:"\\p"})," escapes with multi-codepoint properties","\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'"Did you see the \uD83D\uDC69\uD83C\uDFFF\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC69\uD83C\uDFFE emoji?".match(/\\p{RGI_Emoji}/v). // ["\uD83D\uDC69\uD83C\uDFFF\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC69\uD83C\uDFFE"]\n'})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["Multi-codepoint strings in sets, using a new ",(0,r.jsx)(t.code,{children:"\\q"})," escape","\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"/[\\r\\n\\q{\\r\\n|NEWLINE}]/v; // Matches \\r, \\n, \\r\\n or NEWLINE\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["You can enable this proposal using the ",(0,r.jsx)(t.a,{href:"https://babeljs.io/docs/en/babel-plugin-proposal-unicode-sets-regex",children:(0,r.jsx)(t.code,{children:"@babel/plugin-proposal-unicode-sets-regex"})})," plugin:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",metastring:'title="babel.config.json"',children:'{\n  "plugins": ["@babel/plugin-proposal-unicode-sets-regex"]\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Babel relies on different third-party packages to transform regular expressions: we are grateful to the maintainers of ",(0,r.jsx)(t.a,{href:"https://github.com/jviereck/regjsparser/",children:"regjsparser"}),", ",(0,r.jsx)(t.a,{href:"https://github.com/bnjmnt4n/regjsgen",children:"regjsgen"})," and ",(0,r.jsx)(t.a,{href:"https://github.com/mathiasbynens/regexpu-core/",children:"regexpu-core"})," who took time to review our pull requests!"]}),"\n",(0,r.jsxs)(t.h3,{id:"-and--topic-tokens-for-hack-style-pipes-13973",children:[(0,r.jsx)(t.code,{children:"@@"})," and ",(0,r.jsx)(t.code,{children:"^^"})," topic tokens for Hack-style pipes (",(0,r.jsx)(t.a,{href:"https://github.com/babel/babel/pull/13973",children:"#13973"}),")"]}),"\n",(0,r.jsxs)(t.p,{children:["We are continuing to help the proposal authors evaluate different tokens for the ",(0,r.jsx)(t.a,{href:"https://github.com/tc39/proposal-pipeline-operator",children:"pipeline operator"})," proposal: one of the champions, ",(0,r.jsx)(t.a,{href:"https://jschoi.org/",children:"J. S. Choi"}),", added support for two new tokens that you can try with the ",(0,r.jsx)(t.code,{children:"topicToken"})," option:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",metastring:'title="babel.config.json"',children:'{\n  "plugins": [\n    ["@babel/plugin-proposal-pipeline-operator", {\n      "proposal": "hack",\n      "topicToken": "^^" // or "@@"\n    }]\n  ]\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["You can read more about the supported variations in the ",(0,r.jsx)(t.a,{href:"https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator",children:(0,r.jsx)(t.code,{children:"@babel/plugin-proposal-pipeline-operator"})})," docs."]}),"\n",(0,r.jsxs)(t.h3,{id:"experimental-babelregister-rewrite-13782",children:["Experimental ",(0,r.jsx)(t.code,{children:"@babel/register"})," rewrite (",(0,r.jsx)(t.a,{href:"https://github.com/babel/babel/pull/13782",children:"#13782"}),")"]}),"\n",(0,r.jsx)(t.p,{children:"We plan to release Babel 8 as an ESM package. However, this poses a big problem: how to load and run it synchronously in CommonJS packages?"}),"\n",(0,r.jsxs)(t.p,{children:["Usually most Babel consumers can run Babel asynchronously, or at least ",(0,r.jsx)(t.em,{children:"load"})," it asynchronously. This isn't true for ",(0,r.jsx)(t.a,{href:"https://www.npmjs.com/package/@babel/eslint-parser",children:(0,r.jsx)(t.code,{children:"@babel/eslint-parser"})})," (which integrates Babel's parser with ESLint) and ",(0,r.jsx)(t.a,{href:"https://babeljs.io/docs/en/babel-register",children:(0,r.jsx)(t.code,{children:"@babel/register"})})," (which can be used to transpile Node.js files on-the-fly), where we need to move parsing and transforming to a separate worker."]}),"\n",(0,r.jsxs)(t.p,{children:["Babel 7.16.0 exposes the new experimental ",(0,r.jsx)(t.code,{children:"@babel/register"})," implementation at ",(0,r.jsx)(t.code,{children:"@babel/register/experimental-worker"}),": it internally runs Babel asynchronously, so it's compatible with ",(0,r.jsxs)(t.a,{href:"https://babeljs.io/docs/en/config-files#configuration-file-types",children:[(0,r.jsx)(t.code,{children:".mjs"})," configuration files"]})," and with ",(0,r.jsx)(t.code,{children:".mjs"})," Babel plugins. It will be enabled by default in Babel 8, and you can already use it as a replacement for ",(0,r.jsx)(t.code,{children:"@babel/register"})," with a few caveats:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["If you programmatically specify ",(0,r.jsx)(t.code,{children:"@babel/register"})," options (using ",(0,r.jsx)(t.code,{children:'require("@babel/register")({ /* ... options */ })'}),"), you must make sure that they are serializable. This means that you cannot pass plugin functions defined inline, but you must move them to a separate ",(0,r.jsx)(t.code,{children:"./my-plugin.js"})," file or to a ",(0,r.jsx)(t.code,{children:"babel.config.js"})," file."]}),"\n",(0,r.jsxs)(t.li,{children:["The new implementation is still experimental: it ",(0,r.jsx)(t.em,{children:"should"})," have the same features as the existing one, but there are a few ",(0,r.jsx)(t.a,{href:"https://github.com/babel/babel/pull/14025#issuecomment-1003547657",children:"improvements"})," that we are exploring."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["We already released the new experimental ",(0,r.jsx)(t.code,{children:"@babel/eslint-parser"})," implementation in ",(0,r.jsx)(t.a,{href:"https://babeljs.io/blog/2021/07/26/7.15.0#preparing-babeleslint-parser-for-babel-8-13398httpsgithubcombabelbabelpull13398",children:"Babel 7.15.0"}),", exposed at ",(0,r.jsx)(t.code,{children:"@babel/eslint-parser/experimental-worker"}),"."]})]})}function h(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return i},a:function(){return a}});var s=n(67294);let r={},o=s.createContext(r);function a(e){let t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}},58205:function(e){e.exports=JSON.parse('{"permalink":"/blog/2022/02/02/7.17.0","source":"@site/blog/2022-02-02-7.17.0.md","title":"7.17.0 Released: RegExp \'v\' mode and ... \uD83E\uDD41 decorators!","description":"We just published Babel 7.17.0!","date":"2022-02-02T00:00:00.000Z","tags":[],"readingTime":3.895,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs","email":"team@babeljs.io","key":"team","page":null}],"frontMatter":{"layout":"post","title":"7.17.0 Released: RegExp \'v\' mode and ... \uD83E\uDD41 decorators!","authors":"team","date":"2022-02-02T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.17.0 Released"},"unlisted":false,"prevItem":{"title":"7.18.0 Released: Destructuring private elements and TypeScript 4.7","permalink":"/blog/2022/05/19/7.18.0"},"nextItem":{"title":"7.16.0 Released: ESLint 8 and TypeScript 4.5","permalink":"/blog/2021/10/29/7.16.0"}}')}}]);