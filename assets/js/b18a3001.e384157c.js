"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["53384"],{79711:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return r},default:function(){return h},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var s=n(36765),o=n(24246),l=n(80980);let i={layout:"post",title:"7.13.0 Released: Records and Tuples, granular compiler assumptions, and top-level targets",authors:"nicol\xf2",date:new Date("2021-01-01T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.13.0 Released"},r=void 0,a={authorsImageUrls:[void 0]},c=[{value:"Funding Update",id:"funding-update",level:3},{value:"Highlights",id:"highlights",level:2},{value:"Top-level <code>targets</code> option (#12189, RFC)",id:"top-level-targets-option-12189-rfc",level:3},{value:"Top-level <code>assumptions</code> option (#12219, RFC)",id:"top-level-assumptions-option-12219-rfc",level:3},{value:"Records and Tuples support (#12145)",id:"records-and-tuples-support-12145",level:3},{value:"New Flow features (#12193, #12234)",id:"new-flow-features-12193-12234",level:3},{value:"TypeScript 4.2 support (#12628)",id:"typescript-42-support-12628",level:3},{value:"Automatic ES modules in <code>@babel/runtime</code> (#12632)",id:"automatic-es-modules-in-babelruntime-12632",level:3}];function d(e){let t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"We just published Babel 7.13.0, the first minor release of 2021!"}),"\n",(0,o.jsxs)(t.p,{children:["This release includes some important features to ",(0,o.jsx)(t.code,{children:"@babel/core"}),": a ",(0,o.jsx)(t.code,{children:"targets"})," option (similar to ",(0,o.jsx)(t.code,{children:"@babel/preset-env"}),"'s one) that can be shared across different plugins, an ",(0,o.jsx)(t.code,{children:"assumptions"})," option to precisely tune your configuration to produce a smaller compilation output, and support for plugins and presets written using native ECMAScript modules."]}),"\n",(0,o.jsxs)(t.p,{children:["Babel now supports transforming the ",(0,o.jsx)(t.a,{href:"https://github.com/tc39/proposal-record-tuple",children:"Records and Tuples"})," ECMAScript proposal, which brings immutable data structures and structural equality to JavaScript, and parsing the ",(0,o.jsx)(t.a,{href:"https://github.com/tc39/proposal-js-module-blocks",children:"Module Blocks"})," proposal."]}),"\n",(0,o.jsx)(t.p,{children:"Additionally, we added support for some new Flow and TypeScript features."}),"\n",(0,o.jsxs)(t.p,{children:["You can read the full changelog on ",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/releases/tag/v7.13.0",children:"GitHub"}),"."]}),"\n",(0,o.jsx)(t.h3,{id:"funding-update",children:"Funding Update"}),"\n",(0,o.jsx)(t.p,{children:'We have joined the "GitHub Sponsors for organizations" program, so you can now sponsor us directly through GitHub \uD83D\uDE0A.'}),"\n",(0,o.jsx)("iframe",{src:"https://github.com/sponsors/babel/button",title:"Sponsor Babel on GitHub",height:"35",width:"116",style:{border:"0",margin:"auto",display:"block"}}),"\n",(0,o.jsx)(t.p,{children:"These funds are used to support our team's (currently one full-time and three part-time maintainers) continued efforts in improving stability and developing new features."}),"\n",(0,o.jsxs)(t.p,{children:["Both our donations and expenses are openly tracked through our ",(0,o.jsx)(t.a,{href:"https://opencollective.com/babel",children:"Open Collective"})," page, where we will also track donations coming from GitHub Sponsors."]}),"\n",(0,o.jsxs)(t.p,{children:["We welcome donations from both individual and companies. If your company is interested in becoming a Gold tier sponsor ($1k/month) and wants to discuss more, please reach out to ",(0,o.jsx)(t.a,{href:"mailto:team@babeljs.io",children:"team@babeljs.io"}),"!"]}),"\n",(0,o.jsx)(t.h2,{id:"highlights",children:"Highlights"}),"\n",(0,o.jsxs)(t.h3,{id:"top-level-targets-option-12189-rfc",children:["Top-level ",(0,o.jsx)(t.code,{children:"targets"})," option (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/12189",children:"#12189"}),", ",(0,o.jsx)(t.a,{href:"https://github.com/babel/rfcs/pull/2",children:"RFC"}),")"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"@babel/preset-env"}),"'s ",(0,o.jsx)(t.code,{children:"targets"})," option allows users to specify their target environments, automatically choosing which syntax to transform and what polyfills to inject. Since releasing ",(0,o.jsx)(t.code,{children:"@babel/preset-env"}),", we've learned that plugins ",(0,o.jsx)(t.em,{children:"themselves"})," can also benefit from knowing your targets. Currently, this can a bit cumbersome, as you have to specify your targets twice (for example, if you are using our ",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel-polyfills",children:"new polyfill plugins"}),"). By introducing ",(0,o.jsx)(t.code,{children:"targets"})," as a top level option, you now only have to specify your targets once:"]}),"\n",(0,o.jsxs)("table",{children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:"Old configuration"}),(0,o.jsx)("th",{children:"New configuration"})]})}),(0,o.jsx)("tbody",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",metastring:'title="babel.config.json"',children:'{\n  "presets": [\n    ["@babel/preset-env", {\n        "targets": ">1%, not ie 11"\n    }]\n  ],\n  "plugins": [\n    ["polyfill-es-shims", {\n      "targets": ">1%, not ie 11"\n    }]\n  ]\n}\n'})})}),(0,o.jsx)("td",{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",metastring:'title="JSON"',children:'{\n  "targets": ">1%, not ie 11",\n  "presets": ["@babel/preset-env"],\n  "plugins": ["polyfill-es-shims"]\n}\n'})})})]})})]}),"\n",(0,o.jsxs)(t.p,{children:["We recommended converting your Babel config to use the new top-level ",(0,o.jsx)(t.code,{children:"targets"})," option, as it has the following additional benefits:"]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["It has better handling of the ",(0,o.jsx)(t.a,{href:"https://babel.dev/docs/en/options#targetsesmodules",children:(0,o.jsx)(t.code,{children:"esmodules: true"})})," target. (it's intersected with the other targets, rather than replacing them)"]}),"\n",(0,o.jsxs)(t.li,{children:["As we introduce additional ",(0,o.jsx)(t.code,{children:"targets"}),"-related support in our plugins, you'll automatically benefit from more optimized output!"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["You can read the details about this new option in its ",(0,o.jsx)(t.a,{href:"https://github.com/babel/rfcs/blob/master/rfcs/0002-top-level-targets.md",children:"RFC"}),"."]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["\uD83D\uDD2E In the future we might explore moving ",(0,o.jsx)(t.code,{children:"@babel/preset-env"})," into ",(0,o.jsx)(t.code,{children:"@babel/core"})," so that you don't have to install an additional package to get started with Babel. This new option can be seen as the first step in that direction!"]}),"\n"]}),"\n",(0,o.jsxs)(t.h3,{id:"top-level-assumptions-option-12219-rfc",children:["Top-level ",(0,o.jsx)(t.code,{children:"assumptions"})," option (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/12219",children:"#12219"}),", ",(0,o.jsx)(t.a,{href:"https://github.com/babel/rfcs/pull/5",children:"RFC"}),")"]}),"\n",(0,o.jsxs)(t.p,{children:["Many of our plugins have a ",(0,o.jsx)(t.code,{children:"loose"})," option, which tells Babel to generate smaller/faster output by making certain assumptions about your code and ignoring certain edge cases in the JavaScript spec."]}),"\n",(0,o.jsxs)(t.p,{children:["However, ",(0,o.jsx)(t.code,{children:"loose"})," has some problems that lead to user confusion: the term itself does not help to describe how exactly it affects the compiler's behavior and, worse, sometimes requires setting configuration for multiple plugins to ensure everything compiles."]}),"\n",(0,o.jsxs)(t.p,{children:["To help fix these problems, we've added a new top level option to tell Babel which assumptions it can make about your code: ",(0,o.jsx)(t.code,{children:"assumptions"}),"! Similar to the new ",(0,o.jsx)(t.code,{children:"targets"})," option, every plugin will now receive the assumptions you've enabled, eliminating the need to set the option individually. This is really valuable since a plugin can be influenced by multiple assumptions, and an assumption can influence multiple plugins."]}),"\n",(0,o.jsx)(t.admonition,{type:"caution",children:(0,o.jsxs)(t.p,{children:["This is ",(0,o.jsx)(t.strong,{children:"advanced"})," functionality. Like the previous ",(0,o.jsx)(t.code,{children:"loose"})," option, please be careful when enabling assumptions, because they are ",(0,o.jsx)(t.em,{children:"not"})," spec-compliant and may break your code in unexpected ways."]})}),"\n",(0,o.jsx)(t.p,{children:"For example, when transforming classes, Babel will generate this output by default:"}),"\n",(0,o.jsxs)("table",{style:{width:"100%",display:"table",tableLayout:"fixed"},children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:"Input"}),(0,o.jsx)("th",{children:"Output"})]})}),(0,o.jsx)("tbody",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"class Test {\n  constructor() {\n    this.x = 2;\n  }\n}\n\n// You can test the thrown error in the console:\n// Uncaught TypeError: class constructors must be invoked with 'new'\nTest();\n"})})}),(0,o.jsx)("td",{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nlet Test = function Test() {\n  _classCallCheck(this, Test);\n\n  this.x = 2;\n};\n\n// You can test the thrown error in the console:\n// Uncaught TypeError: class constructors must be invoked with 'new'\nTest();\n"})})})]})})]}),"\n",(0,o.jsxs)(t.p,{children:["However, enabling the ",(0,o.jsx)(t.code,{children:"noClassCalls"})," assumption tells Babel \"I'm never trying to call classes without ",(0,o.jsx)(t.code,{children:"new"}),', so you can compile without worrying about it":']}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",metastring:'title="JSON"',children:'{\n  "targets": "firefox 30",\n  "assumptions": { "noClassCalls": true },\n  "presets": ["@babel/preset-env"]\n}\n'})}),"\n",(0,o.jsxs)("table",{style:{width:"100%",display:"table",tableLayout:"fixed"},children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:"Input"}),(0,o.jsx)("th",{children:"Output"})]})}),(0,o.jsx)("tbody",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"class Test {\n  constructor() {\n    this.x = 2;\n  }\n}\n\n// Won't throw since we violated the assumption\nTest();\n"})})}),(0,o.jsx)("td",{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"let Test = function Test() {\n  this.x = 2;\n};\n\n// Won't throw since we violated the assumption\nTest();\n"})})})]})})]}),"\n",(0,o.jsxs)(t.p,{children:["Check out the full list of assumptions ",(0,o.jsx)(t.a,{href:"https://babeljs.io/assumptions",children:"over in our documentation"}),", where you can individually enable or disable them to see how they affect the compiled output."]}),"\n",(0,o.jsxs)(t.h3,{id:"records-and-tuples-support-12145",children:["Records and Tuples support (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/12145",children:"#12145"}),")"]}),"\n",(0,o.jsxs)(t.p,{children:["Thanks to a collaboration with ",(0,o.jsx)(t.a,{href:"https://www.techatbloomberg.com/",children:"Bloomberg"}),", Babel now supports transforming the ",(0,o.jsx)(t.a,{href:"https://github.com/tc39/proposal-record-tuple",children:'"Records and Tuples" stage 2 proposal'}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["The Babel plugin transforms records and tuples syntax using the global ",(0,o.jsx)(t.code,{children:"Record"})," and ",(0,o.jsx)(t.code,{children:"Tuple"})," functions:"]}),"\n",(0,o.jsxs)("table",{style:{width:"100%",display:"table",tableLayout:"fixed"},children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:"Input"}),(0,o.jsx)("th",{children:"Output"})]})}),(0,o.jsx)("tbody",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'let data = #{\n  name: "Babel",\n  ids: #[1, 2, 3]\n};\n'})})}),(0,o.jsx)("td",{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'let data = Record({\n  name: "Babel",\n  ids: Tuple(1, 2, 3),\n});\n'})})})]})})]}),"\n",(0,o.jsxs)(t.p,{children:["This means that you will need to load a polyfill for those global functions, such as ",(0,o.jsx)(t.a,{href:"https://www.npmjs.com/package/@bloomberg/record-tuple-polyfill",children:(0,o.jsx)(t.code,{children:"@bloomberg/record-tuple-polyfill"})}),", either by importing it in your code or with a ",(0,o.jsx)(t.code,{children:"<script>"})," tag:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-html",children:'<script src="https://unpkg.com/@bloomberg/record-tuple-polyfill@0.0.3/lib/index.umd.js" />\n'})}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"NOTE"}),": No engine currently supports records and tuples, so you always need to load the polyfill."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["In order to enable this transform, you need to add ",(0,o.jsx)(t.code,{children:"@babel/plugin-proposal-record-and-tuple"})," to your configuration."]}),"\n",(0,o.jsxs)(t.h3,{id:"new-flow-features-12193-12234",children:["New Flow features (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/12193",children:"#12193"}),", ",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/12234",children:"#12234"}),")"]}),"\n",(0,o.jsx)(t.p,{children:"Babel 7.13.0 has support for two new Flow features:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"this"})," type annotation in functions, that allow you to specify the type of the ",(0,o.jsx)(t.code,{children:"this"})," object as if it was a parameter"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"function getPerson(this: Database, id: string): Person {\n  this instanceof Database; // true\n}\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"enum"})," declarations with unknown members"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"enum PetKind {\n  Dog,\n  Cat,\n  Snake,\n  ...\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.h3,{id:"typescript-42-support-12628",children:["TypeScript 4.2 support (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/12628",children:"#12628"}),")"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://devblogs.microsoft.com/typescript/announcing-typescript-4-2-rc/",children:"TypeScript 4.2"})," supports some new syntax features such as abstract constructor signatures."]}),"\n",(0,o.jsxs)(t.p,{children:["You can read more about the changes in ",(0,o.jsx)(t.a,{href:"https://devblogs.microsoft.com/typescript/announcing-typescript-4-2-beta/",children:"the TypeScript release post"}),"."]}),"\n",(0,o.jsxs)(t.h3,{id:"automatic-es-modules-in-babelruntime-12632",children:["Automatic ES modules in ",(0,o.jsx)(t.code,{children:"@babel/runtime"})," (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/12632",children:"#12632"}),")"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"@babel/runtime"})," contains all of the Babel runtime helpers in both CommonJS and ECMAScript module formats."]}),"\n",(0,o.jsxs)(t.p,{children:["Until now, you had to manually choose which one you wanted to use, specifying the ",(0,o.jsx)(t.code,{children:"useESModules"})," option of ",(0,o.jsx)(t.code,{children:"@babel/plugin-transform-runtime"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["We have now reorganized ",(0,o.jsx)(t.code,{children:"@babel/runtime"}),"'s internal structure, leveraging the new ",(0,o.jsx)(t.a,{href:"https://nodejs.org/api/packages.html#packages_package_entry_points",children:(0,o.jsx)(t.code,{children:'"exports"'})})," ",(0,o.jsx)(t.code,{children:"package.json"})," field supported by Node.js and bundlers, so that they are able to automatically choose between CJS and ESM."]}),"\n",(0,o.jsxs)(t.p,{children:["For this reason, the ",(0,o.jsx)(t.code,{children:"useESModules"})," option is now deprecated and will be removed in Babel 8."]})]})}function h(e={}){let{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},80980:function(e,t,n){n.d(t,{Z:function(){return r},a:function(){return i}});var s=n(27378);let o={},l=s.createContext(o);function i(e){let t=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(l.Provider,{value:t},e.children)}},36765:function(e){e.exports=JSON.parse('{"permalink":"/blog/2021/02/22/7.13.0","source":"@site/blog/2021-02-22-7.13.0.md","title":"7.13.0 Released: Records and Tuples, granular compiler assumptions, and top-level targets","description":"We just published Babel 7.13.0, the first minor release of 2021!","date":"2021-01-01T00:00:00.000Z","tags":[],"readingTime":6.195,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo","key":"nicol\xf2","page":null}],"frontMatter":{"layout":"post","title":"7.13.0 Released: Records and Tuples, granular compiler assumptions, and top-level targets","authors":"nicol\xf2","date":"2021-01-01T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.13.0 Released"},"unlisted":false,"prevItem":{"title":"7.14.0 Released: New class features enabled by default, TypeScript 4.3, and better CommonJS interop","permalink":"/blog/2021/04/29/7.14.0"},"nextItem":{"title":"7.12.0 Released: TypeScript 4.1, strings as import/export names, and class static blocks","permalink":"/blog/2020/10/15/7.12.0"}}')}}]);