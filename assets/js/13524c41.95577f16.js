"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["17643"],{24763:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},default:function(){return p},toc:function(){return h},metadata:function(){return l},assets:function(){return d},contentTitle:function(){return c}});var l=JSON.parse('{"id":"babel-template","title":"@babel/template","description":"In computer science, this is known as an implementation of quasiquotes.","source":"@site/../docs/template.md","sourceDirName":".","slug":"/babel-template","permalink":"/docs/babel-template","draft":false,"unlisted":false,"editUrl":"https://github.com/babel/website/edit/main/docs/../docs/template.md","tags":[],"version":"current","frontMatter":{"id":"babel-template","title":"@babel/template"},"sidebar":"docs","previous":{"title":"@babel/runtime","permalink":"/docs/babel-runtime"},"next":{"title":"@babel/traverse","permalink":"/docs/babel-traverse"}}'),r=n(24246),a=n(80980),s=n(95181),i=n(38049);let o={id:"babel-template",title:"@babel/template"},c=void 0,d={},h=[{value:"Install",id:"install",level:2},{value:"String Usage",id:"string-usage",level:2},{value:"<code>.ast</code>",id:"ast",level:3},{value:"Template Literal Usage",id:"template-literal-usage",level:2},{value:"<code>.ast</code>",id:"ast-1",level:3},{value:"AST results",id:"ast-results",level:2},{value:"<code>template</code>",id:"template",level:3},{value:"<code>template.smart</code>",id:"templatesmart",level:3},{value:"<code>template.statement</code>",id:"templatestatement",level:3},{value:"<code>template.statements</code>",id:"templatestatements",level:3},{value:"<code>template.expression</code>",id:"templateexpression",level:3},{value:"<code>template.program</code>",id:"templateprogram",level:3},{value:"API",id:"api",level:2},{value:"<code>template(code, [opts])</code>",id:"templatecode-opts",level:3},{value:"code",id:"code",level:4},{value:"options",id:"options",level:4},{value:"syntacticPlaceholders",id:"syntacticplaceholders",level:4},{value:"placeholderWhitelist",id:"placeholderwhitelist",level:5},{value:"placeholderPattern",id:"placeholderpattern",level:5},{value:"preserveComments",id:"preservecomments",level:5},{value:"Return value",id:"return-value",level:4}];function u(e){let t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"In computer science, this is known as an implementation of quasiquotes."}),"\n",(0,r.jsx)(t.h2,{id:"install",children:"Install"}),"\n",(0,r.jsxs)(s.Z,{groupId:"npm2yarn",children:[(0,r.jsx)(i.Z,{value:"npm",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"npm install --save-dev @babel/template\n"})})}),(0,r.jsx)(i.Z,{value:"yarn",label:"Yarn",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"yarn add --dev @babel/template\n"})})}),(0,r.jsx)(i.Z,{value:"pnpm",label:"pnpm",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"pnpm add --save-dev @babel/template\n"})})}),(0,r.jsx)(i.Z,{value:"bun",label:"Bun",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"bun add --dev @babel/template\n"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"string-usage",children:"String Usage"}),"\n",(0,r.jsxs)(t.p,{children:["When calling ",(0,r.jsx)(t.code,{children:"template"})," as a function with a string argument, you can provide ",(0,r.jsx)(t.em,{children:"placeholders"})," which will get substituted when the template is used."]}),"\n",(0,r.jsxs)(t.p,{children:["You can use two different kinds of placeholders: syntactic placeholders (e.g. ",(0,r.jsx)(t.code,{children:"%%name%%"}),") or identifier placeholders (e.g. ",(0,r.jsx)(t.code,{children:"NAME"}),"). ",(0,r.jsx)(t.code,{children:"@babel/template"})," supports both those approaches by default, but they can't be mixed. If you need to be explicit about what syntax you are using, you can use the ",(0,r.jsx)(t.a,{href:"#syntacticplaceholders",children:(0,r.jsx)(t.code,{children:"syntacticPlaceholders"})})," option."]}),"\n",(0,r.jsxs)(t.p,{children:["Please note that syntactic placeholders were introduced in Babel 7.4.0. If you don't control the ",(0,r.jsx)(t.code,{children:"@babel/template"})," version (for example, when importing it from a ",(0,r.jsx)(t.code,{children:"@babel/core@^7.0.0"})," peer dependency), you must use identifier placeholders. On the other hand, syntactic placeholders have some advantages: they can be used where identifiers would be a syntax error (e.g. in place of function bodies, or in export declarations), and they don't conflict with uppercase variables (e.g., ",(0,r.jsx)(t.code,{children:"new URL()"}),")."]}),"\n",(0,r.jsx)(t.p,{children:"Input (syntactic placeholders):"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'import template from "@babel/template";\nimport { generate } from "@babel/generator";\nimport * as t from "@babel/types";\n\nconst buildRequire = template(`\n  var %%importName%% = require(%%source%%);\n`);\n\nconst ast = buildRequire({\n  importName: t.identifier("myModule"),\n  source: t.stringLiteral("my-module"),\n});\n\nconsole.log(generate(ast).code);\n'})}),"\n",(0,r.jsx)(t.p,{children:"Input (identifier placeholders):"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\n\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier("myModule"),\n  SOURCE: t.stringLiteral("my-module"),\n});\n'})}),"\n",(0,r.jsx)(t.p,{children:"Output:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const myModule = require("my-module");\n'})}),"\n",(0,r.jsx)(t.h3,{id:"ast",children:(0,r.jsx)(t.code,{children:".ast"})}),"\n",(0,r.jsxs)(t.p,{children:["If no placeholders are in use and you just want a simple way to parse a\nstring into an AST, you can use the ",(0,r.jsx)(t.code,{children:".ast"})," version of the template."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const ast = template.ast(`\n  var myModule = require("my-module");\n`);\n'})}),"\n",(0,r.jsx)(t.p,{children:"which will parse and return the AST directly."}),"\n",(0,r.jsx)(t.h2,{id:"template-literal-usage",children:"Template Literal Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'import template from "@babel/template";\nimport { generate } from "@babel/generator";\nimport * as t from "@babel/types";\n\nconst source = "my-module";\n\nconst fn = template`\n  var IMPORT_NAME = require(\'${source}\');\n`;\n\nconst ast = fn({\n  IMPORT_NAME: t.identifier("myModule"),\n});\n\nconsole.log(generate(ast).code);\n'})}),"\n",(0,r.jsx)(t.p,{children:"Note that placeholders can be passed directly as part of the template literal\nin order to make things as readable as possible, or they can be passed into\nthe template function."}),"\n",(0,r.jsx)(t.h3,{id:"ast-1",children:(0,r.jsx)(t.code,{children:".ast"})}),"\n",(0,r.jsxs)(t.p,{children:["If no placeholders are in use and you just want a simple way to parse a\nstring into an AST, you can use the ",(0,r.jsx)(t.code,{children:".ast"})," version of the template."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const name = "my-module";\nconst mod = "myModule";\n\nconst ast = template.ast`\n  var ${mod} = require("${name}");\n`;\n'})}),"\n",(0,r.jsx)(t.p,{children:"which will parse and return the AST directly. Note that unlike the string-based\nversion mentioned earlier, since this is a template literal, it is still\nvalid to perform replacements using template literal replacements."}),"\n",(0,r.jsx)(t.h2,{id:"ast-results",children:"AST results"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"@babel/template"})," API exposes a few flexible APIs to make it as easy as\npossible to create ASTs with an expected structure. Each of these also has\nthe ",(0,r.jsx)(t.code,{children:".ast"})," property mentioned above."]}),"\n",(0,r.jsx)(t.h3,{id:"template",children:(0,r.jsx)(t.code,{children:"template"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"template"})," returns either a single statement, or an array of\nstatements, depending on the parsed result."]}),"\n",(0,r.jsx)(t.h3,{id:"templatesmart",children:(0,r.jsx)(t.code,{children:"template.smart"})}),"\n",(0,r.jsxs)(t.p,{children:["This is the same as the default ",(0,r.jsx)(t.code,{children:"template"})," API, returning either a single\nnode, or an array of nodes, depending on the parsed result."]}),"\n",(0,r.jsx)(t.h3,{id:"templatestatement",children:(0,r.jsx)(t.code,{children:"template.statement"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:'template.statement("foo;")()'})," returns a single statement node, and throw\nan exception if the result is anything but a single statement."]}),"\n",(0,r.jsx)(t.h3,{id:"templatestatements",children:(0,r.jsx)(t.code,{children:"template.statements"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:'template.statements("foo;foo;")()'})," returns an array of statement nodes."]}),"\n",(0,r.jsx)(t.h3,{id:"templateexpression",children:(0,r.jsx)(t.code,{children:"template.expression"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:'template.expression("foo")()'})," returns the expression node."]}),"\n",(0,r.jsx)(t.h3,{id:"templateprogram",children:(0,r.jsx)(t.code,{children:"template.program"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:'template.program("foo;")()'})," returns the ",(0,r.jsx)(t.code,{children:"Program"})," node for the template."]}),"\n",(0,r.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(t.h3,{id:"templatecode-opts",children:(0,r.jsx)(t.code,{children:"template(code, [opts])"})}),"\n",(0,r.jsx)(t.h4,{id:"code",children:"code"}),"\n",(0,r.jsxs)(t.p,{children:["Type: ",(0,r.jsx)(t.code,{children:"string"})]}),"\n",(0,r.jsx)(t.h4,{id:"options",children:"options"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"@babel/template"})," accepts all of the options from ",(0,r.jsx)(t.a,{href:"/docs/babel-parser#options",children:"Babel Parser"}),", and specifies\nsome defaults of its own:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"allowReturnOutsideFunction"})," is set to ",(0,r.jsx)(t.code,{children:"true"})," by default."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"allowSuperOutsideMethod"})," is set to ",(0,r.jsx)(t.code,{children:"true"})," by default."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"sourceType"})," is set to ",(0,r.jsx)(t.code,{children:"module"})," by default."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"syntacticplaceholders",children:"syntacticPlaceholders"}),"\n",(0,r.jsxs)(t.p,{children:["Type: ",(0,r.jsx)(t.code,{children:"boolean"}),"\nDefault: ",(0,r.jsx)(t.code,{children:"true"})," if ",(0,r.jsx)(t.code,{children:"%%foo%%"}),"-style placeholders are used; ",(0,r.jsx)(t.code,{children:"false"})," otherwise.\nAdded in: ",(0,r.jsx)(t.code,{children:"v7.4.0"})]}),"\n",(0,r.jsxs)(t.p,{children:["When this option is ",(0,r.jsx)(t.code,{children:"true"}),", you can use ",(0,r.jsx)(t.code,{children:"%%foo%%"})," to mark placeholders in\nyour templates. When it is ",(0,r.jsx)(t.code,{children:"false"}),", placeholders are identifiers determined\nby the ",(0,r.jsx)(t.code,{children:"placeholderWhitelist"})," and ",(0,r.jsx)(t.code,{children:"placeholderPattern"})," options."]}),"\n",(0,r.jsx)(t.h5,{id:"placeholderwhitelist",children:"placeholderWhitelist"}),"\n",(0,r.jsxs)(t.p,{children:["Type: ",(0,r.jsx)(t.code,{children:"Set<string>"}),"\nDefault: ",(0,r.jsx)(t.code,{children:"undefined"})]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["This option is not compatible with ",(0,r.jsx)(t.code,{children:"syntacticPlaceholders: true"})]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"A set of placeholder names to automatically accept. Items in this list do\nnot need to match the given placeholder pattern."}),"\n",(0,r.jsx)(t.h5,{id:"placeholderpattern",children:"placeholderPattern"}),"\n",(0,r.jsxs)(t.p,{children:["Type: ",(0,r.jsx)(t.code,{children:"RegExp | false"}),"\nDefault: ",(0,r.jsx)(t.code,{children:"/^[_$A-Z0-9]+$/"})]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["This option is not compatible with ",(0,r.jsx)(t.code,{children:"syntacticPlaceholders: true"})]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"A pattern to search for when looking for Identifier and StringLiteral\nnodes that should be considered placeholders.\n'false' will disable placeholder searching entirely, leaving only the\n'placeholderWhitelist' value to find placeholders."}),"\n",(0,r.jsx)(t.h5,{id:"preservecomments",children:"preserveComments"}),"\n",(0,r.jsxs)(t.p,{children:["Type: ",(0,r.jsx)(t.code,{children:"boolean"}),"\nDefault: ",(0,r.jsx)(t.code,{children:"false"})]}),"\n",(0,r.jsxs)(t.p,{children:["Set this to ",(0,r.jsx)(t.code,{children:"true"})," to preserve any comments from the ",(0,r.jsx)(t.code,{children:"code"})," parameter."]}),"\n",(0,r.jsx)(t.h4,{id:"return-value",children:"Return value"}),"\n",(0,r.jsxs)(t.p,{children:["By default ",(0,r.jsx)(t.code,{children:"@babel/template"})," returns a ",(0,r.jsx)(t.code,{children:"function"})," which is invoked with an\noptional object of replacements. See the usage section for an example."]}),"\n",(0,r.jsxs)(t.p,{children:["When using ",(0,r.jsx)(t.code,{children:".ast"}),", the AST will be returned directly."]})]})}function p(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},38049:function(e,t,n){n.d(t,{Z:function(){return a}});var l=n(24246);n(27378);var r=n(90496);function a(e){let{children:t,hidden:n,className:a}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,r.Z)("tabItem_wHwb",a),hidden:n,children:t})}},95181:function(e,t,n){n.d(t,{Z:function(){return b}});var l=n(24246),r=n(27378),a=n(90496),s=n(85403),i=n(3620),o=n(77090),c=n(76180),d=n(23418),h=n(19073);function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){let{value:t,tabValues:n}=e;return n.some(e=>e.value===t)}var m=n(3344);function x(e){let{className:t,block:n,selectedValue:r,selectValue:i,tabValues:o}=e,c=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),h=e=>{let t=e.currentTarget,n=o[c.indexOf(t)].value;n!==r&&(d(t),i(n))},u=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{let n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1]}}t?.focus()};return(0,l.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t),children:o.map(e=>{let{value:t,label:n,attributes:s}=e;return(0,l.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{c.push(e)},onKeyDown:u,onClick:h,...s,className:(0,a.Z)("tabs__item","tabItem_l0OV",s?.className,{"tabs__item--active":r===t}),children:n??t},t)})})}function j(e){let{lazy:t,children:n,selectedValue:s}=e,i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){let e=i.find(e=>e.props.value===s);return e?(0,r.cloneElement)(e,{className:(0,a.Z)("margin-top--md",e.props.className)}):null}return(0,l.jsx)("div",{className:"margin-top--md",children:i.map((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s}))})}function f(e){let t=function(e){let{defaultValue:t,queryString:n=!1,groupId:l}=e,a=function(e){let{values:t,children:n}=e;return(0,r.useMemo)(()=>{let e=t??u(n).map(e=>{let{props:{value:t,label:n,attributes:l,default:r}}=e;return{value:t,label:n,attributes:l,default:r}}),l=(0,d.lx)(e,(e,t)=>e.value===t.value);if(l.length>0)throw Error(`Docusaurus error: Duplicate values "${l.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[t,n])}(e),[s,m]=(0,r.useState)(()=>(function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}let l=n.find(e=>e.default)??n[0];if(!l)throw Error("Unexpected error: 0 tabValues");return l.value})({defaultValue:t,tabValues:a})),[x,j]=function(e){let{queryString:t=!1,groupId:n}=e,l=(0,i.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(a),(0,r.useCallback)(e=>{if(!a)return;let t=new URLSearchParams(l.location.search);t.set(a,e),l.replace({...l.location,search:t.toString()})},[a,l])]}({queryString:n,groupId:l}),[f,b]=function(e){let{groupId:t}=e,n=t?`docusaurus.tab.${t}`:null,[l,a]=(0,h.Nk)(n);return[l,(0,r.useCallback)(e=>{n&&a.set(e)},[n,a])]}({groupId:l}),v=(()=>{let e=x??f;return p({value:e,tabValues:a})?e:null})();return(0,o.Z)(()=>{v&&m(v)},[v]),{selectedValue:s,selectValue:(0,r.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw Error(`Can't select invalid tab value=${e}`);m(e),j(e),b(e)},[j,b,a]),tabValues:a}}(e);return(0,l.jsxs)("div",{className:(0,a.Z)("tabs-container","tabList_J5MA"),children:[(0,l.jsx)(x,{...t,...e}),(0,l.jsx)(j,{...t,...e})]})}function b(e){let t=(0,m.Z)();return(0,l.jsx)(f,{...e,children:u(e.children)},String(t))}},80980:function(e,t,n){n.d(t,{Z:function(){return i},a:function(){return s}});var l=n(27378);let r={},a=l.createContext(r);function s(e){let t=l.useContext(a);return l.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),l.createElement(a.Provider,{value:t},e.children)}}}]);