"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8553],{35318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,d=u["".concat(l,".").concat(m)]||u[m]||b[m]||o;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},21030:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return u}});var a=n(25773),r=n(30808),o=(n(27378),n(35318)),i=["components"],p={layout:"post",title:"7.16.0 Released: ESLint 8 and TypeScript 4.5",author:"Babel Team",authorURL:"https://twitter.com/babeljs",date:new Date("2021-10-29T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.16.0 Released"},l=void 0,s={permalink:"/babel-website/blog/2021/10/29/7.16.0",source:"@site/blog/2021-10-29-7.16.0.md",title:"7.16.0 Released: ESLint 8 and TypeScript 4.5",description:"We just published Babel 7.16.0!",date:"2021-10-29T00:00:00.000Z",formattedDate:"October 29, 2021",tags:[],readingTime:2.56,hasTruncateMarker:!0,authors:[{name:"Babel Team",url:"https://twitter.com/babeljs"}],frontMatter:{layout:"post",title:"7.16.0 Released: ESLint 8 and TypeScript 4.5",author:"Babel Team",authorURL:"https://twitter.com/babeljs",date:"2021-10-29T00:00:00.000Z",categories:"announcements",share_text:"Babel 7.16.0 Released"},prevItem:{title:"7.17.0 Released: RegExp 'v' mode and ... \ud83e\udd41 decorators!",permalink:"/babel-website/blog/2022/02/02/7.17.0"},nextItem:{title:"7.15.0 Released: Hack-style pipelines, TypeScript const enums and Rhino target support",permalink:"/babel-website/blog/2021/07/26/7.15.0"}},c={authorsImageUrls:[void 0]},u=[{value:"Highlights",id:"highlights",level:2},{value:"Class static blocks enabled by default (#13713)",id:"class-static-blocks-enabled-by-default-13713",level:3},{value:"TypeScript 4.5 features (#13802, #13838)",id:"typescript-45-features-13802-13838",level:3},{value:"<code>^</code> topic token for Hack-style pipes (#13749)",id:"-topic-token-for-hack-style-pipes-13749",level:3},{value:"ESLint 8 support in <code>@babel/eslint-parser</code> (#13782)",id:"eslint-8-support-in-babeleslint-parser-13782",level:3}],b={toc:u},m="wrapper";function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)(m,(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We just published Babel 7.16.0!"),(0,o.kt)("p",null,"This release enables ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-class-static-block"},"class static initialization blocks")," by default. It includes support for a new variant of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-pipeline-operator"},"pipeline operator")," proposal, as well as TypeScript 4.5 compatibility."),(0,o.kt)("p",null,"Furthermore, ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/eslint-parser")," now supports ESLint 8."),(0,o.kt)("p",null,"You can read the whole changelog ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/releases/tag/v7.16.0"},"on GitHub"),"."),(0,o.kt)("p",null,"If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/babel?sponsor=1"},"Open Collective")," and, better yet, work with us on the implementation of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/proposals"},"new ECMAScript proposals")," directly! As a volunteer-driven project, we rely on the community's support to fund our efforts in supporting the wide range of JavaScript users. Reach out at ",(0,o.kt)("a",{parentName:"p",href:"mailto:team@babeljs.io"},"team@babeljs.io")," if you'd like to discuss more!"),(0,o.kt)("h2",{id:"highlights"},"Highlights"),(0,o.kt)("h3",{id:"class-static-blocks-enabled-by-default-13713"},"Class static blocks enabled by default (",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/babel/babel/pull/13713"},"#13713"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'class MyClass {\n  static {\n    doSomeInitialization(MyClass);\n    console.log("MyClass initialized!");\n  }\n}\n')),(0,o.kt)("p",null,"Static blocks, that ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/notes/blob/HEAD/meetings/2021-08/aug-31.md#class-static-initialization-blocks-for-stage-4"},"reached Stage 4 in August"),", are now enabled by default in ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/parser")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),"."),(0,o.kt)("p",null,"If you were using the ",(0,o.kt)("inlineCode",{parentName:"p"},"classStaticBlock")," parser plugin, or ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-syntax-class-static-block"),", you can safely remove them from your config."),(0,o.kt)("p",null,"If you already use ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),", you can now remove ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-proposal-class-static-block")," from your config."),(0,o.kt)("h3",{id:"typescript-45-features-13802-13838"},"TypeScript 4.5 features (",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/babel/babel/pull/13802"},"#13802"),", ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/babel/babel/pull/13838"},"#13838"),")"),(0,o.kt)("p",null,"TypeScript 4.5 introduces a new syntax for marking imports as type-only: rather than marking the whole import statement, you can mark a single specifier:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// TypeScript 4.4\nimport type { Foo } from "my-module";\nimport { fooInstance } from "my-module";\n\n// TypeScript 4.5\nimport { type Foo, fooInstance } from "my-module";\n')),(0,o.kt)("p",null,"It also supports two new file extensions: ",(0,o.kt)("inlineCode",{parentName:"p"},".mts")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".cts"),", that mirror ",(0,o.kt)("inlineCode",{parentName:"p"},".mjs")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".cjs"),". When passing an ",(0,o.kt)("inlineCode",{parentName:"p"},".mts")," or ",(0,o.kt)("inlineCode",{parentName:"p"},".cts")," file to Babel with ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-typescript")," enabled, it uses the file extension to detect the desired source type (",(0,o.kt)("inlineCode",{parentName:"p"},'"module"')," or ",(0,o.kt)("inlineCode",{parentName:"p"},'"script"'),")."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},".mts")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".cts")," file cannot contain JSX code by default, but they cannot contain TypeScript annotations that would be ambiguous with JSX (",(0,o.kt)("inlineCode",{parentName:"p"},"<Type> cast")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<T>() => {}"),")."),(0,o.kt)("p",null,"You can read the full TypeScript 4.5 release post ",(0,o.kt)("a",{parentName:"p",href:"https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/"},"on their blog"),"."),(0,o.kt)("h3",{id:"-topic-token-for-hack-style-pipes-13749"},(0,o.kt)("inlineCode",{parentName:"h3"},"^")," topic token for Hack-style pipes (",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/babel/babel/pull/13749"},"#13749"),")"),(0,o.kt)("p",null,"The champions of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-pipeline-operator"},"pipeline operator")," proposal are considering ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-pipeline-operator/wiki/Bikeshedding-the-Hack-topic-token"},"various topic tokens")," (the reference to the value from the previous pipeline step)."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-proposal-pipeline-operator")," (and the ",(0,o.kt)("inlineCode",{parentName:"p"},'"pipelineOperator"')," parser plugin) now support three of them: ",(0,o.kt)("inlineCode",{parentName:"p"},"#"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"^")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"%"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'let values = getNames()\n  |> ["default"].concat(^)\n  |> await loadValues(^);\n')),(0,o.kt)("p",null,"You can enable the current version of the pipeline operator proposal using the ",(0,o.kt)("inlineCode",{parentName:"p"},'proposal: "hack"')," option, and you can choose the topic token using ",(0,o.kt)("inlineCode",{parentName:"p"},'topicToken: "^"'),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "plugins": [\n    ["@babel/plugin-proposal-pipeline-operator", {\n      "proposal": "hack",\n      "topicToken": "^"\n    }]\n  ]\n}\n')),(0,o.kt)("h3",{id:"eslint-8-support-in-babeleslint-parser-13782"},"ESLint 8 support in ",(0,o.kt)("inlineCode",{parentName:"h3"},"@babel/eslint-parser")," (",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/babel/babel/pull/13782"},"#13782"),")"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@babel/eslint-parser")," now supports ESLint 8: you can update your ",(0,o.kt)("inlineCode",{parentName:"p"},'"eslint"')," dependency and it will just work."),(0,o.kt)("p",null,"If you are an ESLint plugin author, pay attention to the breaking change in the AST for class fields and private methods: when using ESLint 7 they follow the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/blob/v7.16.0/packages/babel-parser/ast/spec.md"},"Babel AST shape"),"; when using ESLint 8 they follow ESLint and the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/estree/estree/blob/91f49977f1f05dea86c112a070a703bb37f5722d/es2022.md#propertydefinition"},"ESTree specification"),". This is because ESLint introduced support for these new class features starting from ESLint 8."))}d.isMDXComponent=!0}}]);