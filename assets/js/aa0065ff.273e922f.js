"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["79514"],{17793:function(e,t,s){s.r(t),s.d(t,{assets:function(){return a},contentTitle:function(){return r},default:function(){return h},frontMatter:function(){return l},metadata:function(){return n},toc:function(){return c}});var n=s(98616),i=s(24246),o=s(80980);let l={layout:"post",title:"7.10.0 Released: Class Fields in preset-env, '#private in' checks and better React tree-shaking",authors:"nicol\xf2",date:new Date("2020-05-25T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.10.0 Released"},r=void 0,a={authorsImageUrls:[void 0]},c=[{value:"New features enabled by default",id:"new-features-enabled-by-default",level:2},{value:"Parsing for <code>import.meta</code>",id:"parsing-for-importmeta",level:3},{value:"Transforming <code>&amp;#x200B;u{...}</code>-style Unicode escapes (#11377)",id:"transforming-x200bu-style-unicode-escapes-11377",level:3},{value:"Class Properties and Private Methods to <code>shippedProposals</code> option of <code>@babel/preset-env</code> (#11451)",id:"class-properties-and-private-methods-to-shippedproposals-option-of-babelpreset-env-11451",level:3},{value:"Improved optional chaining <code>?.</code> ergonomics (#10961, #11248)",id:"improved-optional-chaining--ergonomics-10961-11248",level:2},{value:"Private Fields in <code>in</code> (#11372)",id:"private-fields-in-in-11372",level:2},{value:"Module Attributes parser support (#10962)",id:"module-attributes-parser-support-10962",level:2},{value:"Better tree-shaking for React components (#11428)",id:"better-tree-shaking-for-react-components-11428",level:2},{value:"New experimental polyfills architecture (#10008, <code>babel-polyfills</code>)",id:"new-experimental-polyfills-architecture-10008-babel-polyfills",level:2}];function d(e){let t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"We just released a new minor version of Babel!"}),"\n",(0,i.jsx)(t.p,{children:"This 7.10 release includes:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Full support for the new Stage 1 proposal, ",(0,i.jsx)(t.code,{children:"#prop in obj"})," checks for private fields ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/proposal-private-fields-in-in",children:"proposal"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@babel/preset-env"})," now compiles ES2015-style Unicode escapes (",(0,i.jsx)(t.code,{children:"\\u{Babe1}"}),") to the equivalent legacy syntax (",(0,i.jsx)(t.code,{children:"\uDAAA\uDFE1"}),")."]}),"\n",(0,i.jsxs)(t.li,{children:["Two improvements to the ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/proposal-optional-chaining",children:"Optional Chaining"})," operator (",(0,i.jsx)(t.code,{children:"?."}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Parser support for the new Stage 1 ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/proposal-module-attributes",children:"Module Attributes proposal"})," (",(0,i.jsx)(t.code,{children:'import a from "./a.json" with type: "json"'}),")."]}),"\n",(0,i.jsxs)(t.li,{children:["Better tree-shaking support for React code (i.e. ",(0,i.jsx)(t.code,{children:"React.memo"}),")!"]}),"\n",(0,i.jsxs)(t.li,{children:["Setting up ",(0,i.jsx)(t.a,{href:"https://github.com/babel/rfcs",children:"RFCs"})," repo and ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/discussions",children:"GitHub Discussions"})," pages!"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["You can read the whole changelog ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/releases/tag/v7.10.0",children:"on GitHub"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Alongside this Babel release, we are releasing the first experimental version of our new ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel-polyfills",children:"polyfills compatibility architecture"})," (see below for more details), thanks to ",(0,i.jsx)(t.a,{href:"https://twitter.com/NicoloRibaudo",children:"Nicol\xf2"})," and some awesome folks in the community! We began discussions about this over a year ago in a ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/issues/10008",children:"RFC issue"})," within the Babel repository."]}),"\n",(0,i.jsxs)(t.p,{children:["As an aside, we now have an official RFC process for discussing changes that significantly impact our users: please check it out over in the ",(0,i.jsx)(t.a,{href:"https://github.com/babel/rfcs",children:(0,i.jsx)(t.code,{children:"babel/rfcs"})})," repository! In addition, we've enabled ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/discussions",children:"GitHub Discussions"})," on our repository if you have feedback or questions!"]}),"\n",(0,i.jsxs)(t.p,{children:["If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on our ",(0,i.jsx)(t.a,{href:"https://opencollective.com/babel",children:"Open Collective"})," and, better yet, work with us on the implementation of ",(0,i.jsx)(t.a,{href:"https://github.com/babel/proposals",children:"new ECMAScript proposals"})," directly! As a volunteer-driven project, we rely on the community's support to fund our efforts in supporting the wide range of JavaScript users. Reach out at ",(0,i.jsx)(t.a,{href:"mailto:team@babeljs.io",children:"team@babeljs.io"})," if you'd like to discuss more!"]}),"\n",(0,i.jsx)(t.h2,{id:"new-features-enabled-by-default",children:"New features enabled by default"}),"\n",(0,i.jsxs)(t.h3,{id:"parsing-for-importmeta",children:["Parsing for ",(0,i.jsx)(t.code,{children:"import.meta"})]}),"\n",(0,i.jsxs)(t.p,{children:["Now that it has reached Stage 4, ",(0,i.jsx)(t.em,{children:"parsing"})," for ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/proposal-import-meta",children:(0,i.jsx)(t.code,{children:"import.meta"})})," is enabled by default, thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/kik-o",children:"Kiko"}),". Please note that ",(0,i.jsx)(t.code,{children:"@babel/preset-env"})," doesn't have any default support for ",(0,i.jsx)(t.em,{children:"transforming"})," it, because what that object contains is up to the engine and is not defined in the ECMAScript specification."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'console.log(import.meta); // { url: "file:///home/user/my-module.js" }\n'})}),"\n",(0,i.jsxs)(t.h3,{id:"transforming-x200bu-style-unicode-escapes-11377",children:["Transforming ",(0,i.jsx)("code",{children:"&#x200B;u{...}"}),"-style Unicode escapes (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/11377",children:"#11377"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["We also discovered that we didn't have support for compiling a 5-year-old ECMAScript feature: ",(0,i.jsx)(t.code,{children:"\\u{...}"}),"-style Unicode escapes! Thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/jridgewell",children:"Justin"}),", ",(0,i.jsx)(t.code,{children:"@babel/preset-env"})," can now compile them in strings and identifiers by default."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://codesandbox.io/embed/beautiful-sammet-msuiw?fontsize=18&hidenavigation=1&theme=dark&view=preview",children:"Example on CodeSandbox"})}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'var \\u{1d49c} = "\\u{Babe1}";\nconsole.log(\\u{1d49c});\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'var _ud835_udc9c = "\uDAAA\uDFE1";\nconsole.log(_ud835_udc9c);\n'})}),"\n",(0,i.jsxs)(t.h3,{id:"class-properties-and-private-methods-to-shippedproposals-option-of-babelpreset-env-11451",children:["Class Properties and Private Methods to ",(0,i.jsx)(t.code,{children:"shippedProposals"})," option of ",(0,i.jsx)(t.code,{children:"@babel/preset-env"})," (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/11451",children:"#11451"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Lastly, thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/JLHwung",children:"J\xf9nli\xe0ng"})," we have added ",(0,i.jsx)(t.code,{children:"@babel/plugin-proposal-class-properties"})," and ",(0,i.jsx)(t.code,{children:"@babel/plugin-proposal-private-methods"})," to the ",(0,i.jsx)(t.a,{href:"https://babeljs.io/docs/en/babel-preset-env#shippedproposals",children:(0,i.jsx)(t.code,{children:"shippedProposals"})})," option of ",(0,i.jsx)(t.code,{children:"@babel/preset-env"}),". These proposals are not Stage 4 (i.e. part of the ECMAScript standard) yet, but they are already enabled by default in ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/proposal-class-fields#implementations",children:"many JavaScript engines"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"If you aren't familiar:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'class Bork {\n  // Public Fields\n  instanceProperty = "bork";\n  static staticProperty = "babelIsCool";\n  // Private Fields\n  #xValue = 0;\n  a() {\n    this.#xValue++;\n  }\n\n  // Private methods\n  get #x() { return this.#xValue; }\n  set #x(value) {\n    this.#xValue = value;\n  }\n  #clicked() {\n    this.#x++;\n  }\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["If you missed it from the last release, in 7.9 we added a new ",(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2020/03/16/7.9.0#babel-preset-env-s-bugfixes-option-11083-https-githubcom-babel-babel-pull-11083",children:"option"}),": ",(0,i.jsx)(t.code,{children:'"bugfixes": true'})," which can greatly reduce your code output."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'{\n  "presets": [\n    ["@babel/preset-env", {\n      "targets": { "esmodules": true }, // Use the targets that you was already using\n      "bugfixes": true // will be default in Babel 8\n    }]\n  ]\n}\n'})}),"\n",(0,i.jsxs)(t.h2,{id:"improved-optional-chaining--ergonomics-10961-11248",children:["Improved optional chaining ",(0,i.jsx)(t.code,{children:"?."})," ergonomics (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10961",children:"#10961"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/11248",children:"#11248"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["In ",(0,i.jsx)(t.a,{href:"https://devblogs.microsoft.com/typescript/announcing-typescript-3-9/",children:"TypeScript 3.9"}),", the interaction between non-null assertions (postfix ",(0,i.jsx)(t.code,{children:"!"}),") and optional chaining ",(0,i.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#parsing-differences-in-optional-chaining-and-non-null-assertions",children:"has been changed"})," to make it more useful."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"foo?.bar!.baz\n"})}),"\n",(0,i.jsxs)(t.p,{children:["In TypeScript 3.8 and Babel 7.9, the above would be read as ",(0,i.jsx)(t.code,{children:"(foo?.bar)!.baz"}),': "If ',(0,i.jsx)(t.code,{children:"foo"})," is not nullish, get ",(0,i.jsx)(t.code,{children:".bar"})," from it. Then trust that ",(0,i.jsx)(t.code,{children:"foo?.bar"})," is never nullish and always get ",(0,i.jsx)(t.code,{children:".bar"}),' from it". This means that when ',(0,i.jsx)(t.code,{children:"foo"})," is nullish that code would always throw, because we are trying to get ",(0,i.jsx)(t.code,{children:".baz"})," from ",(0,i.jsx)(t.code,{children:"undefined"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["In TypeScript 3.9 and Babel 7.10, the code behaves similarly to ",(0,i.jsx)(t.code,{children:"foo?.bar.baz"}),': "If ',(0,i.jsx)(t.code,{children:"foo"})," is not nullish, get ",(0,i.jsx)(t.code,{children:".bar.baz"})," from it and trust me that ",(0,i.jsx)(t.code,{children:"foo?.bar"})," isn't nullish\". Thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/macabeus",children:"Bruno"})," for helping to implement this!"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.p,{children:["Additionally, the class fields proposal ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/proposal-class-fields/pull/301",children:"recently added support"})," for mixing optional chaining ",(0,i.jsx)(t.code,{children:"?."})," with private fields. This means that the following code is now valid:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"obj?.property.#priv;\nobj?.#priv;\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Note that in the second example, if ",(0,i.jsx)(t.code,{children:"obj"})," is not nullish and does not have the ",(0,i.jsx)(t.code,{children:"#priv"})," field, it would still throw an error (exactly as ",(0,i.jsx)(t.code,{children:"obj.#priv"})," would throw). You can read the next section to see how to avoid it!"]}),"\n",(0,i.jsxs)(t.h2,{id:"private-fields-in-in-11372",children:["Private Fields in ",(0,i.jsx)(t.code,{children:"in"})," (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/11372",children:"#11372"}),")"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://i12c7.csb.app/",children:"Example on CodeSandbox"})}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'class Person {\n  #name;\n\n  hug(other) {\n    if (#name in other) console.log(`${this.#name} \uD83E\uDD17 ${other.#name}`);\n    else console.log("It\'s not a person!")\n  }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"This Stage 1 proposal allows you to statically check if a given object has a specific private field."}),"\n",(0,i.jsxs)(t.p,{children:['Private fields have a built-in "brand check": if you try to access them in an object where they aren\'t defined, it will throw an exception. You can determine if an object has a particular private field by leveraging this behavior with a ',(0,i.jsx)(t.code,{children:"try"}),"/",(0,i.jsx)(t.code,{children:"catch"})," statement, but this proposal gives us a more compact and robust syntax to do so."]}),"\n",(0,i.jsxs)(t.p,{children:["You can read more about it in the ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/proposal-private-fields-in-in/blob/master/README.md",children:"proposal's description"})," and test this proposal by installing the ",(0,i.jsx)(t.code,{children:"@babel/plugin-proposal-private-property-in-object"})," plugin and adding it to your Babel config. Thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/jridgewell",children:"Justin"})," for the PR!"]}),"\n",(0,i.jsxs)(t.h2,{id:"module-attributes-parser-support-10962",children:["Module Attributes parser support (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/10962",children:"#10962"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"The Modules Attributes proposal (Stage 1) allows providing the engine, module loader or bundler some additional information about the imported file. For example, you could explicitly specify that it should be parsed as JSON:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'import metadata from "./package.json" with type: "json";\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Additionally, they can also be used with dynamic ",(0,i.jsx)(t.code,{children:"import()"}),". Note the support for trailing commas to make it easier to add or remove the second parameter!"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const metadata = await import(\n  "./package.json",\n  { with: { type: "json" } },\n);\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Thanks to ",(0,i.jsx)(t.a,{href:"https://twitter.com/VivekNayyar09/",children:"Vivek"}),", Babel now supports parsing these attributes: you can add the ",(0,i.jsx)(t.code,{children:"@babel/plugin-syntax-module-attributes"})," plugin to your Babel config or, if you are using ",(0,i.jsx)(t.code,{children:"@babel/parser"})," directly, you can enable the ",(0,i.jsx)(t.code,{children:"moduleAttributes"})," plugin. Currently, we only accept the ",(0,i.jsx)(t.code,{children:"type"})," attribute but we might relax this restriction in the future depending on how the proposal evolves."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Babel doesn't ",(0,i.jsx)(t.em,{children:"transform"})," these attributes, and they should be handled directly by your bundler or a custom plugin. Currently babel module transformers ",(0,i.jsx)(t.em,{children:"ignore"})," these attributes. We are ",(0,i.jsx)(t.a,{href:"https://github.com/airbnb/babel-plugin-dynamic-import-node/issues/92",children:"discussing"})," whether we should pass through these attributes in the future."]})}),"\n",(0,i.jsxs)(t.h2,{id:"better-tree-shaking-for-react-components-11428",children:["Better tree-shaking for React components (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/11428",children:"#11428"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["React exposes ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/blob/97f0b7c4a0589cf3cf1dae62fb09d1b7f1253829/packages/babel-plugin-transform-react-pure-annotations/src/index.js#L10",children:"many"})," pure functions used to annotate or wrap elements, for example ",(0,i.jsx)(t.code,{children:"React.forwardRef"}),", ",(0,i.jsx)(t.code,{children:"React.memo"})," or ",(0,i.jsx)(t.code,{children:"React.lazy"}),". However, minifiers and bundlers aren't aware that these functions are pure and thus they cannot remove them."]}),"\n",(0,i.jsxs)(t.p,{children:["Thanks to ",(0,i.jsx)(t.a,{href:"https://twitter.com/devongovett",children:"Devon"})," from the Parcel team, ",(0,i.jsx)(t.code,{children:"@babel/preset-react"})," now injects ",(0,i.jsx)(t.code,{children:"/*#__PURE__*/"})," annotations in those functions calls to mark them as being safe to be tree-shaken away. We had only previously done this with JSX itself (",(0,i.jsx)(t.code,{children:"<a></a>"})," => ",(0,i.jsx)(t.code,{children:'/*#__PURE__*/React.createElement("a", null)'}),")"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"import React from 'react';\nconst SomeComponent = React.lazy(() => import('./SomeComponent'));\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"import React from 'react';\nconst SomeComponent = /*#__PURE__*/React.lazy(() => import('./SomeComponent'));\n"})}),"\n",(0,i.jsxs)(t.h2,{id:"new-experimental-polyfills-architecture-10008-babel-polyfills",children:["New experimental polyfills architecture (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/issues/10008",children:"#10008"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel-polyfills",children:(0,i.jsx)(t.code,{children:"babel-polyfills"})}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["In the last three years, ",(0,i.jsx)(t.code,{children:"@babel/preset-env"})," has helped users reduce bundle sizes by only transpiling the syntax features and including the ",(0,i.jsx)(t.code,{children:"core-js"})," polyfills needed by their target environments.\nCurrently Babel has three different ways to inject ",(0,i.jsx)(t.code,{children:"core-js"})," polyfills in the source code:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["By using ",(0,i.jsx)(t.code,{children:"@babel/preset-env"}),"'s ",(0,i.jsx)(t.code,{children:'useBuiltIns: "entry"'})," option, it is possible to inject polyfills for every ECMAScript functionality not natively supported by the target browsers;"]}),"\n",(0,i.jsxs)(t.li,{children:["By using ",(0,i.jsx)(t.code,{children:'useBuiltIns: "usage"'}),", Babel will only inject polyfills for unsupported ECMAScript features but ",(0,i.jsx)(t.em,{children:"only"})," if they are actually used in the input souce code;"]}),"\n",(0,i.jsxs)(t.li,{children:["By using ",(0,i.jsx)(t.code,{children:"@babel/plugin-transform-runtime"}),", Babel will inject po",(0,i.jsx)("i",{children:"n"}),'yfills (which are "pure" and don\'t pollute the global scope) for every used ECMAScript feature supported by ',(0,i.jsx)(t.code,{children:"core-js"}),". This is usually used by library authors."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Our position in the JavaScript ecosystem allows us to push these optimizations even further. ",(0,i.jsx)(t.code,{children:"@babel/plugin-transform-runtime"})," has big advantages for some users over ",(0,i.jsx)(t.code,{children:"useBuiltIns"}),", but it doesn't consider target environments: it's 2020 and probably very few people need to load an ",(0,i.jsx)(t.code,{children:"Array.prototype.forEach"})," polyfill."]}),"\n",(0,i.jsxs)(t.p,{children:["Additionally, why should we limit the ability to automatically inject only the necessary polyfills to ",(0,i.jsx)(t.code,{children:"core-js"}),"? There are also DOM polyfills, Intl polyfills, and polyfills for a myriad of other web platform APIs. Not everyone wants to use ",(0,i.jsx)(t.code,{children:"core-js"}),"; there are many other valid ECMAScript polyfills which have different tradeoffs (e.g. source size versus spec compliancy), and users should have the ability to use the polyfill of their choice. For example, we are actively working on an ",(0,i.jsx)(t.a,{href:"https://github.com/es-shims/",children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"es-shims"})})})," integration."]}),"\n",(0,i.jsx)(t.p,{children:"What if the logic to inject them was not related to the actual data about the available or required polyfills, so that they can be used and developed independently?"}),"\n",(0,i.jsx)(t.p,{children:"We are now releasing the first experimental version of four new packages:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/babel/babel-polyfills/blob/main/packages/babel-plugin-polyfill-corejs3/README.md",children:(0,i.jsx)(t.code,{children:"babel-plugin-polyfill-corejs3"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/babel/babel-polyfills/blob/main/packages/babel-plugin-polyfill-es-shims/README.md",children:(0,i.jsx)(t.code,{children:"babel-plugin-polyfill-es-shims"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/babel/babel-polyfills/blob/main/packages/babel-plugin-polyfill-regenerator/README.md",children:(0,i.jsx)(t.code,{children:"babel-plugin-polyfill-regenerator"})})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/babel/babel-polyfills/blob/main/packages/babel-plugin-polyfill-corejs2/README.md",children:(0,i.jsx)(t.code,{children:"babel-plugin-polyfill-corejs2"})})," (legacy)"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["These packages all support a ",(0,i.jsx)(t.code,{children:"method"})," option for adjusting how they're injected (analogous to what ",(0,i.jsx)(t.code,{children:"@babel/preset-env"})," and ",(0,i.jsx)(t.code,{children:"@babel/plugin-transform-runtime"}),' currently offer). You can inject a polyfill into an entry point (global scope only) or by direct usage in your code (both global scope and "pure" options). Below is a custom ',(0,i.jsx)(t.a,{href:"https://001iy.csb.app/",children:"CodeSandbox"})," where you can try out the differences between the polyfill options."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://001iy.csb.app/",children:(0,i.jsx)(t.img,{src:"https://user-images.githubusercontent.com/588473/82951506-4a043080-9f75-11ea-969b-3ac2cd0007ed.png",alt:"image"})})}),"\n",(0,i.jsxs)(t.p,{children:["We are also releasing ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel-polyfills/blob/main/packages/babel-helper-define-polyfill-provider/README.md",children:(0,i.jsx)(t.code,{children:"@babel/helper-define-polyfill-provider"})}),": a new helper package which makes it possible for polyfill authors and users to define ",(0,i.jsx)(t.em,{children:"their own"})," polyfill provider plugins."]}),"\n",(0,i.jsxs)(t.p,{children:["Big thanks to ",(0,i.jsx)(t.a,{href:"https://twitter.com/ljharb",children:"Jordan"})," for working with ",(0,i.jsx)(t.a,{href:"https://twitter.com/NicoloRibaudo",children:"Nicol\xf2"})," to make it possible to build the ",(0,i.jsx)(t.a,{href:"https://github.com/es-shims/",children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"es-shims"})})})," plugin!"]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["If you want to read more about these packages, and learn how to set them up, you can check out the project's ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel-polyfills/blob/main/README.md",children:(0,i.jsx)(t.code,{children:"README"})}),"."]})}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsx)(t.p,{children:"These packages are still experimental. We would appreciate feedback about them either on Twitter or on GitHub, but they are not ready for production yet. For example, we still need to wire some polyfills, and we haven't tested the plugins in production applications yet."})})]})}function h(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},80980:function(e,t,s){s.d(t,{Z:function(){return r},a:function(){return l}});var n=s(27378);let i={},o=n.createContext(i);function l(e){let t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(o.Provider,{value:t},e.children)}},98616:function(e){e.exports=JSON.parse('{"permalink":"/blog/2020/05/25/7.10.0","source":"@site/blog/2020-05-25-7.10.0.md","title":"7.10.0 Released: Class Fields in preset-env, \'#private in\' checks and better React tree-shaking","description":"We just released a new minor version of Babel!","date":"2020-05-25T00:00:00.000Z","tags":[],"readingTime":8.275,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo","key":"nicol\xf2","page":null}],"frontMatter":{"layout":"post","title":"7.10.0 Released: Class Fields in preset-env, \'#private in\' checks and better React tree-shaking","authors":"nicol\xf2","date":"2020-05-25T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.10.0 Released"},"unlisted":false,"prevItem":{"title":"The State of babel-eslint","permalink":"/blog/2020/07/13/the-state-of-babel-eslint"},"nextItem":{"title":"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform","permalink":"/blog/2020/03/16/7.9.0"}}')}}]);