"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["8175"],{22100:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return r},default:function(){return d},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return h}});var s=n(5402),o=n(24246),i=n(80980);let a={layout:"post",title:"Contributing to Babel: Three Lessons to Remember",authors:"karl_cheng",slug:"contributing-to-babel-three-lessons-to-remember",date:new Date("2017-08-16T14:00:00.000Z"),custom_js_with_timestamps:["docs.js"]},r=void 0,l={authorsImageUrls:[void 0]},h=[{value:"1. Yes, communication is important",id:"1-yes-communication-is-important",level:2},{value:"2. Where snapshot testing falls short",id:"2-where-snapshot-testing-falls-short",level:2},{value:"Arguments deoptimized when shadowed in nested function",id:"arguments-deoptimized-when-shadowed-in-nested-function",level:3},{value:"Input code",id:"input-code",level:4},{value:"Expected vs. Current Behavior",id:"expected-vs-current-behavior",level:4},{value:"What\u2019s going on here?",id:"whats-going-on-here",level:3},{value:"Trying to fix it",id:"trying-to-fix-it",level:3},{value:"The Chromium debugger is \u201Cfun\u201D",id:"the-chromium-debugger-is-fun",level:3},{value:"The actual problem?",id:"the-actual-problem",level:3},{value:"So why do we use snapshot testing then?!",id:"so-why-do-we-use-snapshot-testing-then",level:3},{value:"3. Team meetings!",id:"3-team-meetings",level:2},{value:"Time zones",id:"time-zones",level:3},{value:"Where to next?",id:"where-to-next",level:2},{value:"More about Karl",id:"more-about-karl",level:2}];function c(e){let t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Getting to work your way around a new code base always poses its challenges, and Babel was no exception."}),"\n",(0,o.jsx)(t.p,{children:"I\u2019ve been working with Babel as part of the Google Summer of Code 2017 program, working to update Babel transforms and the Babylon parser to accommodate changes to specifications and implementing new features."}),"\n",(0,o.jsx)(t.p,{children:"Here\u2019s a few things I\u2019ve learnt from my adventures so far."}),"\n",(0,o.jsx)(t.h2,{id:"1-yes-communication-is-important",children:"1. Yes, communication is important"}),"\n",(0,o.jsxs)(t.p,{children:["To start off with getting to know the codebase better, I combed through the open issues list on Babel and found a relatively easy one (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/issues/5728",children:"issue #5728"}),") to deal with."]}),"\n",(0,o.jsx)(t.p,{children:"Just to make sure I knew what I was doing, I fired a quick question on the thread:"}),"\n",(0,o.jsx)("img",{class:"img-responsive",alt:"My question asking for clarification",src:"/assets/2017-08-16-gsoc-karl-1/question.png"}),"\n",(0,o.jsx)(t.p,{children:'After getting clarification, I set off to change the plugin to not throw "runtime" errors during transpilation, but only when the code is actually being run. One incriminating piece of code stuck out:'}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'for (const violation of (binding.constantViolations: Array)) {\n  throw violation.buildCodeFrameError(messages.get("readOnly", name));\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Now what needed to be done here was to actually insert a ",(0,o.jsx)(t.code,{children:"throw"})," statement into the generated code, which didn\u2019t prove to be too difficult. However, there were still a few cases where runtime errors were being thrown elsewhere from code that wasn\u2019t directly related to this file."]}),"\n",(0,o.jsx)(t.p,{children:"Wanting to go and explore other parts of the Babel code base, I put that down for me to get on with later."}),"\n",(0,o.jsx)(t.p,{children:"Not too long after, I received a, well, interesting update on the issue\u2026 Wait what?"}),"\n",(0,o.jsx)("img",{class:"img-responsive",alt:"Someone else had claimed the issue.",src:"/assets/2017-08-16-gsoc-karl-1/update.png"}),"\n",(0,o.jsx)(t.p,{children:"I never actually said I was working on fixing the issue, but assumed that posting would have implied I was going to work on it."}),"\n",(0,o.jsx)(t.p,{children:"Oops."}),"\n",(0,o.jsx)(t.h2,{id:"2-where-snapshot-testing-falls-short",children:"2. Where snapshot testing falls short"}),"\n",(0,o.jsxs)(t.p,{children:["After setting off for another hunt, I stumbled across ",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/issues/5656",children:"issue #5656"}),":"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.h3,{id:"arguments-deoptimized-when-shadowed-in-nested-function",children:"Arguments deoptimized when shadowed in nested function"}),"\n",(0,o.jsx)(t.p,{children:"This is a feature request (I think). Arguments are not optimized if an inner function shadows the name with a parameter (or rest parameters in my case)."}),"\n",(0,o.jsx)(t.h4,{id:"input-code",children:"Input code"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"const log = (...args) => console.log(...args);\n\nfunction test_opt(...args) {\n  log(...args);\n}\n\nfunction test_deopt(...args) {\n  const fn = (...args) => log(...args);\n  fn(...args);\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"..."}),"\n",(0,o.jsx)(t.h4,{id:"expected-vs-current-behavior",children:"Expected vs. Current Behavior"}),"\n",(0,o.jsx)(t.p,{children:"I\u2019d expect the code to be optimizable to use .apply( thisArg, arguments ) throughout.\nHowever, in test_deopt the outer ...args gets copied just to be passed into the inner fn.\nI can verify that the problem disappears if I rename either the ...args of test_deopt or of the fn arrow function."}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"whats-going-on-here",children:"What\u2019s going on here?"}),"\n",(0,o.jsx)(t.p,{children:"Now what was happening was that this code would generate the following:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:"var log = function log() {\n  var _console;\n\n  return (_console = console).log.apply(_console, arguments);\n};\n\nfunction test_opt() {\n  log.apply(undefined, arguments);\n}\n\nfunction test_deopt() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) { // unnecessary loop\n    args[_key] = arguments[_key];\n  }\n\n  var fn = function fn() {\n    return log.apply(undefined, arguments);\n  };\n  fn.apply(undefined, args);\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["See that ",(0,o.jsx)(t.code,{children:"for"})," section there? Usually this is needed as the arguments object isn\u2019t a real array\u200A\u2014\u200Afor example, if you tried to run ",(0,o.jsx)(t.code,{children:"arguments.slice()"}),", it would fail miserably.\nHowever, in this case it\u2019s only being passed to ",(0,o.jsx)(t.code,{children:"Function.prototype.apply"}),". Surprisingly enough, Babel already bothers to optimize this specific case, like in the ",(0,o.jsx)(t.code,{children:"test_opt"})," example above."]}),"\n",(0,o.jsx)(t.h3,{id:"trying-to-fix-it",children:"Trying to fix it"}),"\n",(0,o.jsx)(t.p,{children:"So what did I do? Adding the problem file as a new test case, I tried to see if I could get the output to reflect what I wanted."}),"\n",(0,o.jsx)("img",{class:"img-responsive",alt:"Test failure of modified code",src:"/assets/2017-08-16-gsoc-karl-1/babel-test.png"}),"\n",(0,o.jsx)(t.p,{children:"\u201CWhy\u2019s the test failing? Surely if I change it a little it will solve itself.\u201D"}),"\n",(0,o.jsxs)(t.p,{children:["Despite spamming ",(0,o.jsx)(t.code,{children:"make test-only"})," and modifying the transforms of referenced identifiers within the code, any change just resulted in a different bunch of tests failing instead."]}),"\n",(0,o.jsx)(t.h3,{id:"the-chromium-debugger-is-fun",children:"The Chromium debugger is \u201Cfun\u201D"}),"\n",(0,o.jsx)(t.p,{children:"Miserable, annoyed and confused, I bothered to fire up the Node.js inspector to step through what was going on."}),"\n",(0,o.jsx)("img",{class:"img-responsive",alt:"Using the Chromium debugger",src:"/assets/2017-08-16-gsoc-karl-1/debugger-cropped.png"}),"\n",(0,o.jsx)(t.p,{children:"After returning to my computer from a drink break, I\u2019m gladly greeted to my hard disk light thrashing around and a practically hung computer."}),"\n",(0,o.jsx)("img",{class:"img-responsive",alt:"Chromium process using more than 3GB of memory",src:"/assets/2017-08-16-gsoc-karl-1/chromium-task-manager.png"}),"\n",(0,o.jsxs)(t.p,{children:["Holding my computer together with judicious applications of ",(0,o.jsx)("kbd",{children:"Alt"})," + ",(0,o.jsx)("kbd",{children:"SysRq"})," + ",(0,o.jsx)("kbd",{children:"F"}),", I managed to work through the flow of things\xb9 and figure out how exactly the code worked."]}),"\n",(0,o.jsx)(t.p,{children:"Even through all that, I still couldn\u2019t see any reason why it was deciding to remove this \u201Cnecessary\u201D (so I thought) code that was being removed with my original fix."}),"\n",(0,o.jsx)(t.h3,{id:"the-actual-problem",children:"The actual problem?"}),"\n",(0,o.jsx)(t.p,{children:"See the error shown above? That entire code in green wasn\u2019t meant to be there, even though it was \u201Cexpected\u201D."}),"\n",(0,o.jsxs)(t.p,{children:["Basically: the test was broken. ",(0,o.jsx)(t.em,{children:"Great."})," :/"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/5721",children:"The actual fix"})," involved creating a ",(0,o.jsx)(t.code,{children:"referencesRest"})," function to make sure that the spread operator was actually being applied to the original parameter, rather than a variable in another scope masking the variable."]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["\xb9: Turns out that adding a large folder to the DevTools workspace would leak memory until causing an OOM (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/issues/5656#issuecomment-300139737",children:"bug I filed for this"}),")."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"so-why-do-we-use-snapshot-testing-then",children:"So why do we use snapshot testing then?!"}),"\n",(0,o.jsx)(t.p,{children:"Well first off, it's far easier to create tests when all you need to do is ask Babel to run your test case to generate your expected file. This presents to us a low time cost option while protecting against a significant proportion of potential errors."}),"\n",(0,o.jsx)(t.p,{children:"Also, especially with the type of program Babel is, it would be far harder to test for in other ways. For example, we could check for specific nodes of the AST, but this takes far longer to write and is also prone to non-obvious breakage when your code attempts to change the way the transform is done."}),"\n",(0,o.jsx)(t.p,{children:"So, all in all, a few lessons here:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Make sure your tests are right in the first place\u2014don't be complacent!"}),"\n",(0,o.jsx)(t.li,{children:"Yes, the debugger is actually useful in seeing what goes on."}),"\n",(0,o.jsx)(t.li,{children:"Sometimes things take time to work out\u2014if you\u2019re getting nowhere, take a break or work on something else."}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"3-team-meetings",children:"3. Team meetings!"}),"\n",(0,o.jsx)(t.p,{children:"I know this kinda stretches the notion of an \u201Cissue\u201D, but anyway :)"}),"\n",(0,o.jsx)(t.p,{children:"When you\u2019re working on a project with a bunch of other people, it\u2019s always useful to catch up with one another and discuss areas which we need to work on."}),"\n",(0,o.jsx)(t.p,{children:"So how exactly do we go about doing that?!"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Ugh, meetings."})}),"\n",(0,o.jsx)(t.p,{children:"When you have a bunch of people spread across the world, finding ways to communicate is never easy, but regardless we would have to make do with our attempts at this feat."}),"\n",(0,o.jsx)(t.h3,{id:"time-zones",children:"Time zones"}),"\n",(0,o.jsx)(t.p,{children:"When you\u2019re dealing with a open source project spanning all across the globe, picking an appropriate hour quickly turns a rather involved exercise in bikeshedding."}),"\n",(0,o.jsx)("img",{class:"img-responsive",alt:"World map of people who\u2019ve attended our meetings",src:"/assets/2017-08-16-gsoc-karl-1/world-map.png"}),"\n",(0,o.jsx)(t.p,{children:"Even with the vast spread between each of us, it seemed like we could just about manage to finally get something together."}),"\n",(0,o.jsx)("img",{class:"img-responsive",alt:"Time zones discussed in 31 May 2017 meeting",src:"/assets/2017-08-16-gsoc-karl-1/time-zone-list.png"}),"\n",(0,o.jsx)(t.p,{children:"Alas, this was not to last. Eventually, we ended up having to switch between two times every other week to accommodate other users (13:00 and 16:00 UTC), which meant that I was only able to attend once a fortnight."}),"\n",(0,o.jsx)(t.p,{children:"Despite this, we\u2019ve managed to make significant progress with coordinating fixes to various parts that make up key changes to Babel, including support for TypeScript, changes to the order in which transform plugins run, as well as keeping up to date with changes from TC39."}),"\n",(0,o.jsx)(t.h2,{id:"where-to-next",children:"Where to next?"}),"\n",(0,o.jsxs)(t.p,{children:["We\u2019re continuing to polish up Babel 7 for general consumption, with ",(0,o.jsx)(t.a,{href:"https://babeljs.io/blog/2017/03/01/upgrade-to-babel-7",children:"a number of new features"})," coming along with that."]}),"\n",(0,o.jsxs)(t.p,{children:["I\u2019m working with a bunch of others to get support for updated ",(0,o.jsx)(t.a,{href:"https://github.com/tc39/proposal-class-fields",children:"Class Fields"})," specification proposal included into Babel so that people can test it out and provide feedback."]}),"\n",(0,o.jsx)(t.p,{children:"Also, while I\u2019m at it, I\u2019d like to thank all of the Babel mentors and contributors for helping me out with peer reviews and providing guidance with proposals, all the way from first contact to today."}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsxs)(t.p,{children:["Looking to find out more about Babel? Hit up our ",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/blob/main/CONTRIBUTING.md",children:"contributing page"})," and join the ",(0,o.jsx)(t.a,{href:"https://slack.babeljs.io",children:"Slack community"}),"!"]}),"\n",(0,o.jsx)(t.h2,{id:"more-about-karl",children:"More about Karl"}),"\n",(0,o.jsxs)(t.p,{children:["Karl Cheng is a ",(0,o.jsx)(t.a,{href:"https://summerofcode.withgoogle.com/organizations/5842528113786880/#6600055503978496",children:"GSoC 2017"})," student hailing from Sydney, Australia. Find out more about him on GitHub (",(0,o.jsx)(t.a,{href:"https://github.com/Qantas94Heavy",children:"Qantas94Heavy"}),") and Twitter (",(0,o.jsx)(t.a,{href:"https://twitter.com/Qantas94Heavy",children:"@Qantas94Heavy"}),")!"]}),"\n",(0,o.jsxs)(t.p,{children:["Please check out our first post on ",(0,o.jsx)(t.a,{href:"https://babeljs.io/blog/2017/08/09/babel-and-summer-of-code",children:"Summer of Code"})," for more info!"]})]})}function d(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},80980:function(e,t,n){n.d(t,{Z:function(){return r},a:function(){return a}});var s=n(27378);let o={},i=s.createContext(o);function a(e){let t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},5402:function(e){e.exports=JSON.parse('{"permalink":"/babel-website/blog/contributing-to-babel-three-lessons-to-remember","source":"@site/blog/2017-08-16-gsoc-karl-1.md","title":"Contributing to Babel: Three Lessons to Remember","description":"Getting to work your way around a new code base always poses its challenges, and Babel was no exception.","date":"2017-08-16T14:00:00.000Z","tags":[],"readingTime":7.295,"hasTruncateMarker":true,"authors":[{"name":"Karl Cheng","url":"https://twitter.com/qantas94heavy","key":"karl_cheng","page":null}],"frontMatter":{"layout":"post","title":"Contributing to Babel: Three Lessons to Remember","authors":"karl_cheng","slug":"contributing-to-babel-three-lessons-to-remember","date":"2017-08-16T14:00:00.000Z","custom_js_with_timestamps":["docs.js"]},"unlisted":false,"prevItem":{"title":"Zero-config code transformation with babel-plugin-macros","permalink":"/babel-website/blog/2017/09/11/zero-config-with-babel-macros"},"nextItem":{"title":"Personal Experiences at Babel #1 \u2014 A PR with Unusually High Number of Reviews","permalink":"/babel-website/blog/personal-experiences-at-babel-1-a-pr-with-unusually-high-number-of-reviews"}}')}}]);