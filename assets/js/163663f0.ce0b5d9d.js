"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["60560"],{68076:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return o},metadata:function(){return r},toc:function(){return d}});var r=n(67332),i=n(24246),s=n(80980);let o={layout:"post",title:"7.26.0 Released: stage 4 features enabled by default, and a new experimental code printer",authors:"team",date:new Date("2024-10-25T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.26.0 Released"},a=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Highlights",id:"highlights",level:2},{value:"Inline RegExp modifiers (#16692)",id:"inline-regexp-modifiers-16692",level:3},{value:"Import attributes (#16579)",id:"import-attributes-16579",level:3},{value:"Rewriting <code>.ts</code> extensions in dynamic <code>import()</code> (#16794)",id:"rewriting-ts-extensions-in-dynamic-import-16794",level:3}];function c(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Babel 7.26.0 was just released!"}),"\n",(0,i.jsxs)(t.p,{children:["It enables by default support of two ECMAScript proposals that become standard in the last TC39 meeting, ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import/with",children:"import attributes"})," and ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Modifier",children:"inline regular expression modifiers"}),", as well as parsing of ",(0,i.jsx)(t.a,{href:"https://flow.org/en/docs/enums/",children:"Flow enums"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Babel now also allows plugins to provide asynchronous ",(0,i.jsx)(t.code,{children:"pre"}),"/",(0,i.jsx)(t.code,{children:"post"})," hooks, and has an [experimental mode](TODO: Link) to preserve tokens' positions when generating the transformed output."]}),"\n",(0,i.jsxs)(t.p,{children:["You can read the whole changelog ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/releases/tag/v7.26.0",children:"on GitHub"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on our ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel?sponsor=1",children:"Open Collective"})," and, better yet, work with us on the implementation of ",(0,i.jsx)(t.a,{href:"https://github.com/babel/proposals",children:"new ECMAScript proposals"})," directly! As a volunteer-driven project, we rely on the community's support to fund our efforts in supporting the wide range of JavaScript users. Reach out at ",(0,i.jsx)(t.a,{href:"mailto:team@babeljs.io",children:"team@babeljs.io"})," if you'd like to discuss more!"]}),"\n",(0,i.jsx)(t.h2,{id:"highlights",children:"Highlights"}),"\n",(0,i.jsxs)(t.h3,{id:"inline-regexp-modifiers-16692",children:["Inline RegExp modifiers (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/16692",children:"#16692"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Modifier",children:"Inline regular expression modifiers"})," allow enabling or disabling the ",(0,i.jsx)(t.code,{children:"i"}),"/",(0,i.jsx)(t.code,{children:"m"}),"/",(0,i.jsx)(t.code,{children:"s"})," flags for just part of a regular expression. For example, ",(0,i.jsx)(t.code,{children:"/hello (?i:world)/"})," matches any string that contains ",(0,i.jsx)(t.code,{children:'"hello "'})," as-is, followed by ",(0,i.jsx)(t.code,{children:'"world"'})," with any casing: ",(0,i.jsx)(t.code,{children:"hello world"})," and ",(0,i.jsx)(t.code,{children:"hello WoRlD"})," match, while ",(0,i.jsx)(t.code,{children:"Hello world"})," does not."]}),"\n",(0,i.jsxs)(t.p,{children:["The proposal reached Stage 4 in the October 2024 TC39 meeting, and will be included in the next version of the JavaScript standard. ",(0,i.jsx)(t.code,{children:"@babel/preset-env"})," will now automatically transpile this feaatures based on your ",(0,i.jsx)(t.a,{href:"https://babeljs.io/docs/options#targets",children:"compilation targets"}),", and you can safely remove ",(0,i.jsx)(t.code,{children:"@babel/plugin-proposal-regexp-modifiers"})," from your config."]}),"\n",(0,i.jsxs)(t.p,{children:["If for any reason you still need to explicitly list the plugin, it has now been renamed to ",(0,i.jsx)(t.code,{children:"@babel/plugin-transform-regexp-modifiers"})," as the proposal became a standard langauge feature."]}),"\n",(0,i.jsxs)(t.h3,{id:"import-attributes-16579",children:["Import attributes (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/16579",children:"#16579"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import/with",children:"import attributes"})," proposal also reached Stage 4 in the October 2024 TC39 meeting. It supports providing some parameters to the underlying platform indicating how to load modules:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'import "./my-module" with { some_param: "hello" };\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Currently, the only widely supported attribute is ",(0,i.jsx)(t.code,{children:"type"}),", which can be used to import JSON or (on the web) CSS modules:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'import data from "./data" with { type: "json" };\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Babel will now parse import attributes by default, so you can safely remove ",(0,i.jsx)(t.code,{children:"@babel/plugin-syntax-import-attributes"})," and ",(0,i.jsx)(t.code,{children:"@babel/plugin-syntax-import-assertions"})," from your configuration."]}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsxs)(t.p,{children:["The old syntax, using ",(0,i.jsx)(t.code,{children:"assert"})," instead of ",(0,i.jsx)(t.code,{children:"with"}),", has been removed from the proposal. By default Babel will ",(0,i.jsx)(t.strong,{children:"not"})," parse it."]})}),"\n",(0,i.jsxs)(t.p,{children:["Since it become a standard JavaScript feature, ",(0,i.jsx)(t.code,{children:"@babel/plugin-proposal-json-modules"})," has now been renamed to ",(0,i.jsx)(t.a,{href:"https://babeljs.io/docs/babel-plugin-transform-json-modules",children:(0,i.jsx)(t.code,{children:"@babel/plugin-transform-json-modules"})}),". Note that this plugin is not included in ",(0,i.jsx)(t.code,{children:"@babel/preset-env"}),", as you'll only want to use it if you are not using a bundler or if your bundler does not support importing JSON modules."]}),"\n",(0,i.jsxs)(t.h3,{id:"rewriting-ts-extensions-in-dynamic-import-16794",children:["Rewriting ",(0,i.jsx)(t.code,{children:".ts"})," extensions in dynamic ",(0,i.jsx)(t.code,{children:"import()"})," (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/16794",children:"#16794"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Babel has supported rewriting ",(0,i.jsx)(t.code,{children:".ts"})," extensions to ",(0,i.jsx)(t.code,{children:".js"})," in import declarations since last year, using the ",(0,i.jsx)(t.a,{href:"https://babeljs.io/docs/babel-preset-typescript#rewriteimportextensions",children:(0,i.jsx)(t.code,{children:"rewriteImportExtensions"})})," option of ",(0,i.jsx)(t.code,{children:"@babel/preset-typescript"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'// Input\nimport { hello } from "./dep.ts";\nlet myVar: number = hello();\n\n// Output\nimport { hello } from "./dep.js";\nlet myVar = hello();\n'})}),"\n",(0,i.jsxs)(t.p,{children:["We are happy to see that TypeScript ",(0,i.jsx)(t.a,{href:"https://devblogs.microsoft.com/typescript/announcing-typescript-5-7-beta/#path-rewriting-for-relative-paths",children:"is introducing"})," a similar option. However, there is a difference: Babel only used to transform paths in ",(0,i.jsx)(t.em,{children:"static"})," import declarations (since they are the only ones that can always be statically analysed), while TypeScript will also support rewriting it in ",(0,i.jsx)(t.em,{children:"dynamic"})," import expressions."]}),"\n",(0,i.jsxs)(t.p,{children:["Babel 7.26 aligns to TypeScript's future behavior, by also rewriting extensions in dynamic ",(0,i.jsx)(t.code,{children:"import()"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'// Input\nawait import("./dep.ts");\nawait import(url);\n\n// Output\nawait import("./dep.js");\nawait import(url.replace(/\\.ts$/, ".js")); // simplified\n'})})]})}function p(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},80980:function(e,t,n){n.d(t,{Z:function(){return a},a:function(){return o}});var r=n(27378);let i={},s=r.createContext(i);function o(e){let t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},67332:function(e){e.exports=JSON.parse('{"permalink":"/blog/2024/10/25/7.26.0","source":"@site/blog/2024-10-25-7.26.0.md","title":"7.26.0 Released: stage 4 features enabled by default, and a new experimental code printer","description":"Babel 7.26.0 was just released!","date":"2024-10-25T00:00:00.000Z","tags":[],"readingTime":2.84,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs","email":"team@babeljs.io","key":"team","page":null}],"frontMatter":{"layout":"post","title":"7.26.0 Released: stage 4 features enabled by default, and a new experimental code printer","authors":"team","date":"2024-10-25T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.26.0 Released"},"unlisted":false,"prevItem":{"title":"7.27.0 Released: better ecosystem alignment","permalink":"/blog/2025/03/24/7.27.0"},"nextItem":{"title":"7.25.0 Released: Safari bugfixes and duplicated named capturing groups","permalink":"/blog/2024/07/26/7.25.0"}}')}}]);