"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["5267"],{21413:function(e,n,t){t.r(n),t.d(n,{metadata:()=>r,contentTitle:()=>l,default:()=>p,assets:()=>o,toc:()=>d,frontMatter:()=>a});var r=JSON.parse('{"id":"v8-migration-api","title":"Upgrade to Babel 8 (Integration)","description":"Refer plugin developers or integration users to this document when upgrading to Babel 8.","source":"@site/../docs/v8-migration-api.md","sourceDirName":".","slug":"/v8-migration-api","permalink":"/docs/v8-migration-api","draft":false,"unlisted":false,"editUrl":"https://github.com/babel/website/edit/main/docs/../docs/v8-migration-api.md","tags":[],"version":"current","frontMatter":{"title":"Upgrade to Babel 8 (Integration)","id":"v8-migration-api"}}'),i=t("24246"),s=t("80980");let a={title:"Upgrade to Babel 8 (Integration)",id:"v8-migration-api"},l=void 0,o={},d=[{value:"AST Changes",id:"ast-changes",level:2},{value:"JavaScript nodes",id:"javascript-nodes",level:3},{value:"TypeScript nodes",id:"typescript-nodes",level:3},{value:"API Changes",id:"api-changes",level:2},{value:"All packages",id:"all-packages",level:3},{value:"<code>@babel/core</code>",id:"babelcore",level:3},{value:"<code>@babel/generator</code>",id:"babelgenerator",level:3},{value:"<code>@babel/types</code>",id:"babeltypes",level:3},{value:"<code>@babel/parser</code>",id:"babelparser",level:3},{value:"<code>@babel/traverse</code>",id:"babeltraverse",level:3},{value:"<code>@babel/eslint-plugin</code>",id:"babeleslint-plugin",level:3},{value:"<code>@babel/compat-data</code>",id:"babelcompat-data",level:3},{value:"<code>@babel/helper-replace-supers</code>",id:"babelhelper-replace-supers",level:3},{value:"<code>@babel/helper-simple-access</code>",id:"babelhelper-simple-access",level:3},{value:"<code>@babel/highlight</code>",id:"babelhighlight",level:3},{value:"Plugin API changes",id:"plugin-api-changes",level:3}];function c(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{Details:t}=n;return!t&&function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Refer plugin developers or integration users to this document when upgrading to Babel 8."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Check out the ",(0,i.jsx)(n.a,{href:"/docs/v8-migration",children:"v8-migration guide"})," for other user-level changes."]})}),"\n",(0,i.jsx)(n.h2,{id:"ast-changes",children:"AST Changes"}),"\n",(0,i.jsx)(n.h3,{id:"javascript-nodes",children:"JavaScript nodes"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-high-red.svg",alt:"high"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Represent dynamic ",(0,i.jsx)(n.code,{children:"import()"})," with an ",(0,i.jsx)(n.code,{children:"ImportExpression"})," node (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15682",children:"#15682"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16114",children:"#16114"}),").","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// Example input\nimport("foo", options);\n\n// AST in Babel 7\n{\n  type: "CallExpression",\n  callee: { type: "Import" },\n  arguments: [\n    StringLiteral("foo"),\n    Identifier("options")\n  ]\n}\n\n// AST in Babel 8\n{\n  type: "ImportExpression",\n  source: StringLiteral("foo"),\n  options: Identifier("options")\n}\n'})}),"\n",(0,i.jsx)(n.strong,{children:"Migration"}),": You are encouraged to test your Babel plugins with the new AST, starting from v7.23.0, specifying ",(0,i.jsx)(n.code,{children:"{ parserOpts: { createImportExpressions: true } }"})," in the Babel config.\nFor end users utilizing Babel plugins that rely on the legacy ",(0,i.jsx)(n.code,{children:"import()"})," AST, it is possible to set ",(0,i.jsx)(n.code,{children:"createImportExpressions"})," to ",(0,i.jsx)(n.code,{children:"false"}),". Note that the Babel 7 ",(0,i.jsx)(n.code,{children:"import()"})," AST is now considered\ndeprecated, it does not support new ES features such as ",(0,i.jsx)(n.a,{href:"https://tc39.es/proposal-source-phase-imports/",children:"Source Phrase Imports"}),". We will remove the ",(0,i.jsx)(n.code,{children:"createImportExpressions"})," parser option in Babel 9."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"typescript-nodes",children:"TypeScript nodes"}),"\n",(0,i.jsxs)(n.p,{children:["Most of the changes to our TypeScript-specific AST nodes are to reduce the differences with the AST shape of the ",(0,i.jsx)(n.code,{children:"@typescript-eslint"})," project. This will make it easier to write ESLint rules that, when not depending on type information, can work both with ",(0,i.jsx)(n.code,{children:"@typescript-eslint/parser"})," and ",(0,i.jsx)(n.code,{children:"@babel/eslint-parser"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-medium-yellow.svg",alt:"medium"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("a",{name:"ast-TSTypeParameter"})," Use an identifier for ",(0,i.jsx)(n.code,{children:"TSTypeParameter.name"}),", rather than a plain string (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/12829",children:"#12829"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'// T is a TSTypeParameter\nfunction process<T>(input: T): T {}\n\n// AST in Babel 7\n{\n  type: "TSTypeParameter",\n  name: "T",\n}\n\n// AST in Babel 8\n{\n  type: "TSTypeParameter",\n  name: { type: "Identifier", name: "T" },\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Allow ",(0,i.jsx)(n.code,{children:"ThisExpression"})," as ",(0,i.jsx)(n.code,{children:"TSTypeQuery.exprName"}),", rather than a ",(0,i.jsx)(n.code,{children:"this"})," identifier (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17059",children:"#17059"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'function fn() {\n  // `typeof this` is a TSTypeQuery\n  var self: typeof this\n}\n\n// AST in Babel 7\n{\n  type: "TSTypeQuery",\n  exprName: { type: "Identifier", name: "this" }\n}\n\n// AST in Babel 8\n{\n  type: "TSTypeQuery",\n  exprName: { type: "ThisExpression" }\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Parse exporting ",(0,i.jsx)(n.code,{children:"TSImportEqualsDeclaration"})," as an ",(0,i.jsx)(n.code,{children:"ExportNamedDeclaration"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17073",children:"#17073"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Note that the ",(0,i.jsx)(n.code,{children:"isExport"})," field is also removed. For any ",(0,i.jsx)(n.code,{children:"TSImportEqualsDeclaration"})," NodePath ",(0,i.jsx)(n.code,{children:"p"}),", use ",(0,i.jsx)(n.code,{children:"p.parentPath.isExportNamedDeclaration()"})," to detect whether it is following an ",(0,i.jsx)(n.code,{children:"export"})," keyword."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'export import foo = require("foo")\n\n// AST in Babel 7\n{\n  type: "TSImportEqualsDeclaration",\n  importKind: "value"\n  isExport: true,\n  id: Identifier("foo"),\n  moduleReference: {\n    type: "TSExternalModuleReference",\n    expression: StringLiteral("foo")\n  }\n}\n\n// AST in Babel 8\n{\n  type: "ExportNamedDeclaration",\n  declaration: {\n    type: "TSImportEqualsDeclaration",\n    importKind: "value"\n    id: Identifier("foo"),\n    moduleReference: {\n      type: "TSExternalModuleReference",\n      expression: StringLiteral("foo")\n    }\n  },\n  specifiers: []\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Rename ",(0,i.jsx)(n.code,{children:"parameters"})," to ",(0,i.jsx)(n.code,{children:"params"})," and ",(0,i.jsx)(n.code,{children:"typeAnnotation"})," to ",(0,i.jsx)(n.code,{children:"returnType"})," in ",(0,i.jsx)(n.code,{children:"TSCallSignatureDeclaration"}),", ",(0,i.jsx)(n.code,{children:"TSConstructSignatureDeclaration"}),", ",(0,i.jsx)(n.code,{children:"TSFunctionType"}),", ",(0,i.jsx)(n.code,{children:"TSConstructorType"})," and ",(0,i.jsx)(n.code,{children:"TSMethodSignature"}),"\n(",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/issues/9231",children:"#9231"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/13709",children:"#13709"}),")"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"TSCallSignatureDeclaration"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'interface Foo {\n  (x: number): string;\n}\n\n// AST in Babel 7\n{\n  type: "TSCallSignatureDeclaration",\n  parameters: [\n    { type: "Identifier", name: "x", typeAnnotation: { type: "TSNumberKeyword" } }\n  ],\n  typeAnnotation: {\n    type: "TSTypeAnnotation",\n    typeAnnotation: { type: "TSStringKeyword" }\n  }\n}\n\n// AST in Babel 8\n{\n  type: "TSCallSignatureDeclaration",\n  params: [\n    { type: "Identifier", name: "x", typeAnnotation: { type: "TSNumberKeyword" } }\n  ],\n  retutnType: {\n    type: "TSTypeAnnotation",\n    typeAnnotation: { type: "TSStringKeyword" }\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"TSConstructSignatureDeclaration"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'interface Foo {\n  new (x: number): string;\n}\n\n// AST in Babel 7\n{\n  type: "TSConstructSignatureDeclaration",\n  parameters: [\n    { type: "Identifier", name: "x", typeAnnotation: { type: "TSNumberKeyword" } }\n  ],\n  typeAnnotation: {\n    type: "TSTypeAnnotation",\n    typeAnnotation: { type: "TSStringKeyword" }\n  }\n}\n\n// AST in Babel 8\n{\n  type: "TSConstructSignatureDeclaration",\n  params: [\n    { type: "Identifier", name: "x", typeAnnotation: { type: "TSNumberKeyword" } }\n  ],\n  retutnType: {\n    type: "TSTypeAnnotation",\n    typeAnnotation: { type: "TSStringKeyword" }\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"TSMethodSignature"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'interface Foo {\n  foo(x: number): string;\n}\n\n// AST in Babel 7\n{\n  type: "TSMethodSignature",\n  key: Identifier("foo"),\n  parameters: [\n    { type: "Identifier", name: "x", typeAnnotation: { type: "TSNumberKeyword" } }\n  ],\n  typeAnnotation: {\n    type: "TSTypeAnnotation",\n    typeAnnotation: { type: "TSStringKeyword" }\n  }\n}\n\n// AST in Babel 8\n{\n  type: "TSMethodSignature",\n  key: Identifier("foo"),\n  params: [\n    { type: "Identifier", name: "x", typeAnnotation: { type: "TSNumberKeyword" } }\n  ],\n  retutnType: {\n    type: "TSTypeAnnotation",\n    typeAnnotation: { type: "TSStringKeyword" }\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"TSFunctionType"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'type Bar = (x: number) => string;\n\n// AST in Babel 7\n{\n  type: "TSFunctionType",\n  parameters: [\n    { type: "Identifier", name: "x", typeAnnotation: { type: "TSNumberKeyword" } }\n  ],\n  typeAnnotation: {\n    type: "TSTypeAnnotation",\n    typeAnnotation: { type: "TSStringKeyword" }\n  }\n}\n\n// AST in Babel 8\n{\n  type: "TSFunctionType",\n  params: [\n    { type: "Identifier", name: "x", typeAnnotation: { type: "TSNumberKeyword" } }\n  ],\n  retutnType: {\n    type: "TSTypeAnnotation",\n    typeAnnotation: { type: "TSStringKeyword" }\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"TSConstructorType"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'type Bar = (x: number) => string;\n\n// AST in Babel 7\n{\n  type: "TSConstructorType",\n  parameters: [\n    { type: "Identifier", name: "x", typeAnnotation: { type: "TSNumberKeyword" } }\n  ],\n  typeAnnotation: {\n    type: "TSTypeAnnotation",\n    typeAnnotation: { type: "TSStringKeyword" }\n  }\n}\n\n// AST in Babel 8\n{\n  type: "TSConstructorType",\n  params: [\n    { type: "Identifier", name: "x", typeAnnotation: { type: "TSNumberKeyword" } }\n  ],\n  retutnType: {\n    type: "TSTypeAnnotation",\n    typeAnnotation: { type: "TSStringKeyword" }\n  }\n}\n'})})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("a",{name:"ast-typeArguments"})," Rename ",(0,i.jsx)(n.code,{children:"typeParameters"})," to ",(0,i.jsx)(n.code,{children:"typeArguments"})," in ",(0,i.jsx)(n.code,{children:"CallExpression"}),", ",(0,i.jsx)(n.code,{children:"JSXOpeningElement"}),", ",(0,i.jsx)(n.code,{children:"NewExpression"}),", ",(0,i.jsx)(n.code,{children:"OptionalCallExpression"}),", ",(0,i.jsx)(n.code,{children:"TSImportType"}),", ",(0,i.jsx)(n.code,{children:"TSInstantiationExpression"}),", ",(0,i.jsx)(n.code,{children:"TSTypeQuery"})," and  ",(0,i.jsx)(n.code,{children:"TSTypeReference"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/issues/16679",children:"#16679"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17008",children:"#17008"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17012",children:"#17012"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17020",children:"#17020"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17042",children:"#17042"}),")"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"CallExpression"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'fn<string>()\n\n// AST in Babel 7\n{\n  type: "CallExpression",\n  callee: Identifier("fn"),\n  arguments: [],\n  typeParameters: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: "CallExpression",\n  callee: Identifier("fn"),\n  arguments: [],\n  typeArguments: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"JSXOpeningElement"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'<Component<string>/>\n\n// AST in Babel 7\n{\n  type: "JSXOpeningElement",\n  name: JSXIdentifier("Component"),\n  attributes: [],\n  selfClosing: true,\n  typeParameters: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: "JSXOpeningElement",\n  name: JSXIdentifier("Component"),\n  attributes: [],\n  selfClosing: true,\n  typeArguments: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"NewExpression"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'new Component<string>()\n\n// AST in Babel 7\n{\n  type: "NewExpression",\n  callee: Identifier("Component"),\n  arguments: [],\n  typeParameters: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: "NewExpression",\n  callee: Identifier("Component"),\n  arguments: [],\n  typeArguments: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"OptionalCallExpression"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'fn?.<string>()\n\n// AST in Babel 7\n{\n  type: "OptionalCallExpression",\n  callee: Identifier("fn"),\n  arguments: [],\n  optional: true,\n  typeParameters: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: "OptionalCallExpression",\n  callee: Identifier("fn"),\n  arguments: [],\n  optional: true,\n  typeArguments: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"TSImportType"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'var arr: import("./Array")<string>\n\n// AST in Babel 7\n{\n  type: "TSImportType",\n  argument: StringLiteral("./Array"),\n  typeParameters: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: "TSImportType",\n  argument: {\n    type: "TSLiteralType",\n    literal: StringLiteral("./Array")\n  },\n  typeArguments: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"TSInstantiationExpression"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'fn<string>\n\n// AST in Babel 7\n{\n  type: "TSInstantiationExpression",\n  expression: Identifier("fn"),\n  typeParameters: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: "TSInstantiationExpression",\n  expression: Identifier("fn"),\n  typeArguments: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"TSTypeQuery"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'var arr: typeof Array<string>;\n\n// AST in Babel 7\n{\n  type: "TSTypeQuery",\n  exprName: Identifier("Array"),\n  typeParameters: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: "TSTypeQuery",\n  exprName: Identifier("Array"),\n  typeArguments: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"TSTypeReference"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'var arr: Array<string>;\n\n// AST in Babel 7\n{\n  type: "TSTypeReference",\n  typeName: Identifier("Array"),\n  typeParameters: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: "TSTypeReference",\n  typeName: Identifier("Array"),\n  typeArguments: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n'})})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Rename ",(0,i.jsx)(n.code,{children:"superTypeParameters"})," to ",(0,i.jsx)(n.code,{children:"superTypeArguments"})," in ",(0,i.jsx)(n.code,{children:"ClassDeclaration"})," and ",(0,i.jsx)(n.code,{children:"ClassExpression"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/issues/16679",children:"#16679"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16997",children:"#16997"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'class X extends Y<string> {}\n\n// AST in Babel 7\n{\n  type: "ClassDeclaration",\n  id: Identifier("X"),\n  superClass: Identifier("Y"),\n  superTypeParameters: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: "ClassDeclaration",\n  id: Identifier("X"),\n  superClass: Identifier("Y"),\n  superTypeArguments: {\n    type: "TSTypeParameterInstantiation",\n    params: [{\n      type: "TSStringKeyword"\n    }]\n  }\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("a",{name:"ast-TSMappedType"})," Split ",(0,i.jsx)(n.code,{children:"typeParameter"})," of ",(0,i.jsx)(n.code,{children:"TSMappedType"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16733",children:"#16733"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"TSMappedType"})," nodes, the ",(0,i.jsx)(n.code,{children:"typeParameter"})," property is flattened as ",(0,i.jsx)(n.code,{children:"key"})," and ",(0,i.jsx)(n.code,{children:"constraint"})," properties of ",(0,i.jsx)(n.code,{children:"TSMappedType"})," itself."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'let map1: { [P in string]: number; };\n\n// AST in Babel 7\n{\n  type: "TSMappedType",\n  typeParameter: {\n    type: "TypeParameter",\n    name: Identifier("P"),\n    constraint: TSStringKeyword()\n  },\n  typeAnnotation: TSNumberKeyword(),\n}\n\n// AST in Babel 8\n{\n  type: "TSMappedType",\n  key: Identifier("P"),\n  constraint: TSStringKeyword()\n  typeAnnotation: TSNumberKeyword(),\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Split ",(0,i.jsx)(n.code,{children:"TSExpressionWithTypeArguments"})," into ",(0,i.jsx)(n.code,{children:"TSClassImplements"})," and ",(0,i.jsx)(n.code,{children:"TSInterfaceHeritage"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16731",children:"#16731"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The new nodes also use ",(0,i.jsx)(n.code,{children:"typeArguments"})," instead of ",(0,i.jsx)(n.code,{children:"typeParameters"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17017",children:"#17017"}),")."]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"ClassDeclaration"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'class C implements X<T> {}\n\n// AST in Babel 7\n{\n  type: "ClassDeclaration",\n  id: Identifier("C"),\n  implements: [\n    {\n      type: "TSExpressionWithTypeArguments",\n      expression: Identifier("X"),\n      typeParameters: {\n        type: "TSTypeParameterInstantiation",\n        params: [TSTypeReference(Identifier("T"))]\n      }\n    }\n  ],\n  body: ClassBody([]),\n}\n\n// AST in Babel 8\n{\n  type: "ClassDeclaration",\n  id: Identifier("C"),\n  implements: [\n    {\n      type: "TSClassImplements",\n      expression: Identifier("X"),\n      typeArguments: {\n        type: "TSTypeParameterInstantiation",\n        params: [TSTypeReference(Identifier("T"))]\n      }\n    }\n  ],\n  body: ClassBody([]),\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"TSInterfaceDeclaration"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'interface I extends X<T> {}\n\n// AST in Babel 7\n{\n  type: "TSInterfaceDeclaration",\n  id: Identifier("I"),\n  extends: [\n    {\n      type: "TSExpressionWithTypeArguments",\n      expression: Identifier("X"),\n      typeParameters: {\n        type: "TSTypeParameterInstantiation",\n        params: [TSTypeReference(Identifier("T"))]\n      }\n    }\n  ],\n  body: TSInterfaceBody([]),\n}\n\n// AST in Babel 8\n{\n  type: "TSInterfaceDeclaration",\n  id: Identifier("I"),\n  extends: [\n    {\n      type: "TSInterfaceHeritage",\n      expression: Identifier("X"),\n      typeArguments: {\n        type: "TSTypeParameterInstantiation",\n        params: [TSTypeReference(Identifier("T"))]\n      }\n    }\n  ],\n  body: TSInterfaceBody([]),\n}\n'})})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("a",{name:"ast-TSImportType"})," Wrap the ",(0,i.jsx)(n.code,{children:"argument"})," of ",(0,i.jsx)(n.code,{children:"TSImportType"})," within a ",(0,i.jsx)(n.code,{children:"TSLiteralType"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17046",children:"#17046"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"TSImportType"})," also uses ",(0,i.jsx)(n.code,{children:"typeArguments"})," instead of ",(0,i.jsx)(n.code,{children:"typeParameters"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17042",children:"#17042"}),"). See ",(0,i.jsx)(n.a,{href:"#ast-typeArguments",children:"here"})," for an example."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'  var arr: import("./Array")\n\n  // AST in Babel 7\n  {\n    type: "TSImportType",\n    argument: StringLiteral("./Array")\n  }\n\n  // AST in Babel 8\n  {\n    type: "TSImportType",\n    argument: {\n      type: "TSLiteralType",\n      literal: StringLiteral("./Array")\n    }\n  }\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("a",{name:"ast-TSEnumDeclaration"})," Wrap the ",(0,i.jsx)(n.code,{children:"members"})," of ",(0,i.jsx)(n.code,{children:"TSEnumDeclaration"})," within a ",(0,i.jsx)(n.code,{children:"TSEnumBody"})," node (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16979",children:"#16979"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'// Example input\nenum ColorType {\n  Red,\n  Green,\n  Blue,\n}\n\n// AST in Babel 7\n{\n  type: "TSEnumDeclaration",\n  id: Identifier("ColorType")\n  members: [\n    EnumMember("Red"),\n    EnumMember("Green"),\n    EnumMember("Blue")\n  ]\n}\n\n// AST in Babel 8\n{\n  type: "TSEnumDeclaration",\n  id: Identifier("ColorType")\n  body: {\n    type: "TSEnumBody",\n    members: [\n      EnumMember("Red"),\n      EnumMember("Green"),\n      EnumMember("Blue")\n    ]\n  }\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"TSTemplateLiteralType"})," when there is at least one interpolated position"]}),"\n",(0,i.jsxs)(n.p,{children:["Note that the AST is not changed when there is no interpolated position, e.g. ",(0,i.jsx)(n.code,{children:"`foo`"}),"\nas a template literal type is still parsed as a TemplateLiteral node within a TSLiteralType."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:'type World = "world";\n// `hello ${World}` is a template literal type\ntype Greeting = `hello ${World}`;\n\n// AST in Babel 7\n{\n  type: "TSLiteralType",\n  literal: {\n    type: "TemplateLiteral",\n    expressions: [{\n      type: "TSTypeReference",\n      typeName: Identifier("World")\n    }],\n    quasis: [\n      TemplateElement("hello "),\n      TemplateElement("")\n    ]\n  }\n}\n\n// AST in Babel 8\n{\n  type: "TSTemplateLiteralType",\n  types: [{\n    type: "TSTypeReference",\n    typeName: Identifier("World")\n  }],\n  quasis: [\n    TemplateElement("hello "),\n    TemplateElement("")\n  ]\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"TSAbstractMethodDefinition"})," and ",(0,i.jsx)(n.code,{children:"TSPropertyDefinition"})," when both ",(0,i.jsx)(n.code,{children:"estree"})," and ",(0,i.jsx)(n.code,{children:"typescript"})," parser plugins are enabled (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/issues/16679",children:"#16679"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17014",children:"#17014"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": This breaking change is part of the efforts to libraries and ESLint plugins that can work both with ",(0,i.jsx)(n.code,{children:"typescript-eslint"})," and ",(0,i.jsx)(n.code,{children:"@babel/eslint-parser"}),". For most Babel plugin developers you can safely ignore this change as it does not affect the typescript transform and codemod. That said, if you are trying to develop a custom ESLint rule with ",(0,i.jsx)(n.code,{children:"@babel/eslint-parser"}),", this change aligns the Babel AST to the ",(0,i.jsx)(n.code,{children:"typescript-eslint"})," AST."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Don't generate ",(0,i.jsx)(n.code,{children:"TSParenthesizedType"})," unless ",(0,i.jsx)(n.code,{children:"createParenthesizedExpression"})," is enabled(",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/issues/9546",children:"#9546"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/12608",children:"#12608"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="input.ts"',children:"type T = ({});\n\n// Babel 8 with createParenthesizedExpression: true, and Babel 7\nTSParenthesizedType { typeAnnotation: TSTypeLiteral { members: [] } }\n\n// Babel 8 with createParenthesizedExpression: false\nTSTypeLiteral { members: [] }\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": If you need information about parentheses, specify the ",(0,i.jsx)(n.a,{href:"/docs/babel-parser#options",children:(0,i.jsx)(n.code,{children:"createParenthesizedExpression"})})," parser option."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="babel.config.json"',children:'{ "parserOpts": { "createParenthesizedExpression": true } }\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.code,{children:"createParenthesizedExpression"})," is ",(0,i.jsx)(n.code,{children:"false"}),", you can also use ",(0,i.jsx)(n.code,{children:"node.extra.parenthesized"})," to detect whether ",(0,i.jsx)(n.code,{children:"node"})," is wrapped in parentheses."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"api-changes",children:"API Changes"}),"\n",(0,i.jsx)(n.h3,{id:"all-packages",children:"All packages"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Disallow importing internal files (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/14013",children:"#14013"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/14179",children:"#14179"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Use the exported API only. If you are relying on Babel internals, please open an issue and let us know."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"babelcore",children:(0,i.jsx)(n.code,{children:"@babel/core"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-medium-yellow.svg",alt:"medium"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Disallow using ",(0,i.jsx)(n.code,{children:"babel.transform"}),", ",(0,i.jsx)(n.code,{children:"babel.transformFile"}),", ",(0,i.jsx)(n.code,{children:"babel.transformFromAst"}),", ",(0,i.jsx)(n.code,{children:"babel.parse"}),", ",(0,i.jsx)(n.code,{children:"babel.loadOptions"}),", ",(0,i.jsx)(n.code,{children:"babel.loadPartialConfig"})," and ",(0,i.jsx)(n.code,{children:"babel.createConfigItem"})," synchronously (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/11110",children:"#11110"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/12695",children:"#12695"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15869",children:"#15869"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": The APIs above require a callback argument. If you are not providing a callback, please use their sync versions: ",(0,i.jsx)(n.code,{children:"babel.transformSync"}),", ",(0,i.jsx)(n.code,{children:"babel.transformFileSync"}),", ",(0,i.jsx)(n.code,{children:"babel.transformFromAstSync"}),", ",(0,i.jsx)(n.code,{children:"babel.parseSync"}),", ",(0,i.jsx)(n.code,{children:"babel.loadOptionsSync"}),", ",(0,i.jsx)(n.code,{children:"babel.loadPartialConfigSync"})," and ",(0,i.jsx)(n.code,{children:"babel.createConfigItemSync"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"babelgenerator",children:(0,i.jsx)(n.code,{children:"@babel/generator"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"CodeGenerator"})," class (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16126",children:"#16126"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": In Babel 8 the undocumented ",(0,i.jsx)(n.code,{children:"CodeGenerator"})," class has been removed, please use the default exported ",(0,i.jsx)(n.code,{children:"generate"})," function instead."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"- new CodeGenerator(ast).generate()\n+ generate(ast)\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"babeltypes",children:(0,i.jsx)(n.code,{children:"@babel/types"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-medium-yellow.svg",alt:"medium"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Reject invalid identifier names in ",(0,i.jsx)(n.code,{children:"t.identifier"})," builder (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/10917",children:"#10917"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="babel-plugin.js"',children:'// Empty string is an invalid identifier name\n// highlight-error-next-line\nt.identifier("");\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Call ",(0,i.jsx)(n.code,{children:"t.identifier"})," with a valid name."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"Super"})," from the ",(0,i.jsx)(n.code,{children:"Expression"})," alias (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/14750",children:"#14750"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"Super"})," node represents ",(0,i.jsx)(n.code,{children:"super"})," in super call ",(0,i.jsx)(n.code,{children:"super()"})," and super property ",(0,i.jsx)(n.code,{children:"super.foo"}),". As ",(0,i.jsx)(n.code,{children:"super"})," can not be a standalone expression, ",(0,i.jsx)(n.code,{children:"t.isExpression(t.super())"})," will return ",(0,i.jsx)(n.code,{children:"false"})," in Babel 8."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Search usage of the ",(0,i.jsx)(n.code,{children:"t.isExpression"})," and ",(0,i.jsx)(n.code,{children:"t.assertsExpression"})," functions, and of the ",(0,i.jsx)(n.code,{children:"t.Expression"})," type alias: if they need to also accept ",(0,i.jsx)(n.code,{children:"Super"})," nodes, update them accordingly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:'title="my-babel-plugin.js"',children:'// Add `.foo` to an expression\n- if (t.isExpression(path.node)) {\n+ if (t.isExpression(path.node) || t.isSuper(path.node)) {\n  path.replaceWith(\n    t.memberExpression(\n      path.node,\n      t.identifier("foo")\n    ))\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You don't have to update the usage if ",(0,i.jsx)(n.code,{children:"super()"})," and ",(0,i.jsx)(n.code,{children:"super.foo"})," is not involved:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="my-babel-plugin.js"',children:'// define an expression as a computed key of `foo`\nif (t.isExpression(path.node)) {\n  path.replaceWith(\n    t.memberExpression(\n      t.identifier("foo"),\n      // `super` can not be a computed key, so we don\'t update `isExpression`\n      path.node,\n      /* computed */ true\n    ))\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Require an ",(0,i.jsx)(n.code,{children:"Identifier"})," node as the third argument of ",(0,i.jsx)(n.code,{children:"t.tsTypeParameter"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/12829",children:"#12829"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["This is due to the corresponding ",(0,i.jsx)(n.a,{href:"#ast-TSTypeParameter",children:"AST shape change"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Wrap the ",(0,i.jsx)(n.code,{children:"name"})," string within the ",(0,i.jsx)(n.code,{children:"identifier"})," builder"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:'title="my-babel-codemod.js"',children:"  t.tsTypeParameter(\n    /* constraint */ undefined,\n    /* default */ undefined,\n+   t.identifier(\n      name\n+   )\n  )\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Require a ",(0,i.jsx)(n.code,{children:"TSLiteralType"})," node as the first argument of ",(0,i.jsx)(n.code,{children:"t.tsImportType"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/17046",children:"#17046"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["This is due to the corresponding ",(0,i.jsx)(n.a,{href:"#ast-TSImportType",children:"AST shape change"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Wrap the ",(0,i.jsx)(n.code,{children:"argument"})," string literal within the ",(0,i.jsx)(n.code,{children:"tsLiteralType"})," builder"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:'title="my-babel-codemod.js"',children:'  t.tsImportType(\n+   t.tsLiteralType(\n      t.stringLiteral("foo")\n+   )\n  )\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Require a ",(0,i.jsx)(n.code,{children:"TSEnumBody"})," node as the second argument of ",(0,i.jsx)(n.code,{children:"t.tsEnumDeclaration"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16979",children:"#16979"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["This is due to the corresponding ",(0,i.jsx)(n.a,{href:"#ast-TSEnumDeclaration",children:"AST shape change"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Wrap the ",(0,i.jsx)(n.code,{children:"members"})," array within the ",(0,i.jsx)(n.code,{children:"tsEnumBody"})," builder"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:'title="my-babel-codemod.js"',children:'// Create `enum ColorType { Red, Green, Blue }`\nt.tsEnumDeclaration(\n  t.identifier("ColorType"),\n-  [\n+  t.tsEnumBody([\n    t.tsEnumMember(t.identifier("Red")),\n    t.tsEnumMember(t.identifier("Green")),\n    t.tsEnumMember(t.identifier("Blue"))\n-  ],\n+  ]),\n)\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Update the ",(0,i.jsx)(n.code,{children:"t.tsMappedType"})," signature (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16733",children:"#16733"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["This is due to the corresponding ",(0,i.jsx)(n.a,{href:"#ast-TSMappedType",children:"AST shape change"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Babel 7\ndeclare function tsMappedType(\n  typeParameter: TSTypeParameter,\n  typeAnnotation?: TSType,\n  nameType?: TSType\n): TSMappedType\n\n// Babel 8\ndeclare function tsMappedType(\n  key: Identifier,\n  constraint: TSType,\n  nameType?: TSType,\n  typeAnnotation?: TSType\n): TSMappedType\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": See the example below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="my-babel-codemod.ts"',children:'// To create { [P in string as Q]: number }\n\n// Babel 7\nt.tsMappedType(\n  t.tsTypeParameter(t.tsStringKeyword(), undefined, "P"),\n  t.tsNumberKeyword(),\n  t.tsTypeReference(t.identifier("Q"))\n)\n\n// Babel 8\nt.tsMappedType(\n  t.identifier("P"),\n  t.tsStringKeyword(),\n  t.tsTypeReference(t.identifier("Q")),\n  t.tsNumberKeyword()\n)\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"t.jSX*"})," and ",(0,i.jsx)(n.code,{children:"t.tS*"})," builder aliases (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/issues/6989",children:"#6989"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15527",children:"#15527"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Use ",(0,i.jsx)(n.code,{children:"t.jsx*"})," and ",(0,i.jsx)(n.code,{children:"t.ts*"})," instead. For example, replace ",(0,i.jsx)(n.code,{children:'t.jSXIdentifier("foo")'})," with ",(0,i.jsx)(n.code,{children:'t.jsxIdentifier("foo")'}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"selfClosing"})," argument from ",(0,i.jsx)(n.code,{children:"t.jsxElement"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/14464",children:"#14464"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"- t.jsxElement(openingElement, closingElement, children, selfClosing?: boolean)\n+ t.jsxElement(openingElement, closingElement, children)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": The ",(0,i.jsx)(n.code,{children:"selfClosing"})," argument was already not used in the builder. You can safely remove it."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"optional"})," argument from ",(0,i.jsx)(n.code,{children:"t.memberExpression"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/13407",children:"#13407"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"- t.memberExpression(object, property, computed, optional?: boolean)\n+ t.memberExpression(object, property, computed)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": The ",(0,i.jsx)(n.code,{children:"optional"})," argument was already not used in the builder. You can safely remove it."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove the ",(0,i.jsx)(n.code,{children:"Noop"})," node type (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/12361",children:"#12361"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": There is no generic migration path: you should replace it with the actual node that ",(0,i.jsx)(n.code,{children:"Noop"})," is being used as a placeholder for. If you are depending on ",(0,i.jsx)(n.code,{children:"Noop"})," and have no alternative, please open an issue and explain your use case."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Initialize ",(0,i.jsx)(n.code,{children:"indexers"}),", ",(0,i.jsx)(n.code,{children:"callProperties"})," and ",(0,i.jsx)(n.code,{children:"internalSlots"})," in the node ",(0,i.jsx)(n.code,{children:"ObjectTypeAnnotation"})," as an empty array in ",(0,i.jsx)(n.code,{children:"t.objectTypeAnnotation"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/14465",children:"#14465"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["In Babel 7 the builder ",(0,i.jsx)(n.code,{children:"t.objectTypeAnnotation"})," initializes them as ",(0,i.jsx)(n.code,{children:"null"}),", this is inconsistent with how ",(0,i.jsx)(n.code,{children:"@babel/parser"})," will parse the Flow object type annotations. In Babel 8 the new default value ",(0,i.jsx)(n.code,{children:"[]"})," matches the parser behaviour."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Reject negative and NaN/infinite numbers from ",(0,i.jsx)(n.code,{children:"t.numericLiteral"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15802",children:"#15802"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="babel-plugin.js"',children:"// NumericLiterals must be non-negative finite numbers.\nt.numericLiteral(-1);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": To represent a negative number, use ",(0,i.jsx)(n.code,{children:'t.unaryExpression("-", t.numericLiteral(1))'}),". To represent NaN or Infinity, use ",(0,i.jsx)(n.code,{children:'t.identifier("NaN")'}),". To convert a generic numeric value (which could also be negative, NaN, or an inifinity) to the proper AST node, use ",(0,i.jsx)(n.code,{children:"t.valueToNode(num)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"babelparser",children:(0,i.jsx)(n.code,{children:"@babel/parser"})}),"\n",(0,i.jsxs)(n.p,{children:["Other than the changes listed below, ",(0,i.jsx)(n.code,{children:"@babel/parser"})," is affected by all the ",(0,i.jsx)(n.a,{href:"#ast-changes",children:"AST changes"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Align Babel parser error codes between Flow and TypeScript (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/13294",children:"#13294"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"error.code"})," for ",(0,i.jsx)(n.code,{children:"OptionalBindingPattern"})," is renamed as ",(0,i.jsx)(n.code,{children:"PatternIsOptional"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"updateContext"})," field from ",(0,i.jsx)(n.code,{children:"tokens[].type"})," returned from option ",(0,i.jsx)(n.code,{children:"tokens: true "})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/13768",children:"#13768"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="babel-integration.js"',children:'import { parse } from "@babel/parser";\n\nconst { tokens } = parse("a = 42", { tokens: true });\ntokens[0].type;\n// Babel 7\n// { label: "name", updateContext: null, ...other properties }\n// Babel 8\n// { label: "name", ... other properties }\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note that ",(0,i.jsx)(n.code,{children:"tokens[].type"})," is meant to be an opaque object used as an identity for token types, as if it was a symol. Its exact shape is meant to be an internal implementation detail."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Tokenize private names (",(0,i.jsx)(n.code,{children:"#priv"}),") as a single ",(0,i.jsx)(n.code,{children:"privateName"})," token (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/13256",children:"#13256"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="babel-integration.js"',children:'import { parse } from "@babel/parser";\n\nconst { tokens } = parse("class C { #priv }", { tokens: true });\ntokens.filter(t => t.start >= 10 && t.end <= 15) // get tokens for `#priv`\n// Babel 7\n// [\n//  Token (#) { value: "#", start: 10, end: 11 },\n//  Token (name) { value: "priv", start: 11, end: 15 }\n// ]\n// Babel 8\n// [\n//  Token (privateName) { value: "priv", start: 10, end: 15 }\n// ]\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Tokenize template literals as ",(0,i.jsx)(n.code,{children:"templateNonTail"})," and ",(0,i.jsx)(n.code,{children:"templateTail"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/13919",children:"#13919"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="babel-integration.js"',children:'import { parse } from "@babel/parser";\n\nconst { tokens } = parse("`head${x}middle${y}tail`", { tokens: true });\nconsole.log(tokens); // print tokens\n// Babel 7\n// [\n//  Token (`),\n//  Token (template) { value: "head" }, Token (${),\n//  Token (name) { value: "x" }, Token (}),\n//  Token (template) { value: "middle" }, Token (${),\n//  Token (name) { value: "y" }, Token (}),\n//  Token (template) { value: "tail" }\n//  Token (`)\n// ]\n// Babel 8\n// [\n//  Token (templateNonTail) { value: "head" },\n//  Token (name) { value: "x" },\n//  Token (templateNonTail) { value: "middle" },\n//  Token (name) { value: "y" },\n//  Token (templateTail) { value: "tail" }\n// ]\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"extra.shorthand"})," from ",(0,i.jsx)(n.code,{children:"ObjectProperty"})," nodes (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16521",children:"#16521"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Use ",(0,i.jsx)(n.code,{children:"node.shorthand"})," rather than ",(0,i.jsx)(n.code,{children:"node.extra.shorthand"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"babeltraverse",children:(0,i.jsx)(n.code,{children:"@babel/traverse"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-medium-yellow.svg",alt:"medium"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"is"}),", ",(0,i.jsx)(n.code,{children:"isnt"}),", ",(0,i.jsx)(n.code,{children:"has"}),", ",(0,i.jsx)(n.code,{children:"equals"})," methods from ",(0,i.jsx)(n.code,{children:"NodePath"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16655",children:"#16655"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Directly compare properties of ",(0,i.jsx)(n.code,{children:"path.node"})," instead."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:'- functionExpressionPath.equals("id", idNode)\n+ functionExpressionPath.node.id === idNode\n\n- functionExpressionPath.is("id")\n- functionExpressionPath.has("id")\n+ functionExpressionPath.node.id\n\n- functionExpressionPath.has("arguments")\n+ !!functionExpressionPath.node.arguments.length\n\n- functionExpressionPath.isnt("async")\n+ !functionExpressionPath.node.async\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"hoist"}),", ",(0,i.jsx)(n.code,{children:"updateSiblingKeys"}),", ",(0,i.jsx)(n.code,{children:"call"}),", ",(0,i.jsx)(n.code,{children:"setScope"}),", ",(0,i.jsx)(n.code,{children:"resync"}),", ",(0,i.jsx)(n.code,{children:"popContext"}),", ",(0,i.jsx)(n.code,{children:"pushContext"}),", ",(0,i.jsx)(n.code,{children:"setup"}),", ",(0,i.jsx)(n.code,{children:"setKey"})," methods from ",(0,i.jsx)(n.code,{children:"NodePath"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16655",children:"#16655"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"These methods are meant to be private so there is no real migration approach. If your plugin / build is broken by this change, feel free to open an issue and tell us how you use these methods and we can see what we can do after Babel 8 is released."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"block"})," argument from ",(0,i.jsx)(n.code,{children:"Scope#rename"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15288",children:"#15288"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"- rename(oldName: string, newName?: string, block?: t.Pattern | t.Scopable)\n+ rename(oldName: string, newName?: string)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Instead of passing a different block to ",(0,i.jsx)(n.code,{children:"scope.rename()"}),", directly call ",(0,i.jsx)(n.code,{children:".rename()"})," on the scope corresponding to that block."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Allow skipped ",(0,i.jsx)(n.code,{children:"NodePath"}),"s to be requeued (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/13291",children:"#13291"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"NodePath#requeue()"})," can requeue a skipped NodePath. This is actually a bugfix, but it causes an infinite loop in the ",(0,i.jsx)(n.a,{href:"https://babeljs.io/docs/babel-plugin-transform-block-scoping#tdz",children:"temporal dead zone"})," implementation of ",(0,i.jsx)(n.code,{children:"@babel/plugin-transform-block-scoping"})," in Babel 7: it may break other plugins as well."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": If you want to preserve the old behavior, you can use ",(0,i.jsx)(n.code,{children:"NodePath#shouldSkip"})," to check whether a NodePath has been skipped before calling ",(0,i.jsx)(n.code,{children:"NodePath#requeue()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"NodePath"})," methods starting with ",(0,i.jsx)(n.code,{children:"_"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/16504",children:"#16504"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"_assertUnremoved\n_call\n_callRemovalHooks\n_containerInsert\n_containerInsertAfter\n_containerInsertBefore\n_getKey\n_getPattern\n_getQueueContexts\n_getTypeAnnotation\n_markRemoved\n_remove\n_removeFromScope\n_replaceWith\n_resolve\n_resyncKey\n_resyncList\n_resyncParent\n_resyncRemoved\n_verifyNodeList\n"})}),"\n",(0,i.jsx)(n.p,{children:"These methods are meant to be private so there is no real migration approach. If your plugin / build is broken by this change, feel free to open an issue and tell us how you use these methods and we can see what we can do after Babel 8 is released."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"babeleslint-plugin",children:(0,i.jsx)(n.code,{children:"@babel/eslint-plugin"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove the ",(0,i.jsx)(n.code,{children:"default"})," property of the exports object (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/14180",children:"#14180"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": This change has no effect if you are using the plugin in your ESLint config. However, if you are extending ",(0,i.jsx)(n.code,{children:"@babel/eslint-plugin"}),", ensure that you obtain exports\nfrom ",(0,i.jsx)(n.code,{children:'require("@babel/eslint-plugin")'})," rather than ",(0,i.jsx)(n.code,{children:'require("@babel/eslint-plugin").default'}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="my-eslint-plugin.cjs"',children:'// Don\'t add `.default` after `require()`\nconst { rules, rulesConfig } = require("@babel/eslint-plugin")\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"babelcompat-data",children:(0,i.jsx)(n.code,{children:"@babel/compat-data"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-medium-yellow.svg",alt:"medium"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Rename stage 4 plugin entries from ",(0,i.jsx)(n.code,{children:"proposal-*"})," to ",(0,i.jsx)(n.code,{children:"transform-*"})," in ",(0,i.jsx)(n.code,{children:"plugins.json"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/14976",children:"#14976"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["This change also affects the ",(0,i.jsx)(n.code,{children:"isRequired"})," function of ",(0,i.jsx)(n.code,{children:"@babel/helper-compilation-targets"}),", which receives plugin names as its first parameter."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": For example, use ",(0,i.jsx)(n.code,{children:"transform-class-properties"})," rather than ",(0,i.jsx)(n.code,{children:"proposal-class-properties"}),". For a complete list of renamed plugin, see ",(0,i.jsx)(n.a,{href:"/docs/v8-migration#package-renames",children:"Packages Renames section of Babel 8 migration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:'title="my-babel-plugin.js"',children:'module.exports = api => {\n  const targets = api.targets();\n  // The targets have native optional chaining support\n  // if `transform-optional-chaining` is _not_ required\n  const optionalChainingSupported = !isRequired(\n-   "proposal-optional-chaining",\n+   "transform-optional-chaining",\n    targets\n  );\n};\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"ios_saf"})," from ",(0,i.jsx)(n.code,{children:"data/native-modules.json"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15068/commits/554225d72d7781356e05b6bbc4ef85f42629d001",children:"#15068"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Use ",(0,i.jsx)(n.code,{children:"ios"})," instead."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"babelhelper-replace-supers",children:(0,i.jsx)(n.code,{children:"@babel/helper-replace-supers"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove named export ",(0,i.jsx)(n.code,{children:"environmentVisitor"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15550",children:"#15550"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Import it from ",(0,i.jsx)(n.a,{href:"/docs/babel-helper-environment-visitor",children:(0,i.jsx)(n.code,{children:"@babel/helper-environment-visitor"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:'- import { environmentVisitor } from "@babel/helper-replace-supers";\n+ import environmentVisitor from `@babel/helper-environment-visitor`;\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove named export ",(0,i.jsx)(n.code,{children:"skipAllButComputedKey"})," (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15550",children:"#15550"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Use ",(0,i.jsx)(n.a,{href:"/docs/babel-helper-environment-visitor#requeuecomputedkeyanddecorators",children:(0,i.jsx)(n.code,{children:"requeueComputedKeyAndDecorators"})})," instead. Find and replace the following import and usage"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="my-babel7-plugin.js"',children:'import { skipAllButComputedKey } from "@babel/helper-replace-supers";\nskipAllButComputedKey(path);\n'})}),"\n",(0,i.jsx)(n.p,{children:"to"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="my-babel8-plugin.js"',children:"import { requeueComputedKeyAndDecorators } from `@babel/helper-environment-visitor`;\npath.skip();\nrequeueComputedKeyAndDecorators(path);\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"babelhelper-simple-access",children:(0,i.jsx)(n.code,{children:"@babel/helper-simple-access"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove the the third parameter ",(0,i.jsx)(n.code,{children:"includeUpdateExpression"})," from the default export (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15550",children:"#15550"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Note that the Babel 8 behavior is the same as the ",(0,i.jsx)(n.em,{children:"default"})," Babel 7 behavior (i.e. ",(0,i.jsx)(n.code,{children:"includeUpdateExpression: true"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"babelhighlight",children:(0,i.jsx)(n.code,{children:"@babel/highlight"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove the ",(0,i.jsx)(n.code,{children:"getChalk"})," function (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15812",children:"https://github.com/babel/babel/pull/15812"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["If you need to use ",(0,i.jsx)(n.code,{children:"chalk"}),", add it to your dependencies."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"plugin-api-changes",children:"Plugin API changes"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-medium-yellow.svg",alt:"medium"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"getModuleName"})," from plugin pass (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/12724",children:"#12724"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Use ",(0,i.jsx)(n.code,{children:".file.getModuleName"})," instead."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:'title="my-babel-plugin.js"',children:'module.exports = {\n  name: "my-babel-plugin",\n  visitor: {\n    Identifier(path, pass) {\n-     const moduleName = pass.getModuleName();\n+     const moduleName = pass.file.getModuleName();\n    }\n  }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/risk%20of%20breakage%3F-low-yellowgreen.svg",alt:"low"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove ",(0,i.jsx)(n.code,{children:"addImport"})," from plugin pass (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15576",children:"#15576"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"This change probably will not affect your plugin as this method is already throwing an error in Babel 7."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Use ",(0,i.jsx)(n.a,{href:"/docs/babel-helper-module-imports#import--named-as-_named--from-source",children:(0,i.jsx)(n.code,{children:"addNamed"})})," or ",(0,i.jsx)(n.a,{href:"/docs/babel-helper-module-imports#import-_default-from-source",children:(0,i.jsx)(n.code,{children:"addDefault"})})," from ",(0,i.jsx)(n.code,{children:"@babel/helper-module-imports"})," instead."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Stop supporting plugin fields as named exports (",(0,i.jsx)(n.a,{href:"https://github.com/babel/babel/pull/15576",children:"#15576"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"For example, the following file is not a valid plugin anymore:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="legacy-babel-plugin.js"',children:'export const name = "legacy-babel-plugin";\nexport const visitor = {\n  Identifier() {}\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration"}),": Find such patterns and use a default export instead, either exporting a plugin object or a factory function."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="my-babel-plugin.cjs"',children:'export default {\n  name: "babel-plugin",\n  visitor: {\n    Identifier() {}\n  }\n}\n'})}),"\n"]}),"\n"]})]})}function p(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},80980:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return a}});var r=t(27378);let i={},s=r.createContext(i);function a(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);