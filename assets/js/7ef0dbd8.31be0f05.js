"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["8866"],{97066:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l}});var s=t(72311),r=t(24246),o=t(80980);let a={layout:"post",title:"7.21.0 Released: Inline RegExp modifiers, TypeScript 5.0, and Decorators updates",authors:"team",date:new Date("2023-02-20T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.21.0 Released"},i=void 0,c={authorsImageUrls:[void 0]},l=[{value:"Highlights",id:"highlights",level:2},{value:"Inline RegExp modifiers",id:"inline-regexp-modifiers",level:3},{value:"Decorators updates",id:"decorators-updates",level:3},{value:"TypeScript 5.0",id:"typescript-50",level:3},{value:"Experimental support for <code>.cts</code> configuration files",id:"experimental-support-for-cts-configuration-files",level:3},{value:"Source maps improvements",id:"source-maps-improvements",level:3}];function d(e){let n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"We just published Babel 7.21.0!"}),"\n",(0,r.jsxs)(n.p,{children:["Babel now supports the ",(0,r.jsx)(n.a,{href:"https://github.com/tc39/proposal-regexp-modifiers",children:"Inline RegExp modifiers"})," proposal, the latest version of the ",(0,r.jsx)(n.a,{href:"https://github.com/tc39/proposal-decorators/",children:"Decorators"})," proposal, and the new ",(0,r.jsx)(n.a,{href:"https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/",children:"TypeScript 5.0"})," syntax."]}),"\n",(0,r.jsxs)(n.p,{children:["You can read the whole changelog ",(0,r.jsx)(n.a,{href:"https://github.com/babel/babel/releases/tag/v7.21.0",children:"on GitHub"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on our ",(0,r.jsx)(n.a,{href:"https://github.com/babel/babel?sponsor=1",children:"Open Collective"})," and, better yet, work with us on the implementation of ",(0,r.jsx)(n.a,{href:"https://github.com/babel/proposals",children:"new ECMAScript proposals"})," directly! As a volunteer-driven project, we rely on the community's support to fund our efforts in supporting the wide range of JavaScript users. Reach out at ",(0,r.jsx)(n.a,{href:"mailto:team@babeljs.io",children:"team@babeljs.io"})," if you'd like to discuss more!"]}),"\n",(0,r.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,r.jsx)(n.h3,{id:"inline-regexp-modifiers",children:"Inline RegExp modifiers"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/tc39/proposal-regexp-modifiers",children:"Inline RegExp modifiers"})," Stage 3 proposal allows you to enable or disable the ",(0,r.jsx)(n.code,{children:"i"}),", ",(0,r.jsx)(n.code,{children:"m"})," and ",(0,r.jsx)(n.code,{children:"s"})," for ",(0,r.jsx)(n.em,{children:"part"})," of a regular expression, without affecting other parts."]}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"(?enableFlags:subPattern)"})," syntax to enable flags, ",(0,r.jsx)(n.code,{children:"(?-disableFlags:subPattern)"})," to disable them, and ",(0,r.jsx)(n.code,{children:"(?enableFlags-disableFlags:subPattern)"})," to enable some and disable others at the same time. You can think of non-capturing group ",(0,r.jsx)(n.code,{children:"(?:subPattern)"})," as a special case where no flags are modified."]}),"\n",(0,r.jsxs)(n.p,{children:["As an example, ",(0,r.jsx)(n.code,{children:"/(?i:a)a/"})," matches an ",(0,r.jsx)(n.code,{children:"a"})," ignoring its case, followed by a lowercase ",(0,r.jsx)(n.code,{children:"a"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'/(?i:a)a/.test("aa"); // true\n/(?i:a)a/.test("Aa"); // true\n/(?i:a)a/.test("aA"); // false\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"/a(?-i:a)/i"})," is equivalent: the regular expression is case insensitive, expect for the second ",(0,r.jsx)(n.code,{children:"a"})," which must be lowercase."]}),"\n",(0,r.jsxs)(n.p,{children:["You can enable this proposal by installing the ",(0,r.jsx)(n.code,{children:"@babel/plugin-proposal-regexp-modifiers"})," package and adding it to your Babel configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="babel.config.json"',children:'{\n  "presets": ["@babel/preset-env"],\n  "plugins": [\n    // Add this!\n    "@babel/plugin-proposal-regexp-modifiers"\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"decorators-updates",children:"Decorators updates"}),"\n",(0,r.jsxs)(n.p,{children:["TC39, the committee that standardizes JavaScript, ",(0,r.jsx)(n.a,{href:"https://github.com/babel/proposals/issues/86#issuecomment-1414202318",children:"recently approved"})," some changes to the ",(0,r.jsx)(n.a,{href:"https://github.com/tc39/proposal-decorators/",children:"Decorators proposal"})," based on feedback from the TypeScript team."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Decorators on exported classes can now come either before or after the ",(0,r.jsx)(n.code,{children:"export"})," keyword, but not in both places at the same time:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"// valid\n@dec\nexport class A {}\n\n// valid\nexport @dec class B {}\n\n// invalid\n@dec\nexport @dec class C {}\n"})}),"\n",'This relaxed restriction aims at simplifying migration from the "',(0,r.jsx)(n.em,{children:"legacy"}),'" decorators version, by reducing the syntactic differences.']}),"\n",(0,r.jsxs)(n.li,{children:["The methods on the ",(0,r.jsx)(n.code,{children:"context.access"})," object provided to decorators expect the target object as their first parameter, rather than as their ",(0,r.jsx)(n.code,{children:"this"})," receiver:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"let accessX;\n\nfunction dec(desc, context) {\n  accessX = context.access;\n  return dec;\n}\n\nclass A {\n  @dec #x = 1;\n}\n\n// old semantics\naccessX.get.call(new A) === 1;\n\n// new semantics\naccessX.get(new A) === 1;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"context.access"})," has a new ",(0,r.jsx)(n.code,{children:".has"})," method, to check if an object has the corresponding element. Continuing the example above:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"// #x in new A\naccessX.has(new A) === true;\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can enable this new version of the decorators proposal by setting the ",(0,r.jsx)(n.code,{children:"version"})," option of ",(0,r.jsx)(n.code,{children:'"@babel/plugin-proposal-decorators"'})," to ",(0,r.jsx)(n.code,{children:'"2023-01"'}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="babel.config.json"',children:'{\n  "presets": ["@babel/preset-env"],\n  "plugins": [\n    ["@babel/plugin-proposal-decorators", { "version": "2023-01" }]\n  ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can also try the new decorators proposal in the online Babel ",(0,r.jsx)(n.a,{href:"https://babeljs.io/repl#?code_lz=GYVwdgxgLglg9mABAGzgczQUwE4AoCUiA3gFCKID0FiA8gA6ZICecI2A5AM6IBG2cAd045EEBJzjJMAGjKVqAQzAATRIwU8piAEQBRAG4LkIBVEzbEMJFAAWmRJxjLMPBdgCEcsWAlSAdKhouG5oIAC2jFCc-ADcJAC-JCQQyAqc3ACCxHIAAoFY2HIRtnDKBMSJ8UA&presets=stage-3&version=7.21.0",children:"REPL"}),', enabling the "Stage 3" (or lower) preset in the sidebar and choosing the ',(0,r.jsx)(n.code,{children:"2023-01"})," decorators version."]}),"\n",(0,r.jsx)(n.h3,{id:"typescript-50",children:"TypeScript 5.0"}),"\n",(0,r.jsx)(n.p,{children:"TypeScript 5.0, currently released as a beta prerelease, introduces two new syntactic features:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"const"})," modifiers for type parameters","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="TypeScript"',children:'function getName<const T extends { name: string }>(user: T): T["name"] {\n    return user.name;\n}\n\nlet name = getName({ name: "Babel" });\n//  ^? inferred type: "Babel", instead of just string.\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"export type *"})," declarations","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="TypeScript"',children:'export type * from "./mod";\nexport type * as ns from "./mod";\n'})}),"\n","Babel relies on this new syntax to safely remove the re-",(0,r.jsx)(n.code,{children:"export"})," declaration while compiling from TypeScript to JavaScript."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Additionally, TypeScript 5.0 introduces support for the standard Decorators proposal, that you can enable in Babel using ",(0,r.jsx)(n.code,{children:"@babel/plugin-proposal-decorators"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can read more about the new TypeScript features in their ",(0,r.jsx)(n.a,{href:"https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-beta/",children:"release post"}),"!"]}),"\n",(0,r.jsxs)(n.h3,{id:"experimental-support-for-cts-configuration-files",children:["Experimental support for ",(0,r.jsx)(n.code,{children:".cts"})," configuration files"]}),"\n",(0,r.jsxs)(n.p,{children:["If you installed ",(0,r.jsx)(n.code,{children:"@babel/preset-typescript"}),", or if you are running Babel using ",(0,r.jsx)(n.code,{children:"ts-node"}),", you can now use ",(0,r.jsx)(n.code,{children:"babel.config.cts"})," as a Babel configuration file written in TypeScript and CommonJS. You can read more about this in the ",(0,r.jsx)(n.a,{href:"https://babeljs.io/docs/config-files#supported-file-extensions",children:"documentation"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It's not possible yet to use ",(0,r.jsx)(n.code,{children:"babel.config.ts"})," and ",(0,r.jsx)(n.code,{children:"babel.config.mts"})," files, pending stabilization of the ",(0,r.jsx)(n.a,{href:"https://nodejs.org/api/esm.html#loaders",children:"Node.js ESM loader"})," API."]}),"\n",(0,r.jsx)(n.h3,{id:"source-maps-improvements",children:"Source maps improvements"}),"\n",(0,r.jsxs)(n.p,{children:["Source maps generated by Babel now support ",(0,r.jsx)(n.a,{href:"https://developer.chrome.com/blog/devtools-modern-web-debugging/#friendly-call-frames",children:"Friendly Call Frames"}),", to show better names for trasformed functions in devtools."]}),"\n",(0,r.jsxs)(n.p,{children:["Additionally, ",(0,r.jsx)(n.code,{children:"@babel/generator"})," now accepts input source maps generated from other tools in the build pipeline: this allows to properly merge source maps even when using ",(0,r.jsx)(n.code,{children:"@babel/generator"})," directly without ",(0,r.jsx)(n.code,{children:"@babel/core"}),", and improves the general performance of source map merging in when using Babel."]})]})}function p(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},80980:function(e,n,t){t.d(n,{Z:function(){return i},a:function(){return a}});var s=t(27378);let r={},o=s.createContext(r);function a(e){let n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},72311:function(e){e.exports=JSON.parse('{"permalink":"/blog/2023/02/20/7.21.0","source":"@site/blog/2023-02-20-7.21.0.md","title":"7.21.0 Released: Inline RegExp modifiers, TypeScript 5.0, and Decorators updates","description":"We just published Babel 7.21.0!","date":"2023-02-20T00:00:00.000Z","tags":[],"readingTime":3.785,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs","email":"team@babeljs.io","key":"team","page":null}],"frontMatter":{"layout":"post","title":"7.21.0 Released: Inline RegExp modifiers, TypeScript 5.0, and Decorators updates","authors":"team","date":"2023-02-20T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.21.0 Released"},"unlisted":false,"prevItem":{"title":"7.22.0 Released: Explicit Resource Management support and Import Attributes parsing","permalink":"/blog/2023/05/26/7.22.0"},"nextItem":{"title":"7.20.0 Released: Deno target and TypeScript 4.9","permalink":"/blog/2022/10/27/7.20.0"}}')}}]);