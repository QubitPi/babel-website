"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["6346"],{10609:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return a},metadata:function(){return o},toc:function(){return c}});var o=r(16658),s=r(85893),n=r(50065);let a={layout:"post",title:"7.19.0 Released: Stage 3 decorators and more RegExp features!",authors:"team",date:new Date("2022-09-05T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.19.0 Released"},i=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Highlights",id:"highlights",level:2},{value:"New default values",id:"new-default-values",level:3},{value:"Stage 3 decorators (#14836)",id:"stage-3-decorators-14836",level:3},{value:"RegExp duplicate named capturing groups (#14805)",id:"regexp-duplicate-named-capturing-groups-14805",level:3}];function d(e){let t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"We just published Babel 7.19.0!"}),"\n",(0,s.jsxs)(t.p,{children:["This release updates our implementation of the ",(0,s.jsx)(t.a,{href:"https://github.com/tc39/proposal-decorators",children:"decorators proposal"}),", which reached Stage 3 in March. It also includes support for the new ",(0,s.jsx)(t.a,{href:"https://github.com/tc39/proposal-duplicate-named-capturing-groups",children:"duplicate named capturing groups proposal"})," for regular expressions."]}),"\n",(0,s.jsxs)(t.p,{children:["You can read the whole changelog ",(0,s.jsx)(t.a,{href:"https://github.com/babel/babel/releases/tag/v7.19.0",children:"on GitHub"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on our ",(0,s.jsx)(t.a,{href:"https://github.com/babel/babel?sponsor=1",children:"Open Collective"})," and, better yet, work with us on the implementation of ",(0,s.jsx)(t.a,{href:"https://github.com/babel/proposals",children:"new ECMAScript proposals"})," directly! As a volunteer-driven project, we rely on the community's support to fund our efforts in supporting the wide range of JavaScript users. Reach out at ",(0,s.jsx)(t.a,{href:"mailto:team@babeljs.io",children:"team@babeljs.io"})," if you'd like to discuss more!"]}),"\n",(0,s.jsx)(t.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(t.h3,{id:"new-default-values",children:"New default values"}),"\n",(0,s.jsxs)(t.p,{children:["Given the stabilization of the ",(0,s.jsx)(t.a,{href:"https://github.com/tc39/proposal-decorators",children:"decorators"})," and ",(0,s.jsx)(t.a,{href:"https://github.com/tc39/proposal-record-tuple",children:"Record and Tuple"})," proposal, we set some default values for their ",(0,s.jsx)(t.a,{href:"https://babeljs.io/docs/en/babel-parser#plugins-options",children:"parser plugin"})," options:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"decorators"}),"/",(0,s.jsx)(t.code,{children:"@babel/plugin-proposal-decorators"}),"'s ",(0,s.jsx)(t.code,{children:"decoratorsBeforeExport"})," now defaults to ",(0,s.jsx)(t.code,{children:"false"}),";"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"recordAndTuple"}),"/",(0,s.jsx)(t.code,{children:"@babel/plugin-proposal-record-and-tuple"}),"'s ",(0,s.jsx)(t.code,{children:"syntaxType"})," option now defaults to ",(0,s.jsx)(t.code,{children:"hash"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"These options will be removed in Babel 8."}),"\n",(0,s.jsxs)(t.h3,{id:"stage-3-decorators-14836",children:["Stage 3 decorators (",(0,s.jsx)(t.a,{href:"https://github.com/babel/babel/pull/14836",children:"#14836"}),")"]}),"\n",(0,s.jsxs)(t.p,{children:["The decorators proposal was promoted to Stage 3 with some minor but observable changes. You can enable the new version using the ",(0,s.jsx)(t.code,{children:'"version": "2022-03"'})," option of ",(0,s.jsx)(t.code,{children:"@babel/plugin-proposal-decorators"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="babel.config.json"',children:'{\n  "plugins": [\n    ["@babel/plugin-proposal-decorators", {\n        "version": "2022-03"\n    }]\n  ]\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you are migrating from the ",(0,s.jsx)(t.code,{children:"2021-12"})," version, the following breaking changes might affect you:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["the ",(0,s.jsx)(t.code,{children:"initialize"})," method of the object returned by accessor decorators has been renamed to ",(0,s.jsx)(t.code,{children:"init"}),";"]}),"\n",(0,s.jsxs)(t.li,{children:["the ",(0,s.jsx)(t.code,{children:"isPrivate"})," and ",(0,s.jsx)(t.code,{children:"isStatic"})," properties of the ",(0,s.jsx)(t.code,{children:"context"})," parameter received by the decorators (the second one) have been renamed to ",(0,s.jsx)(t.code,{children:"private"})," and ",(0,s.jsx)(t.code,{children:"static"}),";"]}),"\n",(0,s.jsxs)(t.li,{children:["the ",(0,s.jsx)(t.code,{children:"context"})," parameter now always has an ",(0,s.jsx)(t.code,{children:"access"})," property, regardless of the decorated element type;"]}),"\n",(0,s.jsxs)(t.li,{children:["support for metadata (",(0,s.jsx)(t.code,{children:"getMetadata"}),"/",(0,s.jsx)(t.code,{children:"setMetadata"}),") has been removed and ",(0,s.jsx)(t.a,{href:"https://github.com/tc39/proposal-decorator-metadata",children:"postponed to a future proposal"}),";"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"@(expression)()"}),"-style decorators are disallowed, and you must use ",(0,s.jsx)(t.code,{children:"@(expression())"}),";"]}),"\n",(0,s.jsxs)(t.li,{children:["decorators are applied in the following order, instead of in a single pass:","\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"static method decorators"}),"\n",(0,s.jsx)(t.li,{children:"proto method decorators"}),"\n",(0,s.jsx)(t.li,{children:"static field decorators"}),"\n",(0,s.jsx)(t.li,{children:"instance field decorators"}),"\n",(0,s.jsx)(t.li,{children:"class decorators."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["If you are migrating from an older version of the proposal, we suggest reading ",(0,s.jsx)(t.a,{href:"https://github.com/tc39/proposal-decorators",children:"the full README"}),". \uD83D\uDE09"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\uD83D\uDCA1 TypeScript ",(0,s.jsx)(t.a,{href:"https://github.com/microsoft/TypeScript/issues/48885",children:"plans to implement"})," this version of the proposal. After almost a decade, it will be possible to write decorators without worrying if they will be compiled by Babel or tsc!"]}),"\n"]}),"\n",(0,s.jsxs)(t.h3,{id:"regexp-duplicate-named-capturing-groups-14805",children:["RegExp duplicate named capturing groups (",(0,s.jsx)(t.a,{href:"https://github.com/babel/babel/pull/14805",children:"#14805"}),")"]}),"\n",(0,s.jsxs)(t.p,{children:["Babel now supports the ",(0,s.jsx)(t.a,{href:"https://github.com/tc39/proposal-duplicate-named-capturing-groups/",children:"RegExp duplicate named capturing groups"})," proposal, which allows re-using the same group name in alternative RegExp branches:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const dateRE = /(?<year>\\d\\d\\d\\d)-(?<month>\\d\\d)|(?<month>\\d\\d)-(?<year>\\d\\d)/;\n\nconsole.log("2022-12".match(dateRE).groups); // { year: "2022", month: "12" }\nconsole.log("12-2022".match(dateRE).groups); // { year: "2022", month: "12" }\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You can enable this proposal using the ",(0,s.jsx)(t.code,{children:"@babel/plugin-proposal-duplicate-named-capturing-groups-regex"})," plugin:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="babel.config.json"',children:'{\n  "plugins": ["@babel/proposal-duplicate-named-capturing-groups-regex"]\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Babel relies on different third-party packages to transform regular expressions: this is possible thanks to the maintainers of ",(0,s.jsx)(t.a,{href:"https://github.com/jviereck/regjsparser/",children:"regjsparser"}),", ",(0,s.jsx)(t.a,{href:"http://github.com/benjamn/regjsgen",children:"regjsgen"})," and ",(0,s.jsx)(t.a,{href:"https://github.com/mathiasbynens/regexpu-core/",children:"regexpu-core"})," who took time to review our pull requests!"]})]})}function h(e={}){let{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},50065:function(e,t,r){r.d(t,{Z:function(){return i},a:function(){return a}});var o=r(67294);let s={},n=o.createContext(s);function a(e){let t=o.useContext(n);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(n.Provider,{value:t},e.children)}},16658:function(e){e.exports=JSON.parse('{"permalink":"/blog/2022/09/05/7.19.0","source":"@site/blog/2022-09-05-7.19.0.md","title":"7.19.0 Released: Stage 3 decorators and more RegExp features!","description":"We just published Babel 7.19.0!","date":"2022-09-05T00:00:00.000Z","tags":[],"readingTime":2.45,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs","email":"team@babeljs.io","key":"team","page":null}],"frontMatter":{"layout":"post","title":"7.19.0 Released: Stage 3 decorators and more RegExp features!","authors":"team","date":"2022-09-05T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.19.0 Released"},"unlisted":false,"prevItem":{"title":"7.20.0 Released: Deno target and TypeScript 4.9","permalink":"/blog/2022/10/27/7.20.0"},"nextItem":{"title":"7.18.0 Released: Destructuring private elements and TypeScript 4.7","permalink":"/blog/2022/05/19/7.18.0"}}')}}]);