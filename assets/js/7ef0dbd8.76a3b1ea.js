"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7147],{35318:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return b}});var n=a(27378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(a),d=r,b=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return a?n.createElement(b,i(i({ref:t},c),{},{components:a})):n.createElement(b,i({ref:t},c))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},31918:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return m}});var n=a(25773),r=a(30808),o=(a(27378),a(35318)),i=["components"],p={layout:"post",title:"7.21.0 Released: Inline RegExp modifiers, TypeScript 5.0, and Decorators updates",author:"Babel Team",authorURL:"https://twitter.com/babeljs",date:new Date("2023-02-20T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.21.0 Released"},s=void 0,l={permalink:"/babel-website/blog/2023/02/20/7.21.0",source:"@site/blog/2023-02-20-7.21.0.md",title:"7.21.0 Released: Inline RegExp modifiers, TypeScript 5.0, and Decorators updates",description:"We just published Babel 7.21.0!",date:"2023-02-20T00:00:00.000Z",formattedDate:"February 20, 2023",tags:[],readingTime:3.785,hasTruncateMarker:!0,authors:[{name:"Babel Team",url:"https://twitter.com/babeljs"}],frontMatter:{layout:"post",title:"7.21.0 Released: Inline RegExp modifiers, TypeScript 5.0, and Decorators updates",author:"Babel Team",authorURL:"https://twitter.com/babeljs",date:"2023-02-20T00:00:00.000Z",categories:"announcements",share_text:"Babel 7.21.0 Released"},nextItem:{title:"7.20.0 Released: Deno target and TypeScript 4.9",permalink:"/babel-website/blog/2022/10/27/7.20.0"}},c={authorsImageUrls:[void 0]},m=[{value:"Highlights",id:"highlights",level:2},{value:"Inline RegExp modifiers",id:"inline-regexp-modifiers",level:3},{value:"Decorators updates",id:"decorators-updates",level:3},{value:"TypeScript 5.0",id:"typescript-50",level:3},{value:"Experimental support for <code>.cts</code> configuration files",id:"experimental-support-for-cts-configuration-files",level:3},{value:"Source maps improvements",id:"source-maps-improvements",level:3}],u={toc:m};function d(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We just published Babel 7.21.0!"),(0,o.kt)("p",null,"Babel now supports the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-regexp-modifiers"},"Inline RegExp modifiers")," proposal, the latest version of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-decorators/"},"Decorators")," proposal, and the new ",(0,o.kt)("a",{parentName:"p",href:"https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/"},"TypeScript 5.0")," syntax."),(0,o.kt)("p",null,"You can read the whole changelog ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/releases/tag/v7.21.0"},"on GitHub"),"."),(0,o.kt)("p",null,"If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/babel?sponsor=1"},"Open Collective")," and, better yet, work with us on the implementation of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/proposals"},"new ECMAScript proposals")," directly! As a volunteer-driven project, we rely on the community's support to fund our efforts in supporting the wide range of JavaScript users. Reach out at ",(0,o.kt)("a",{parentName:"p",href:"mailto:team@babeljs.io"},"team@babeljs.io")," if you'd like to discuss more!"),(0,o.kt)("h2",{id:"highlights"},"Highlights"),(0,o.kt)("h3",{id:"inline-regexp-modifiers"},"Inline RegExp modifiers"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-regexp-modifiers"},"Inline RegExp modifiers")," Stage 3 proposal allows you to enable or disable the ",(0,o.kt)("inlineCode",{parentName:"p"},"i"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"m")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," for ",(0,o.kt)("em",{parentName:"p"},"part")," of a regular expression, without affecting other parts."),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"(?enableFlags:subPattern)")," syntax to enable flags, ",(0,o.kt)("inlineCode",{parentName:"p"},"(?-disableFlags:subPattern)")," to disable them, and ",(0,o.kt)("inlineCode",{parentName:"p"},"(?enableFlags-disableFlags:subPattern)")," to enable some and disable others at the same time. You can think of non-capturing group ",(0,o.kt)("inlineCode",{parentName:"p"},"(?:subPattern)")," as a special case where no flags are modified."),(0,o.kt)("p",null,"As an example, ",(0,o.kt)("inlineCode",{parentName:"p"},"/(?i:a)a/")," matches an ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," ignoring its case, followed by a lowercase ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'/(?i:a)a/.test("aa"); // true\n/(?i:a)a/.test("Aa"); // true\n/(?i:a)a/.test("aA"); // false\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"/a(?-i:a)/i")," is equivalent: the regular expression is case insensitive, expect for the second ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," which must be lowercase."),(0,o.kt)("p",null,"You can enable this proposal by installing the ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-proposal-regexp-modifiers")," package and adding it to your Babel configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "presets": ["@babel/preset-env"],\n  "plugins": [\n    // Add this!\n    "@babel/plugin-proposal-regexp-modifiers"\n  ]\n}\n')),(0,o.kt)("h3",{id:"decorators-updates"},"Decorators updates"),(0,o.kt)("p",null,"TC39, the committee that standardizes JavaScript, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/proposals/issues/86#issuecomment-1414202318"},"recently approved")," some changes to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-decorators/"},"Decorators proposal")," based on feedback from the TypeScript team."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Decorators on exported classes can now come either before or after the ",(0,o.kt)("inlineCode",{parentName:"p"},"export")," keyword, but not in both places at the same time:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"// valid\n@dec\nexport class A {}\n\n// valid\nexport @dec class B {}\n\n// invalid\n@dec\nexport @dec class C {}\n")),(0,o.kt)("p",{parentName:"li"},'This relaxed restriction aims at simplifying migration from the "',(0,o.kt)("em",{parentName:"p"},"legacy"),'" decorators version, by reducing the syntactic differences.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The methods on the ",(0,o.kt)("inlineCode",{parentName:"p"},"context.access")," object provided to decorators expect the target object as their first parameter, rather than as their ",(0,o.kt)("inlineCode",{parentName:"p"},"this")," receiver:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"let accessX;\n\nfunction dec(desc, context) {\n  accessX = context.access;\n  return dec;\n}\n\nclass A {\n  @dec #x = 1;\n}\n\n// old semantics\naccessX.get.call(new A) === 1;\n\n// new semantics\naccessX.get(new A) === 1;\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"context.access")," has a new ",(0,o.kt)("inlineCode",{parentName:"p"},".has")," method, to check if an object has the corresponding element. Continuing the example above:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"// #x in new A\naccessX.has(new A) === true;\n")))),(0,o.kt)("p",null,"You can enable this new version of the decorators proposal by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"version")," option of ",(0,o.kt)("inlineCode",{parentName:"p"},'"@babel/plugin-proposal-decorators"')," to ",(0,o.kt)("inlineCode",{parentName:"p"},'"2023-01"'),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "presets": ["@babel/preset-env"],\n  "plugins": [\n    ["@babel/plugin-proposal-decorators", { "version": "2023-01" }]\n  ]\n}\n')),(0,o.kt)("p",null,"You can also try the new decorators proposal in the online Babel ",(0,o.kt)("a",{parentName:"p",href:"https://babeljs.io/repl#?code_lz=GYVwdgxgLglg9mABAGzgczQUwE4AoCUiA3gFCKID0FiA8gA6ZICecI2A5AM6IBG2cAd045EEBJzjJMAGjKVqAQzAATRIwU8piAEQBRAG4LkIBVEzbEMJFAAWmRJxjLMPBdgCEcsWAlSAdKhouG5oIAC2jFCc-ADcJAC-JCQQyAqc3ACCxHIAAoFY2HIRtnDKBMSJ8UA&presets=stage-3&version=7.21.0"},"REPL"),', enabling the "Stage 3" (or lower) preset in the sidebar and choosing the ',(0,o.kt)("inlineCode",{parentName:"p"},"2023-01")," decorators version."),(0,o.kt)("h3",{id:"typescript-50"},"TypeScript 5.0"),(0,o.kt)("p",null,"TypeScript 5.0, currently released as a beta prerelease, introduces two new syntactic features:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"const")," modifiers for type parameters"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="TypeScript"',title:'"TypeScript"'},'function getName<const T extends { name: string }>(user: T): T["name"] {\n    return user.name;\n}\n\nlet name = getName({ name: "Babel" });\n//  ^? inferred type: "Babel", instead of just string.\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"export type *")," declarations"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="TypeScript"',title:'"TypeScript"'},'export type * from "./mod";\nexport type * as ns from "./mod";\n')),(0,o.kt)("p",{parentName:"li"},"Babel relies on this new syntax to safely remove the re-",(0,o.kt)("inlineCode",{parentName:"p"},"export")," declaration while compiling from TypeScript to JavaScript."))),(0,o.kt)("p",null,"Additionally, TypeScript 5.0 introduces support for the standard Decorators proposal, that you can enable in Babel using ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-proposal-decorators"),"."),(0,o.kt)("p",null,"You can read more about the new TypeScript features in their ",(0,o.kt)("a",{parentName:"p",href:"https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-beta/"},"release post"),"!"),(0,o.kt)("h3",{id:"experimental-support-for-cts-configuration-files"},"Experimental support for ",(0,o.kt)("inlineCode",{parentName:"h3"},".cts")," configuration files"),(0,o.kt)("p",null,"If you installed ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-typescript"),", or if you are running Babel using ",(0,o.kt)("inlineCode",{parentName:"p"},"ts-node"),", you can now use ",(0,o.kt)("inlineCode",{parentName:"p"},"babel.config.cts")," as a Babel configuration file written in TypeScript and CommonJS. You can read more about this in the ",(0,o.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/config-files#supported-file-extensions"},"documentation"),"."),(0,o.kt)("p",null,"It's not possible yet to use ",(0,o.kt)("inlineCode",{parentName:"p"},"babel.config.ts")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"babel.config.mts")," files, pending stabilization of the ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/esm.html#loaders"},"Node.js ESM loader")," API."),(0,o.kt)("h3",{id:"source-maps-improvements"},"Source maps improvements"),(0,o.kt)("p",null,"Source maps generated by Babel now support ",(0,o.kt)("a",{parentName:"p",href:"https://developer.chrome.com/blog/devtools-modern-web-debugging/#friendly-call-frames"},"Friendly Call Frames"),", to show better names for trasformed functions in devtools."),(0,o.kt)("p",null,"Additionally, ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/generator")," now accepts input source maps generated from other tools in the build pipeline: this allows to properly merge source maps even when using ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/generator")," directly without ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/core"),", and improves the general performance of source map merging in when using Babel."))}d.isMDXComponent=!0}}]);