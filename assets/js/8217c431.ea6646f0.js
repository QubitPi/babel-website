"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["25905"],{33161:function(e,n,s){s.r(n),s.d(n,{default:function(){return h},frontMatter:function(){return o},metadata:function(){return i},assets:function(){return a},toc:function(){return c},contentTitle:function(){return l}});var i=JSON.parse('{"id":"babel-core","title":"@babel/core","description":"All transformations will use your local configuration files.","source":"@site/../docs/core.md","sourceDirName":".","slug":"/babel-core","permalink":"/docs/babel-core","draft":false,"unlisted":false,"editUrl":"https://github.com/babel/website/edit/main/docs/../docs/core.md","tags":[],"version":"current","frontMatter":{"id":"babel-core","title":"@babel/core"},"sidebar":"docs","previous":{"title":"@babel/parser","permalink":"/docs/babel-parser"},"next":{"title":"@babel/generator","permalink":"/docs/babel-generator"}}'),t=s("24246"),r=s("80980");let o={id:"babel-core",title:"@babel/core"},l=void 0,a={},c=[{value:"transform",id:"transform",level:2},{value:"transformSync",id:"transformsync",level:2},{value:"transformAsync",id:"transformasync",level:2},{value:"transformFile",id:"transformfile",level:2},{value:"transformFileSync",id:"transformfilesync",level:2},{value:"transformFileAsync",id:"transformfileasync",level:2},{value:"transformFromAst",id:"transformfromast",level:2},{value:"transformFromAstSync",id:"transformfromastsync",level:2},{value:"transformFromAstAsync",id:"transformfromastasync",level:2},{value:"parse",id:"parse",level:2},{value:"parseSync",id:"parsesync",level:2},{value:"parseAsync",id:"parseasync",level:2},{value:"Advanced APIs",id:"advanced-apis",level:2},{value:"loadOptions",id:"loadoptions",level:3},{value:"loadPartialConfig",id:"loadpartialconfig",level:3},{value:"createConfigItem",id:"createconfigitem",level:3},{value:"<code>ConfigItem</code> type",id:"configitem-type",level:3},{value:"DEFAULT_EXTENSIONS",id:"default_extensions",level:2},{value:"Options",id:"options",level:2}];function d(e){let n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'var babel = require("@babel/core");\nimport { transform } from "@babel/core";\nimport * as babel from "@babel/core";\n'})}),"\n",(0,t.jsxs)(n.p,{children:["All transformations will use your local ",(0,t.jsx)(n.a,{href:"/docs/config-files",children:"configuration files"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"transform",children:"transform"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.transform(code: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object, callback: Function)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Transforms the passed in ",(0,t.jsx)(n.code,{children:"code"}),". Calling a callback with an object with the generated code,\nsource map, and AST."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"babel.transform(code, options, function(err, result) {\n  result; // => { code, map, ast }\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'babel.transform("code();", options, function(err, result) {\n  result.code;\n  result.map;\n  result.ast;\n});\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["In Babel 6, this method was synchronous and ",(0,t.jsx)(n.code,{children:"transformSync"})," did not exist. For backward-compatibility, this function will behave synchronously if no callback is given. If you're starting with Babel 7 and need synchronous behavior, please use ",(0,t.jsx)(n.code,{children:"transformSync"})," since this backward-compatibility will be dropped in Babel 8."]})}),"\n",(0,t.jsx)(n.h2,{id:"transformsync",children:"transformSync"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.transformSync(code: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Transforms the passed in ",(0,t.jsx)(n.code,{children:"code"}),". Returning an object with the generated code,\nsource map, and AST."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"babel.transformSync(code, options); // => { code, map, ast }\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'var result = babel.transformSync("code();", options);\nresult.code;\nresult.map;\nresult.ast;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"transformasync",children:"transformAsync"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.transformAsync(code: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Transforms the passed in ",(0,t.jsx)(n.code,{children:"code"}),". Returning an promise for an object with the\ngenerated code, source map, and AST."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"babel.transformAsync(code, options); // => Promise<{ code, map, ast }>\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'babel.transformAsync("code();", options).then(result => {\n  result.code;\n  result.map;\n  result.ast;\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"transformfile",children:"transformFile"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.transformFile(filename: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object, callback: Function)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Asynchronously transforms the entire contents of a file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"babel.transformFile(filename, options, callback);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'babel.transformFile("filename.js", options, function(err, result) {\n  result; // => { code, map, ast }\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"transformfilesync",children:"transformFileSync"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.transformFileSync(filename: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Synchronous version of ",(0,t.jsx)(n.code,{children:"babel.transformFile"}),". Returns the transformed contents of\nthe ",(0,t.jsx)(n.code,{children:"filename"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"babel.transformFileSync(filename, options); // => { code, map, ast }\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'babel.transformFileSync("filename.js", options).code;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"transformfileasync",children:"transformFileAsync"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.transformFileAsync(filename: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Promise version of ",(0,t.jsx)(n.code,{children:"babel.transformFile"}),". Returns a promise for the transformed\ncontents of the ",(0,t.jsx)(n.code,{children:"filename"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"babel.transformFileAsync(filename, options); // => Promise<{ code, map, ast }>\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'babel.transformFileAsync("filename.js", options).then(result => {\n  result.code;\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"transformfromast",children:"transformFromAst"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.transformFromAst(ast: Object, code?: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object, callback: Function): FileNode | null"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Given an ",(0,t.jsx)(n.a,{href:"https://astexplorer.net/",children:"AST"}),", transform it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'const sourceCode = "if (true) return;";\nconst parsedAst = babel.parseSync(sourceCode, {\n  parserOpts: { allowReturnOutsideFunction: true },\n});\nbabel.transformFromAst(parsedAst, sourceCode, options, function(err, result) {\n  const { code, map, ast } = result;\n});\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["In Babel 6, this method was synchronous and ",(0,t.jsx)(n.code,{children:"transformFromAstSync"})," did not exist. For backward-compatibility, this function will behave synchronously if no callback is given. If you're starting with Babel 7 and need synchronous behavior, please use ",(0,t.jsx)(n.code,{children:"transformFromAstSync"})," since this backward-compatibility will be dropped in Babel 8."]})}),"\n",(0,t.jsx)(n.h2,{id:"transformfromastsync",children:"transformFromAstSync"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.transformFromAstSync(ast: Object, code?: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Given an ",(0,t.jsx)(n.a,{href:"https://astexplorer.net/",children:"AST"}),", transform it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'const sourceCode = "if (true) return;";\nconst parsedAst = babel.parseSync(sourceCode, {\n  parserOpts: { allowReturnOutsideFunction: true },\n});\nconst { code, map, ast } = babel.transformFromAstSync(\n  parsedAst,\n  sourceCode,\n  options\n);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"transformfromastasync",children:"transformFromAstAsync"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.transformFromAstAsync(ast: Object, code?: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Given an ",(0,t.jsx)(n.a,{href:"https://astexplorer.net/",children:"AST"}),", transform it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'const sourceCode = "if (true) return;";\nbabel\n  .parseAsync(sourceCode, { parserOpts: { allowReturnOutsideFunction: true } })\n  .then(parsedAst => {\n    return babel.transformFromAstAsync(parsedAst, sourceCode, options);\n  })\n  .then(({ code, map, ast }) => {\n    // ...\n  });\n'})}),"\n",(0,t.jsx)(n.h2,{id:"parse",children:"parse"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.parse(code: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object, callback: Function)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Given some code, parse it using Babel's standard behavior. Referenced presets and\nplugins will be loaded such that optional syntax plugins are automatically\nenabled."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["In Babel 7's early betas, this method was synchronous and ",(0,t.jsx)(n.code,{children:"parseSync"})," did not\nexist. For backward-compatibility, this function will behave synchronously if\nno callback is given. If you're starting with Babel 7 stable and need\nsynchronous behavior, please use ",(0,t.jsx)(n.code,{children:"parseSync"})," since this backward-compatibility\nwill be dropped in Babel 8."]})}),"\n",(0,t.jsx)(n.h2,{id:"parsesync",children:"parseSync"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.parseSync(code: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns an AST."}),"\n",(0,t.jsx)(n.p,{children:"Given some code, parse it using Babel's standard behavior. Referenced presets and\nplugins will be loaded such that optional syntax plugins are automatically\nenabled."}),"\n",(0,t.jsx)(n.h2,{id:"parseasync",children:"parseAsync"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.parseAsync(code: string, ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns a promise for an AST."}),"\n",(0,t.jsx)(n.p,{children:"Given some code, parse it using Babel's standard behavior. Referenced presets and\nplugins will be loaded such that optional syntax plugins are automatically\nenabled."}),"\n",(0,t.jsx)(n.h2,{id:"advanced-apis",children:"Advanced APIs"}),"\n",(0,t.jsx)(n.p,{children:"Many systems that wrap Babel like to automatically inject plugins and presets,\nor override options. To accomplish this goal, Babel exposes several functions\nthat aid in loading the configuration part-way without transforming."}),"\n",(0,t.jsx)(n.h3,{id:"loadoptions",children:"loadOptions"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.loadOptions(",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Resolve Babel's options fully, resulting in an options object where:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"opts.plugins"})," is a full list of ",(0,t.jsx)(n.code,{children:"Plugin"})," instances."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"opts.presets"})," is empty and all presets are flattened into ",(0,t.jsx)(n.code,{children:"opts"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["It can be safely passed back to Babel. Fields like ",(0,t.jsx)(n.a,{href:"/docs/options#babelrc",children:(0,t.jsx)(n.code,{children:'"babelrc"'})})," have been set to\n",(0,t.jsx)(n.code,{children:"false"})," so that later calls to Babel will not make a second attempt to load\nconfig files."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Plugin"})," instances aren't meant to be manipulated directly, but often\ncallers will serialize this ",(0,t.jsx)(n.code,{children:"opts"})," to JSON to use it as a cache key representing\nthe options Babel has received. Caching on this isn't 100% guaranteed to\ninvalidate properly, but it is the best we have at the moment."]}),"\n",(0,t.jsx)(n.h3,{id:"loadpartialconfig",children:"loadPartialConfig"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["babel.loadPartialConfig(",(0,t.jsx)(n.a,{href:"/docs/options",children:"options?"}),": Object): PartialConfig"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To allow systems to easily manipulate and validate a user's config, this function\nresolves the plugins and presets and proceeds no further. The expectation is\nthat callers will take the config's ",(0,t.jsx)(n.code,{children:".options"}),", manipulate it as they see fit\nand pass it back to Babel again."]}),"\n",(0,t.jsxs)(n.p,{children:["This function accepts one additional option as part of the options object in addition to the standard ",(0,t.jsx)(n.a,{href:"/docs/options",children:"options"}),": ",(0,t.jsx)(n.code,{children:"showIgnoredFiles"}),".\nWhen set to true, ",(0,t.jsx)(n.code,{children:"loadPartialConfig"})," always returns a result when a file is ignored, rather than ",(0,t.jsx)(n.code,{children:"null"}),".\nThis is useful in order to allow the caller to access the list of files that influenced this outcome, e.g.\nfor watch mode. The caller can determine whether a file was ignored based on the returned ",(0,t.jsx)(n.code,{children:"fileHandling"})," property."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"babelrc: string | void"})," - The path of the ",(0,t.jsx)(n.a,{href:"/docs/config-files#file-relative-configuration",children:"file-relative configuration"})," file, if there was one."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"babelignore: string | void"})," - The path of the ",(0,t.jsx)(n.code,{children:".babelignore"})," file, if there was one."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"config: string | void"})," - The path of the ",(0,t.jsx)(n.a,{href:"/docs/config-files#project-wide-configuration",children:"project-wide config file"})," file, if there was one."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options: ValidatedOptions"})," - The partially resolved options, which can be manipulated and passed back to Babel again.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plugins: Array<ConfigItem>"})," - See below."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"presets: Array<ConfigItem>"})," - See below."]}),"\n",(0,t.jsxs)(n.li,{children:["It can be safely passed back to Babel. Options like ",(0,t.jsx)(n.a,{href:"/docs/options#babelrc",children:(0,t.jsx)(n.code,{children:'"babelrc"'})})," have been set\nto false so that later calls to Babel will not make a second attempt to\nload config files."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hasFilesystemConfig(): boolean"})," - Check if the resolved config loaded any settings from the filesystem."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fileHandling"})," - This is set to ",(0,t.jsx)(n.code,{children:'"transpile"'}),", ",(0,t.jsx)(n.code,{children:'"ignored"'}),", or ",(0,t.jsx)(n.code,{children:'"unsupported"'})," to indicate to the caller what to do with this file."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"files"})," - A ",(0,t.jsx)(n.code,{children:"Set"})," of file paths that were read to build the resulting config, including project wide config files, local config files,\nextended config files, ignore files, etc. Useful for implementing watch mode or cache invalidation."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"#configitem-type",children:(0,t.jsx)(n.code,{children:"ConfigItem"})})," instances expose properties to introspect the values, but each\nitem should be treated as immutable. If changes are desired, the item should be\nremoved from the list and replaced with either a normal Babel config value, or\nwith a replacement item created by ",(0,t.jsx)(n.code,{children:"babel.createConfigItem"}),". See that\nfunction for information about ",(0,t.jsx)(n.code,{children:"ConfigItem"})," fields."]}),"\n",(0,t.jsx)(n.h3,{id:"createconfigitem",children:"createConfigItem"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:'babel.createConfigItem(value: string | {} | Function | [string | {} | Function, {} | void], { dirname?: string, type?: "preset" | "plugin" }): ConfigItem'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Allows build tooling to create and cache config items up front. If this function\nis called multiple times for a given plugin, Babel will call the plugin's function itself\nmultiple times. If you have a clear set of expected plugins and presets to\ninject, pre-constructing the config items would be recommended."}),"\n",(0,t.jsxs)(n.h3,{id:"configitem-type",children:[(0,t.jsx)(n.code,{children:"ConfigItem"})," type"]}),"\n",(0,t.jsxs)(n.p,{children:["Each ",(0,t.jsx)(n.code,{children:"ConfigItem"})," exposes all of the information Babel knows. The fields are:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value: {} | Function"})," - The resolved value of the plugin."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options: {} | void"})," - The options object passed to the plugin."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dirname: string"})," - The path that the options are relative to."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name: string | void"})," - The name that the user gave the plugin instance, e.g. ",(0,t.jsx)(n.code,{children:"plugins: [ ['env', {}, 'my-env'] ]"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"file: Object | void"})," - Information about the plugin's file, if Babel knows it.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"request: string"})," - The file that the user requested, e.g. ",(0,t.jsx)(n.code,{children:'"@babel/env"'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"resolved: string"})," - The full path of the resolved file, e.g. ",(0,t.jsx)(n.code,{children:'"/tmp/node_modules/@babel/preset-env/lib/index.js"'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"default_extensions",children:"DEFAULT_EXTENSIONS"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"babel.DEFAULT_EXTENSIONS: readonly string[];"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:['A list of default extensions supported by babel (".js", ".jsx", ".es6", ".es", ".mjs", "cjs").\nThis list is used by @babel/register and @babel/cli to determine which files need transpiling.\nExtending this list isn\'t possible, however @babel/cli does provide ways to support other extensions with ',(0,t.jsx)(n.code,{children:"--extensions"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/docs/options",children:"the full option list here"}),"."]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},80980:function(e,n,s){s.d(n,{Z:function(){return l},a:function(){return o}});var i=s(27378);let t={},r=i.createContext(t);function o(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);