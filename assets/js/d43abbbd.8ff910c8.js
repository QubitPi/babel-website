"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["3063"],{83754:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var s=n(37963),i=n(24246),r=n(80980);let a={layout:"post",title:"7.2.0 Released: Private Instance Methods",authors:"nicol\xf2",date:new Date("2018-12-03T12:00:00.000Z"),categories:"announcements",share_text:"Babel 7.2.0 Released"},o=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Private Instance Methods (#8654)",id:"private-instance-methods-8654",level:2},{value:"&quot;Smart&quot; Pipeline Operator Parsing (#8289)",id:"smart-pipeline-operator-parsing-8289",level:2},{value:"Plugin Names (#8769)",id:"plugin-names-8769",level:2}];function h(e){let t={a:"a",code:"code",em:"em",h2:"h2",hr:"hr",img:"img",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"We just released a new minor version of Babel!"}),"\n",(0,i.jsxs)(t.p,{children:["This release includes support for private instance methods and a bunch of bug fixes regarding Flow and TypeScript types. You can read the whole changelog ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/releases/tag/v7.2.0",children:"on GitHub"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["A lot of new contributors fixed bugs or implemented new features in this release: thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/Gcaufy",children:"Gcaufy"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/morozRed",children:"Grigory Moroz"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/phapp88",children:"Paul Happ"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/tim-mc",children:"Tim McClure"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/katrotz",children:"Veaceslav Cotruta"}),"!"]}),"\n",(0,i.jsxs)(t.p,{children:["A big shout out to Bloomberg for sponsoring the implementation of private class elements! This support for private ",(0,i.jsx)(t.em,{children:"instance"})," methods  is a follow-up to private ",(0,i.jsx)(t.em,{children:"static"})," fields released in Babel ",(0,i.jsx)(t.a,{href:"https://babeljs.io/blog/2018/09/17/7.1.0#private-static-fields-stage-3",children:"7.1.0"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["If you or your company wants to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on ",(0,i.jsx)(t.a,{href:"https://opencollective.com/babel",children:"OpenCollective"})," and, better yet, work with us on the implementation of ",(0,i.jsx)(t.a,{href:"https://github.com/babel/proposals",children:"new ECMAScript proposals"})," directly!"]}),"\n",(0,i.jsxs)(t.h2,{id:"private-instance-methods-8654",children:["Private Instance Methods (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/8654",children:"#8654"}),")"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'class Person {\n  #age = 19;\n\n  #increaseAge() {\n    this.#age++;\n  }\n\n  birthday() {\n    this.#increaseAge();\n    alert("Happy Birthday!");\n  }\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/tim-mc",children:"Tim"})," for implementing this proposal, and to ",(0,i.jsx)(t.a,{href:"https://twitter.com/NicoloRibaudo",children:"Nicol\xf2"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/jridgewell",children:"Justin"})," for the reviews!"]}),"\n",(0,i.jsxs)(t.p,{children:["You can test private methods by adding the ",(0,i.jsx)(t.code,{children:"@babel/plugin-proposal-private-methods"})," plugin to your Babel configuration, or enabling the ",(0,i.jsx)(t.code,{children:"stage-3"})," preset in the ",(0,i.jsx)(t.a,{href:"https://babeljs.io/repl/build/main#?presets=stage-3",children:"repl"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Private accessors ",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/9101",children:"are also coming"}),", and we have done some big internal refactoring that allows us to add support for private elements to decorators soon \uD83C\uDF89."]}),"\n",(0,i.jsxs)(t.h2,{id:"smart-pipeline-operator-parsing-8289",children:['"Smart" Pipeline Operator Parsing (',(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/8289",children:"#8289"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Thanks to the work of ",(0,i.jsx)(t.a,{href:"https://github.com/mAAdhaTTah",children:"James DiGioia"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/js-choi",children:"J. S. Choi"}),", ",(0,i.jsx)(t.code,{children:"@babel/parser"})," now also can parse the ",(0,i.jsx)(t.a,{href:"https://github.com/js-choi/proposal-smart-pipelines/",children:"Smart Pipeline Operator"}),", in addition to the ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/proposal-pipeline-operator",children:"minimal version"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:['We currently only support the "core" of the smart pipeline proposal, and not any additional features. We also currently support only ',(0,i.jsx)(t.code,{children:"#"})," as a preliminary placeholder. The ",(0,i.jsx)(t.a,{href:"https://github.com/tc39/proposal-pipeline-operator/issues/91",children:"actual placeholder has not yet been decided"}),", and other possibilities such as ",(0,i.jsx)(t.code,{children:"?"}),", ",(0,i.jsx)(t.code,{children:"@"}),", and ",(0,i.jsx)(t.code,{children:"%"})," may be experimentally supported by ",(0,i.jsx)(t.code,{children:"@babel/parser"})," in the future."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'// "Smart"\nconst result = 2 |> double |> 3 + # |> toStringBase(2, #); // "111"\n\n// "Simple"\nconst result = 2 |> double |> (x => 3 + x) |> (x => toStringBase(2, x));\n'})}),"\n",(0,i.jsx)(t.p,{children:"Babel implements multiple variants of this proposal to help TC39 test and gather feedback from the community. As with all proposals, expect changes in the future."}),"\n",(0,i.jsxs)(t.p,{children:["If you are directly using ",(0,i.jsx)(t.code,{children:"@babel/parser"})," and you want to test this proposal, you can pass the ",(0,i.jsx)(t.code,{children:'proposal: "smart"'})," option to the pipeline plugin:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'const ast = babel.parse(code, {\n  plugins: [\n    ["pipelineOperator", { proposal: "smart" }]\n  ]\n})\n'})}),"\n",(0,i.jsx)(t.p,{children:"We don't support transpiling this syntax yet, but it will come soon."}),"\n",(0,i.jsxs)(t.h2,{id:"plugin-names-8769",children:["Plugin Names (",(0,i.jsx)(t.a,{href:"https://github.com/babel/babel/pull/8769",children:"#8769"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Every official plugin now provides Babel its name. Although this doesn't affect normal Babel use, it provides a consistent identifier for each plugin. This is particularly useful for things like ",(0,i.jsx)(t.a,{href:"https://github.com/babel/website/pull/1736",children:"Time Travel"}),", which allows you to see exactly what each plugin is doing to your code. You can see this in effect via our ",(0,i.jsx)(t.a,{href:"https://babeljs.io/repl/build/main#?timeTravel=true",children:"repl"}),":"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://i.imgur.com/AzKc37i.gif",alt:""})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://twitter.com/search?q=https%3A%2F%2Fbabeljs.io%2Fblog%2F2018%2F12%2F03%2F7.2.0",children:"Discuss on Twitter"})})]})}function p(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},80980:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return a}});var s=n(27378);let i={},r=s.createContext(i);function a(e){let t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},37963:function(e){e.exports=JSON.parse('{"permalink":"/babel-website/blog/2018/12/03/7.2.0","source":"@site/blog/2018-12-03-7.2.0.md","title":"7.2.0 Released: Private Instance Methods","description":"We just released a new minor version of Babel!","date":"2018-12-03T12:00:00.000Z","tags":[],"readingTime":2.445,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo","key":"nicol\xf2","page":null}],"frontMatter":{"layout":"post","title":"7.2.0 Released: Private Instance Methods","authors":"nicol\xf2","date":"2018-12-03T12:00:00.000Z","categories":"announcements","share_text":"Babel 7.2.0 Released"},"unlisted":false,"prevItem":{"title":"7.3.0 Released: Named capturing groups, private instance accessors and smart pipelines","permalink":"/babel-website/blog/2019/01/21/7.3.0"},"nextItem":{"title":"7.1.0 Released: Decorators, Private Static Fields","permalink":"/babel-website/blog/2018/09/17/7.1.0"}}')}}]);