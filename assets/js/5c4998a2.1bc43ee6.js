"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["36426"],{77051:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return r},default:function(){return d},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var s=n(76891),o=n(24246),i=n(80980);let a={layout:"post",title:"7.16.0 Released: ESLint 8 and TypeScript 4.5",authors:"team",date:new Date("2021-10-29T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.16.0 Released"},r=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Highlights",id:"highlights",level:2},{value:"Class static blocks enabled by default (#13713)",id:"class-static-blocks-enabled-by-default-13713",level:3},{value:"TypeScript 4.5 features (#13802, #13838)",id:"typescript-45-features-13802-13838",level:3},{value:"<code>^</code> topic token for Hack-style pipes (#13749)",id:"-topic-token-for-hack-style-pipes-13749",level:3},{value:"ESLint 8 support in <code>@babel/eslint-parser</code> (#13782)",id:"eslint-8-support-in-babeleslint-parser-13782",level:3}];function p(e){let t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"We just published Babel 7.16.0!"}),"\n",(0,o.jsxs)(t.p,{children:["This release enables ",(0,o.jsx)(t.a,{href:"https://github.com/tc39/proposal-class-static-block",children:"class static initialization blocks"})," by default. It includes support for a new variant of the ",(0,o.jsx)(t.a,{href:"https://github.com/tc39/proposal-pipeline-operator",children:"pipeline operator"})," proposal, as well as TypeScript 4.5 compatibility."]}),"\n",(0,o.jsxs)(t.p,{children:["Furthermore, ",(0,o.jsx)(t.code,{children:"@babel/eslint-parser"})," now supports ESLint 8."]}),"\n",(0,o.jsxs)(t.p,{children:["You can read the whole changelog ",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/releases/tag/v7.16.0",children:"on GitHub"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on our ",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel?sponsor=1",children:"Open Collective"})," and, better yet, work with us on the implementation of ",(0,o.jsx)(t.a,{href:"https://github.com/babel/proposals",children:"new ECMAScript proposals"})," directly! As a volunteer-driven project, we rely on the community's support to fund our efforts in supporting the wide range of JavaScript users. Reach out at ",(0,o.jsx)(t.a,{href:"mailto:team@babeljs.io",children:"team@babeljs.io"})," if you'd like to discuss more!"]}),"\n",(0,o.jsx)(t.h2,{id:"highlights",children:"Highlights"}),"\n",(0,o.jsxs)(t.h3,{id:"class-static-blocks-enabled-by-default-13713",children:["Class static blocks enabled by default (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/13713",children:"#13713"}),")"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'class MyClass {\n  static {\n    doSomeInitialization(MyClass);\n    console.log("MyClass initialized!");\n  }\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Static blocks, that ",(0,o.jsx)(t.a,{href:"https://github.com/tc39/notes/blob/HEAD/meetings/2021-08/aug-31.md#class-static-initialization-blocks-for-stage-4",children:"reached Stage 4 in August"}),", are now enabled by default in ",(0,o.jsx)(t.code,{children:"@babel/parser"})," and ",(0,o.jsx)(t.code,{children:"@babel/preset-env"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["If you were using the ",(0,o.jsx)(t.code,{children:"classStaticBlock"})," parser plugin, or ",(0,o.jsx)(t.code,{children:"@babel/plugin-syntax-class-static-block"}),", you can safely remove them from your config."]}),"\n",(0,o.jsxs)(t.p,{children:["If you already use ",(0,o.jsx)(t.code,{children:"@babel/preset-env"}),", you can now remove ",(0,o.jsx)(t.code,{children:"@babel/plugin-proposal-class-static-block"})," from your config."]}),"\n",(0,o.jsxs)(t.h3,{id:"typescript-45-features-13802-13838",children:["TypeScript 4.5 features (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/13802",children:"#13802"}),", ",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/13838",children:"#13838"}),")"]}),"\n",(0,o.jsx)(t.p,{children:"TypeScript 4.5 introduces a new syntax for marking imports as type-only: rather than marking the whole import statement, you can mark a single specifier:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'// TypeScript 4.4\nimport type { Foo } from "my-module";\nimport { fooInstance } from "my-module";\n\n// TypeScript 4.5\nimport { type Foo, fooInstance } from "my-module";\n'})}),"\n",(0,o.jsxs)(t.p,{children:["It also supports two new file extensions: ",(0,o.jsx)(t.code,{children:".mts"})," and ",(0,o.jsx)(t.code,{children:".cts"}),", that mirror ",(0,o.jsx)(t.code,{children:".mjs"})," and ",(0,o.jsx)(t.code,{children:".cjs"}),". When passing an ",(0,o.jsx)(t.code,{children:".mts"})," or ",(0,o.jsx)(t.code,{children:".cts"})," file to Babel with ",(0,o.jsx)(t.code,{children:"@babel/preset-typescript"})," enabled, it uses the file extension to detect the desired source type (",(0,o.jsx)(t.code,{children:'"module"'})," or ",(0,o.jsx)(t.code,{children:'"script"'}),")."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:".mts"})," and ",(0,o.jsx)(t.code,{children:".cts"})," file cannot contain JSX code by default, but they cannot contain TypeScript annotations that would be ambiguous with JSX (",(0,o.jsx)(t.code,{children:"<Type> cast"})," and ",(0,o.jsx)(t.code,{children:"<T>() => {}"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["You can read the full TypeScript 4.5 release post ",(0,o.jsx)(t.a,{href:"https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/",children:"on their blog"}),"."]}),"\n",(0,o.jsxs)(t.h3,{id:"-topic-token-for-hack-style-pipes-13749",children:[(0,o.jsx)(t.code,{children:"^"})," topic token for Hack-style pipes (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/13749",children:"#13749"}),")"]}),"\n",(0,o.jsxs)(t.p,{children:["The champions of the ",(0,o.jsx)(t.a,{href:"https://github.com/tc39/proposal-pipeline-operator",children:"pipeline operator"})," proposal are considering ",(0,o.jsx)(t.a,{href:"https://github.com/tc39/proposal-pipeline-operator/wiki/Bikeshedding-the-Hack-topic-token",children:"various topic tokens"})," (the reference to the value from the previous pipeline step)."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"@babel/plugin-proposal-pipeline-operator"})," (and the ",(0,o.jsx)(t.code,{children:'"pipelineOperator"'})," parser plugin) now support three of them: ",(0,o.jsx)(t.code,{children:"#"}),", ",(0,o.jsx)(t.code,{children:"^"})," and ",(0,o.jsx)(t.code,{children:"%"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="JavaScript"',children:'let values = getNames()\n  |> ["default"].concat(^)\n  |> await loadValues(^);\n'})}),"\n",(0,o.jsxs)(t.p,{children:["You can enable the current version of the pipeline operator proposal using the ",(0,o.jsx)(t.code,{children:'proposal: "hack"'})," option, and you can choose the topic token using ",(0,o.jsx)(t.code,{children:'topicToken: "^"'}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",metastring:'title="babel.config.json"',children:'{\n  "plugins": [\n    ["@babel/plugin-proposal-pipeline-operator", {\n      "proposal": "hack",\n      "topicToken": "^"\n    }]\n  ]\n}\n'})}),"\n",(0,o.jsxs)(t.h3,{id:"eslint-8-support-in-babeleslint-parser-13782",children:["ESLint 8 support in ",(0,o.jsx)(t.code,{children:"@babel/eslint-parser"})," (",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/pull/13782",children:"#13782"}),")"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"@babel/eslint-parser"})," now supports ESLint 8: you can update your ",(0,o.jsx)(t.code,{children:'"eslint"'})," dependency and it will just work."]}),"\n",(0,o.jsxs)(t.p,{children:["If you are an ESLint plugin author, pay attention to the breaking change in the AST for class fields and private methods: when using ESLint 7 they follow the ",(0,o.jsx)(t.a,{href:"https://github.com/babel/babel/blob/v7.16.0/packages/babel-parser/ast/spec.md",children:"Babel AST shape"}),"; when using ESLint 8 they follow ESLint and the ",(0,o.jsx)(t.a,{href:"https://github.com/estree/estree/blob/91f49977f1f05dea86c112a070a703bb37f5722d/es2022.md#propertydefinition",children:"ESTree specification"}),". This is because ESLint introduced support for these new class features starting from ESLint 8."]})]})}function d(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},80980:function(e,t,n){n.d(t,{Z:function(){return r},a:function(){return a}});var s=n(27378);let o={},i=s.createContext(o);function a(e){let t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},76891:function(e){e.exports=JSON.parse('{"permalink":"/blog/2021/10/29/7.16.0","source":"@site/blog/2021-10-29-7.16.0.md","title":"7.16.0 Released: ESLint 8 and TypeScript 4.5","description":"We just published Babel 7.16.0!","date":"2021-10-29T00:00:00.000Z","tags":[],"readingTime":3.22,"hasTruncateMarker":true,"authors":[{"name":"Babel Team","url":"https://twitter.com/babeljs","email":"team@babeljs.io","key":"team","page":null}],"frontMatter":{"layout":"post","title":"7.16.0 Released: ESLint 8 and TypeScript 4.5","authors":"team","date":"2021-10-29T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.16.0 Released"},"unlisted":false,"prevItem":{"title":"7.17.0 Released: RegExp \'v\' mode and ... \uD83E\uDD41 decorators!","permalink":"/blog/2022/02/02/7.17.0"},"nextItem":{"title":"7.15.0 Released: Hack-style pipelines, TypeScript const enums and Rhino target support","permalink":"/blog/2021/07/26/7.15.0"}}')}}]);