"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["1371"],{71549:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return c}});var i=t(182),s=t(85893),r=t(50065);let a={layout:"post",title:"7.5.0 Released: dynamic import and F# pipelines",authors:"nicol\xf2",date:new Date("2019-07-03T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.5.0 Released"},o=void 0,l={authorsImageUrls:[void 0]},c=[{value:"F# pipeline operator (#9450 and #9984)",id:"f-pipeline-operator-9450-and-9984",level:2},{value:"Dynamic import (#9552 and #10109)",id:"dynamic-import-9552-and-10109",level:2},{value:"<code>defaults</code> browserslist query in <code>@babel/preset-env</code> (#8897)",id:"defaults-browserslist-query-in-babelpreset-env-8897",level:2},{value:"Experimental TypeScript <code>namespaces</code> support (#9785)",id:"experimental-typescript-namespaces-support-9785",level:2},{value:"\u26A0\uFE0F Warning \u26A0\uFE0F",id:"\uFE0F-warning-\uFE0F",level:3}];function p(e){let n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Today we are releasing Babel 7.5.0!"}),"\n",(0,s.jsxs)(n.p,{children:["This release includes improved support for a few ECMAScript proposals: the F# variant of the Stage 1 pipeline operator and an official plugin for the Stage 4 dynamic ",(0,s.jsx)(n.code,{children:"import()"})," proposal (along with ",(0,s.jsx)(n.code,{children:"preset-env"})," support).\nIt also has support for TypeScript ",(0,s.jsx)(n.code,{children:"namespace"}),"s (experimental) and for Browserslist's ",(0,s.jsx)(n.code,{children:"default"})," query in ",(0,s.jsx)(n.code,{children:"preset-env"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You can read the whole changelog ",(0,s.jsx)(n.a,{href:"https://github.com/babel/babel/releases/tag/v7.5.0",children:"on GitHub"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Thanks to ",(0,s.jsx)(n.a,{href:"https://github.com/Wolvereness",children:"Wesley Wolfe"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/mrtnzlml",children:"Martin Zl\xe1mal"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/phated",children:"Blaine Bublitz"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/Letladi",children:"Letladi Sebesho"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/darkyndy",children:"Paul Comanici"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/lidoravitan",children:"Lidor Avitan"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/sormy",children:"Artem Butusov"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/ChlorideCull",children:"Sebastian Johansson"}),", and ",(0,s.jsx)(n.a,{href:"https://github.com/minho42",children:"Min ho Kim"})," for their first PRs!"]}),"\n",(0,s.jsxs)(n.p,{children:["We are always looking for help, especially with triaging issues, reviewing pull requests and helping people on Slack. We are experimenting with the new ",(0,s.jsx)(n.a,{href:"https://github.blog/changelog/2019-05-23-triage-and-maintain-roles-beta/",children:"triage"})," role implemented by GitHub, and we want to recognize people from the community who will stand up and help us! \uD83D\uDE09"]}),"\n",(0,s.jsxs)(n.p,{children:["A fantastic example of this are the newest additions to the Babel organization: ",(0,s.jsx)(n.a,{href:"https://github.com/tanhauhau",children:"Tan Li Hau"}),", who has been a great help in triaging issues and fixing bugs, and ",(0,s.jsx)(n.a,{href:"https://twitter.com/thiagoarrais",children:"Thiago Arrais"}),", who helped in implementing the pipeline operator!"]}),"\n",(0,s.jsxs)(n.p,{children:["In other news, we just ",(0,s.jsx)(n.a,{href:"https://twitter.com/left_pad/status/1146069623940558849",children:"announced"})," the start of our own podcast! If you missed it, please check out our ",(0,s.jsx)(n.a,{href:"https://babeljs.io/blog/2019/07/02/the-babel-podcast",children:"post"})," from yesterday!"]}),"\n",(0,s.jsxs)(n.p,{children:["Our work has made been possible also by our sponsors. We want to thank both ",(0,s.jsx)(n.a,{href:"https://discordapp.com/",children:"Discord"})," and ",(0,s.jsx)(n.a,{href:"https://clay.global",children:"clay"})," for becoming Silver Sponsors on ",(0,s.jsx)(n.a,{href:"https://opencollective.com/babel",children:"OpenCollective"}),", as well as ",(0,s.jsx)(n.a,{href:"https://linkedin.com",children:"Linkedin"})," for becoming a Silver Sponsor of Henry on GitHub!"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://handshake.org/images/landing/logo-dark.svg",alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["Special thanks go to ",(0,s.jsx)(n.a,{href:"https://handshake.org",children:"Handshake"}),", a decentralized, permissionless naming protocol compatible with DNS, for donating $100,000 last year! As a part of their FOSS Community Grant, they pledged $10.2M to various open source communities like Apache, Debian, EFF, and Babel."]}),"\n",(0,s.jsxs)(n.p,{children:["If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can sponsor us on ",(0,s.jsx)(n.a,{href:"https://opencollective.com/babel",children:"Open Collective"})," and, better yet, work with us on the implementation of ",(0,s.jsx)(n.a,{href:"https://github.com/babel/proposals",children:"new ECMAScript proposals"})," directly! As a volunteer-driven project, we rely on the community's support to both fund our efforts in supporting the wide range of JavaScript users and taking ownership of the code. Reach out to Henry at ",(0,s.jsx)(n.a,{href:"mailto:henry@babeljs.io",children:"henry@babeljs.io"})," if you'd like to talk more!"]}),"\n",(0,s.jsxs)(n.h2,{id:"f-pipeline-operator-9450-and-9984",children:["F# pipeline operator (",(0,s.jsx)(n.a,{href:"https://github.com/babel/babel/pull/9450",children:"#9450"})," and ",(0,s.jsx)(n.a,{href:"https://github.com/babel/babel/pull/9984",children:"#9984"}),")"]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"The pipeline operator proposal is still at Stage 1, and thus its specification is still being defined."})}),"\n",(0,s.jsxs)(n.p,{children:["This ",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-pipeline-operator",children:"proposal"})," has a few variants that are being thought out. By testing this plugin, you can help the proposal authors gather feedback about how pipelines could work. But also note that refactoring will be required if the semantics change throughout the proposal process (and they will)."]}),"\n",(0,s.jsxs)(n.p,{children:["Since version 7.3.0, Babel has supported the ",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-pipeline-operator/wiki#proposal-4-smart-mix",children:"Smart variant"})," of the pipeline operator proposal, and the ",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-pipeline-operator/wiki#proposal0-original-minimal-proposal",children:'"minimal" variant'})," since 7.0.0-beta."]}),"\n",(0,s.jsxs)(n.p,{children:["Thanks to the joint efforts of ",(0,s.jsx)(n.a,{href:"https://twitter.com/thiagoarrais",children:"Thiago Arrais"})," and ",(0,s.jsx)(n.a,{href:"https://twitter.com/JamesDiGioia",children:"James DiGioia"}),", you can now also test the ",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-pipeline-operator/wiki#proposal-1-f-sharp-style-only-with-await",children:'"# variant'}),"! If you have thoughts or comments about this specific proposal variant, you can reach out to ",(0,s.jsx)(n.a,{href:"https://twitter.com/JamesDiGioia",children:"James"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:['How is the F# variant different from the Smart one? Instead of having the concept of "topic references" (',(0,s.jsx)(n.code,{children:"#"}),"), arrow functions are used instead. This has the advantage of being more similar to current JavaScript, at the cost of a slightly less concise syntax."]}),"\n",(0,s.jsxs)("table",{class:"danger-force-code-no-wrap",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Current JavaScript"}),(0,s.jsx)("th",{children:"F# pipeline"}),(0,s.jsx)("th",{children:"Smart pipeline"})]})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"let newScore = boundScore(\n  0,\n  100,\n  add(7, double(person.score))\n);\n"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"let newScore = person.score\n  |> double\n  |> n => add(7, n)\n  |> n => boundScore(0, 100, n);\n\n"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"let newScore = person.score\n  |> double\n  |> add(7, #)\n  |> boundScore(0, 100, #);\n\n"})})})]})]}),"\n",(0,s.jsx)(n.p,{children:"Although the two proposals aren't dependent on one another or being developed as a single proposal, you can use F# pipelines alongside with partial application (supported since Babel 7.4.0):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"let newScore = person.score\n  |> double\n  |> add(7, ?)\n  |> boundScore(0, 100, ?);\n"})}),"\n",(0,s.jsxs)(n.p,{children:['Note that, while it may look the same as the "Smart" pipeline variant, the partial application proposal only supports ',(0,s.jsx)(n.code,{children:"?"})," in function call parameters. This means that, for example, ",(0,s.jsx)(n.code,{children:"person |> #.score"}),' is a valid "Smart" pipeline whose F# equivalent must use an arrow function: ',(0,s.jsx)(n.code,{children:"person |> p => p.score"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The F# pipeline operator is also different regarding how ",(0,s.jsx)(n.code,{children:"await"})," is handled:"]}),"\n",(0,s.jsxs)("table",{class:"danger-force-code-no-wrap",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Current JavaScript"}),(0,s.jsx)("th",{children:"F# pipeline"}),(0,s.jsx)("th",{children:"Smart pipeline"})]})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"let id = (\n  await (\n    await fetch(url)\n  ).json()\n).ID;\n"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"let newScore = fetch(url)\n  |> await\n  |> r => r.json()\n  |> await\n  |> obj => obj.ID;\n"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"let newScore = fetch(url)\n  |> await #\n  |> #.json()\n  |> await #\n  |> #.ID;\n"})})})]})]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to test this new proposal variant, you can add ",(0,s.jsx)(n.code,{children:"@babel/plugin-proposal-pipeline-operator"})," to your Babel configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'module.exports = {\n  plugins: [\n    ["@babel/proposal-pipeline-operator", { proposal: "fsharp" }]\n  ]\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can also try it out in the ",(0,s.jsx)(n.a,{href:"https://babeljs.io/repl/version/%5E7.5.0#?presets=stage-1",children:"repl"}),', by enabling the "Stage 1" preset.']}),"\n",(0,s.jsxs)(n.h2,{id:"dynamic-import-9552-and-10109",children:["Dynamic import (",(0,s.jsx)(n.a,{href:"https://github.com/babel/babel/pull/9552",children:"#9552"})," and ",(0,s.jsx)(n.a,{href:"https://github.com/babel/babel/pull/10109",children:"#10109"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["Although Babel has had support for parsing dynamic imports ",(0,s.jsx)(n.code,{children:"import(source)"})," for a long time, there hasn't been a consistent way of transforming it."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If you used ",(0,s.jsx)(n.code,{children:"webpack"})," or ",(0,s.jsx)(n.code,{children:"rollup"}),", you would only include ",(0,s.jsx)(n.code,{children:"@babel/plugin-syntax-dynamic-import"})," and not transform it with Babel"]}),"\n",(0,s.jsxs)(n.li,{children:["If you used Node, you could use the ",(0,s.jsx)(n.a,{href:"https://github.com/airbnb/babel-plugin-dynamic-import-node/",children:(0,s.jsx)(n.code,{children:"babel-plugin-dynamic-import-node"})})," plugin to transform it"]}),"\n",(0,s.jsxs)(n.li,{children:["If you used SystemJS, ",(0,s.jsx)(n.code,{children:"@babel/plugin-transform-modules-systemjs"})," in conjunction with ",(0,s.jsx)(n.code,{children:"@babel/plugin-syntax-dynamic-import"})," transformed it without explicitly enabling a transform plugin for ",(0,s.jsx)(n.code,{children:"import()"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Since the dynamic import proposal has been recently merged into the main specification, we have decided to unify these use-cases under a single entry point: ",(0,s.jsx)(n.code,{children:"@babel/plugin-proposal-dynamic-import"}),". This plugin must be used alongside one of the module transform plugins because Babel needs to know which module loading system you are targeting. When targeting CommonJS, it internally delegates to ",(0,s.jsx)(n.a,{href:"https://github.com/airbnb/babel-plugin-dynamic-import-node/",children:(0,s.jsx)(n.code,{children:"babel-plugin-dynamic-import-node"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"For example, this is a valid configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'module.exports = {\n  plugins: [\n    "@babel/plugin-proposal-dynamic-import",\n    "@babel/plugin-transform-modules-amd"\n  ]\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"While this isn't:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'module.exports = {\n  plugins: [\n    "@babel/plugin-proposal-dynamic-import"\n  ]\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you want to only allow parsing of ",(0,s.jsx)(n.code,{children:"import()"})," expressions without transforming them, you can just include the ",(0,s.jsx)(n.code,{children:"@babel/plugin-syntax-dynamic-import"})," package."]}),"\n",(0,s.jsxs)(n.p,{children:["If you are using ",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),", dynamic import support will be enabled by default. You don't need to worry about ",(0,s.jsx)(n.code,{children:"webpack"})," or ",(0,s.jsx)(n.code,{children:"rollup"})," support, since both ",(0,s.jsx)(n.code,{children:"babel-loader"})," and ",(0,s.jsx)(n.code,{children:"rollup-plugin-babel"})," automatically disable the Babel transform to allow the bundler to handle it correctly."]}),"\n",(0,s.jsxs)(n.h2,{id:"defaults-browserslist-query-in-babelpreset-env-8897",children:[(0,s.jsx)(n.code,{children:"defaults"})," browserslist query in ",(0,s.jsx)(n.code,{children:"@babel/preset-env"})," (",(0,s.jsx)(n.a,{href:"https://github.com/babel/babel/pull/8897",children:"#8897"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"@babel/preset-env"})," is not passed any targets, it runs every syntax transform on your code (emulating the now deprecated ",(0,s.jsx)(n.code,{children:"babel-preset-latest"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["To support this behavior, we had to work around the fact that Browserslist itself has ",(0,s.jsx)(n.a,{href:"https://browserl.ist/?q=defaults",children:"default choices"}),". This caused ",(0,s.jsx)(n.code,{children:"@babel/preset-env"})," to not allow usage of the ",(0,s.jsx)(n.code,{children:"default"})," query."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@babel/preset-env"})," now supports the ",(0,s.jsx)(n.code,{children:"defaults"})," query when passing targets directly to the preset:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'module.exports = {\n  presets: [\n    ["@babel/preset-env", {\n      targets: { browsers: "defaults" }\n    }]\n  ]\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can also set it using a ",(0,s.jsx)(n.code,{children:".browserslistrc"})," file, which is also used by other tools like ",(0,s.jsx)(n.a,{href:"https://github.com/postcss/autoprefixer",children:"Autoprefixer"})," or ",(0,s.jsx)(n.a,{href:"https://stylelint.io/",children:"Stylelint"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The default behavior of ",(0,s.jsx)(n.code,{children:"@babel/preset-env"})," is still to compile everything, but we might switch it in Babel 8 to use this ",(0,s.jsx)(n.code,{children:"defaults"})," query."]}),"\n",(0,s.jsxs)(n.h2,{id:"experimental-typescript-namespaces-support-9785",children:["Experimental TypeScript ",(0,s.jsx)(n.code,{children:"namespaces"})," support (",(0,s.jsx)(n.a,{href:"https://github.com/babel/babel/pull/9785",children:"#9785"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["Until now, ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/namespaces.html",children:"namespaces"})," were the second biggest TypeScript feature not supported by Babel (the first one is type-checking! \uD83D\uDE1B). Thanks to the work done by community member ",(0,s.jsx)(n.a,{href:"https://twitter.com/wolvereness",children:"Wesley Wolfe"}),", you can now enable ",(0,s.jsx)(n.em,{children:"experimental"})," support for them in the TypeScript plugin, using the ",(0,s.jsx)(n.code,{children:"allowNamespaces"})," option of ",(0,s.jsx)(n.code,{children:"@babel/plugin-transform-typescript"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'module.exports = {\n  plugins: [\n    ["@babel/plugin-transform-typescript", {\n      allowNamespaces: true\n    }]\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then, you can use namespaces in your code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"namespace Validation {\n  const lettersRegexp = /^[A-Za-z]+$/;\n  const numberRegexp = /^[0-9]+$/;\n\n  export class LettersOnlyValidator {\n    isAcceptable(s: string) {\n      return lettersRegexp.test(s);\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"\uFE0F-warning-\uFE0F",children:"\u26A0\uFE0F Warning \u26A0\uFE0F"}),"\n",(0,s.jsxs)(n.p,{children:["When TypeScript support was initially added to Babel, ",(0,s.jsx)(n.code,{children:"namespaces"})," were not included since they require type information that only a full TypeScript compiler and type-checker can provide. For this reason, this current (experimental) support has some limitations:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Namespaces can only export immutable bindings"}),"\n",(0,s.jsx)(n.li,{children:"When merging multiple namespaces with the same name, their scope isn't shared"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can find the full list of caveats in the ",(0,s.jsx)(n.code,{children:"@babel/plugin-transform-typescript"})," ",(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats",children:"documentation"}),"."]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return a}});var i=t(67294);let s={},r=i.createContext(s);function a(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},182:function(e){e.exports=JSON.parse('{"permalink":"/blog/2019/07/03/7.5.0","source":"@site/blog/2019-07-03-7.5.0.md","title":"7.5.0 Released: dynamic import and F# pipelines","description":"Today we are releasing Babel 7.5.0!","date":"2019-07-03T00:00:00.000Z","tags":[],"readingTime":6.97,"hasTruncateMarker":true,"authors":[{"name":"Nicol\xf2 Ribaudo","url":"https://twitter.com/NicoloRibaudo","key":"nicol\xf2","page":null}],"frontMatter":{"layout":"post","title":"7.5.0 Released: dynamic import and F# pipelines","authors":"nicol\xf2","date":"2019-07-03T00:00:00.000Z","categories":"announcements","share_text":"Babel 7.5.0 Released"},"unlisted":false,"prevItem":{"title":"7.6.0 Released: Private static accessors and V8 intrinsic syntax","permalink":"/blog/2019/09/05/7.6.0"},"nextItem":{"title":"The Babel Podcast","permalink":"/blog/2019/07/02/the-babel-podcast"}}')}}]);