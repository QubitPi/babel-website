"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9769],{35318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(27378);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=l,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},39798:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(27378),l=n(38944),r={tabItem:"tabItem_wHwb"};function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r.tabItem,i),hidden:n},t)}},23930:function(e,t,n){n.d(t,{Z:function(){return N}});var a=n(25773),l=n(27378),r=n(38944),i=n(83457),o=n(3620),s=n(30654),p=n(70784),u=n(71819);function c(e){return function(e){return l.Children.map(e,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function d(e){var t=e.values,n=e.children;return(0,l.useMemo)((function(){var e=null!=t?t:c(n);return function(e){var t=(0,p.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function m(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function h(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,r=(0,o.k6)(),i=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,s._X)(i),(0,l.useCallback)((function(e){if(i){var t=new URLSearchParams(r.location.search);t.set(i,e),r.replace(Object.assign({},r.location,{search:t.toString()}))}}),[i,r])]}function f(e){var t,n,a,r,i=e.defaultValue,o=e.queryString,s=void 0!==o&&o,p=e.groupId,c=d(e),f=(0,l.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var l=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:i,tabValues:c})})),b=f[0],v=f[1],k=h({queryString:s,groupId:p}),y=k[0],g=k[1],N=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:p}.groupId),n=(0,u.Nk)(t),a=n[0],r=n[1],[a,(0,l.useCallback)((function(e){t&&r.set(e)}),[t,r])]),w=N[0],C=N[1],T=function(){var e=null!=y?y:w;return m({value:e,tabValues:c})?e:null}();return(0,l.useLayoutEffect)((function(){T&&v(T)}),[T]),{selectedValue:b,selectValue:(0,l.useCallback)((function(e){if(!m({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);v(e),g(e),C(e)}),[g,C,c]),tabValues:c}}var b=n(76457),v={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};function k(e){var t=e.className,n=e.block,o=e.selectedValue,s=e.selectValue,p=e.tabValues,u=[],c=(0,i.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==o&&(c(t),s(a))},m=function(e){var t,n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var a,l=u.indexOf(e.currentTarget)+1;n=null!=(a=u[l])?a:u[0];break;case"ArrowLeft":var r,i=u.indexOf(e.currentTarget)-1;n=null!=(r=u[i])?r:u[u.length-1]}null==(t=n)||t.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},p.map((function(e){var t=e.value,n=e.label,i=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:function(e){return u.push(e)},onKeyDown:m,onClick:d},i,{className:(0,r.Z)("tabs__item",v.tabItem,null==i?void 0:i.className,{"tabs__item--active":o===t})}),null!=n?n:t)})))}function y(e){var t=e.lazy,n=e.children,a=e.selectedValue;if(n=Array.isArray(n)?n:[n],t){var r=n.find((function(e){return e.props.value===a}));return r?(0,l.cloneElement)(r,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},n.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function g(e){var t=f(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",v.tabList)},l.createElement(k,(0,a.Z)({},e,t)),l.createElement(y,(0,a.Z)({},e,t)))}function N(e){var t=(0,b.Z)();return l.createElement(g,(0,a.Z)({key:String(t)},e))}},71333:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return b},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return m}});var a=n(25773),l=n(30808),r=(n(27378),n(35318)),i=n(23930),o=n(39798),s=["components"],p={id:"babel-template",title:"@babel/template"},u=void 0,c={unversionedId:"babel-template",id:"babel-template",title:"@babel/template",description:"In computer science, this is known as an implementation of quasiquotes.",source:"@site/../docs/template.md",sourceDirName:".",slug:"/babel-template",permalink:"/babel-website/docs/babel-template",draft:!1,editUrl:"https://github.com/babel/website/edit/main/docs/../docs/template.md",tags:[],version:"current",frontMatter:{id:"babel-template",title:"@babel/template"},sidebar:"docs",previous:{title:"@babel/runtime",permalink:"/babel-website/docs/babel-runtime"},next:{title:"@babel/traverse",permalink:"/babel-website/docs/babel-traverse"}},d={},m=[{value:"Install",id:"install",level:2},{value:"String Usage",id:"string-usage",level:2},{value:"<code>.ast</code>",id:"ast",level:3},{value:"Template Literal Usage",id:"template-literal-usage",level:2},{value:"<code>.ast</code>",id:"ast-1",level:3},{value:"AST results",id:"ast-results",level:2},{value:"<code>template</code>",id:"template",level:3},{value:"<code>template.smart</code>",id:"templatesmart",level:3},{value:"<code>template.statement</code>",id:"templatestatement",level:3},{value:"<code>template.statements</code>",id:"templatestatements",level:3},{value:"<code>template.expression</code>",id:"templateexpression",level:3},{value:"<code>template.program</code>",id:"templateprogram",level:3},{value:"API",id:"api",level:2},{value:"<code>template(code, [opts])</code>",id:"templatecode-opts",level:3},{value:"code",id:"code",level:4},{value:"options",id:"options",level:4},{value:"syntacticPlaceholders",id:"syntacticplaceholders",level:4},{value:"placeholderWhitelist",id:"placeholderwhitelist",level:5},{value:"placeholderPattern",id:"placeholderpattern",level:5},{value:"preserveComments",id:"preservecomments",level:5},{value:"Return value",id:"return-value",level:4}],h={toc:m},f="wrapper";function b(e){var t=e.components,n=(0,l.Z)(e,s);return(0,r.kt)(f,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In computer science, this is known as an implementation of quasiquotes."),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --save-dev @babel/template\n"))),(0,r.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add --dev @babel/template\n")))),(0,r.kt)("h2",{id:"string-usage"},"String Usage"),(0,r.kt)("p",null,"When calling ",(0,r.kt)("inlineCode",{parentName:"p"},"template")," as a function with a string argument, you can provide ",(0,r.kt)("em",{parentName:"p"},"placeholders")," which will get substituted when the template is used."),(0,r.kt)("p",null,"You can use two different kinds of placeholders: syntactic placeholders (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"%%name%%"),") or identifier placeholders (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"NAME"),"). ",(0,r.kt)("inlineCode",{parentName:"p"},"@babel/template")," supports both those approaches by default, but they can't be mixed. If you need to be explicit about what syntax you are using, you can use the ",(0,r.kt)("a",{parentName:"p",href:"#syntacticplaceholders"},(0,r.kt)("inlineCode",{parentName:"a"},"syntacticPlaceholders"))," option."),(0,r.kt)("p",null,"Please note that syntactic placeholders were introduced in Babel 7.4.0. If you don't control the ",(0,r.kt)("inlineCode",{parentName:"p"},"@babel/template")," version (for example, when importing it from a ",(0,r.kt)("inlineCode",{parentName:"p"},"@babel/core@^7.0.0")," peer dependency), you must use identifier placeholders. On the other hand, syntactic placeholders have some advantages: they can be used where identifiers would be a syntax error (e.g. in place of function bodies, or in export declarations), and they don't conflict with uppercase variables (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"new URL()"),")."),(0,r.kt)("p",null,"Input (syntactic placeholders):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'import template from "@babel/template";\nimport generate from "@babel/generator";\nimport * as t from "@babel/types";\n\nconst buildRequire = template(`\n  var %%importName%% = require(%%source%%);\n`);\n\nconst ast = buildRequire({\n  importName: t.identifier("myModule"),\n  source: t.stringLiteral("my-module"),\n});\n\nconsole.log(generate(ast).code);\n')),(0,r.kt)("p",null,"Input (identifier placeholders):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'const buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\n\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier("myModule"),\n  SOURCE: t.stringLiteral("my-module"),\n});\n')),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'const myModule = require("my-module");\n')),(0,r.kt)("h3",{id:"ast"},(0,r.kt)("inlineCode",{parentName:"h3"},".ast")),(0,r.kt)("p",null,"If no placeholders are in use and you just want a simple way to parse a\nstring into an AST, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},".ast")," version of the template."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'const ast = template.ast(`\n  var myModule = require("my-module");\n`);\n')),(0,r.kt)("p",null,"which will parse and return the AST directly."),(0,r.kt)("h2",{id:"template-literal-usage"},"Template Literal Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'import template from "@babel/template";\nimport generate from "@babel/generator";\nimport * as t from "@babel/types";\n\nconst source = "my-module";\n\nconst fn = template`\n  var IMPORT_NAME = require(\'${source}\');\n`;\n\nconst ast = fn({\n  IMPORT_NAME: t.identifier("myModule"),\n});\n\nconsole.log(generate(ast).code);\n')),(0,r.kt)("p",null,"Note that placeholders can be passed directly as part of the template literal\nin order to make things as readable as possible, or they can be passed into\nthe template function."),(0,r.kt)("h3",{id:"ast-1"},(0,r.kt)("inlineCode",{parentName:"h3"},".ast")),(0,r.kt)("p",null,"If no placeholders are in use and you just want a simple way to parse a\nstring into an AST, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},".ast")," version of the template."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'const name = "my-module";\nconst mod = "myModule";\n\nconst ast = template.ast`\n  var ${mod} = require("${name}");\n`;\n')),(0,r.kt)("p",null,"which will parse and return the AST directly. Note that unlike the string-based\nversion mentioned earlier, since this is a template literal, it is still\nvalid to perform replacements using template literal replacements."),(0,r.kt)("h2",{id:"ast-results"},"AST results"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@babel/template")," API exposes a few flexible APIs to make it as easy as\npossible to create ASTs with an expected structure. Each of these also has\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},".ast")," property mentioned above."),(0,r.kt)("h3",{id:"template"},(0,r.kt)("inlineCode",{parentName:"h3"},"template")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"template")," returns either a single statement, or an array of\nstatements, depending on the parsed result."),(0,r.kt)("h3",{id:"templatesmart"},(0,r.kt)("inlineCode",{parentName:"h3"},"template.smart")),(0,r.kt)("p",null,"This is the same as the default ",(0,r.kt)("inlineCode",{parentName:"p"},"template")," API, returning either a single\nnode, or an array of nodes, depending on the parsed result."),(0,r.kt)("h3",{id:"templatestatement"},(0,r.kt)("inlineCode",{parentName:"h3"},"template.statement")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'template.statement("foo;")()')," returns a single statement node, and throw\nan exception if the result is anything but a single statement."),(0,r.kt)("h3",{id:"templatestatements"},(0,r.kt)("inlineCode",{parentName:"h3"},"template.statements")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'template.statements("foo;foo;")()')," returns an array of statement nodes."),(0,r.kt)("h3",{id:"templateexpression"},(0,r.kt)("inlineCode",{parentName:"h3"},"template.expression")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'template.expression("foo")()')," returns the expression node."),(0,r.kt)("h3",{id:"templateprogram"},(0,r.kt)("inlineCode",{parentName:"h3"},"template.program")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'template.program("foo;")()')," returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"Program")," node for the template."),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"templatecode-opts"},(0,r.kt)("inlineCode",{parentName:"h3"},"template(code, [opts])")),(0,r.kt)("h4",{id:"code"},"code"),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("h4",{id:"options"},"options"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@babel/template")," accepts all of the options from ",(0,r.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-parser#options"},"Babel Parser"),", and specifies\nsome defaults of its own:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"allowReturnOutsideFunction")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," by default."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"allowSuperOutsideMethod")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," by default."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceType")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"module")," by default.")),(0,r.kt)("h4",{id:"syntacticplaceholders"},"syntacticPlaceholders"),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),"\nDefault: ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"%%foo%%"),"-style placeholders are used; ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise.\nAdded in: ",(0,r.kt)("inlineCode",{parentName:"p"},"v7.4.0")),(0,r.kt)("p",null,"When this option is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"%%foo%%")," to mark placeholders in\nyour templates. When it is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", placeholders are identifiers determined\nby the ",(0,r.kt)("inlineCode",{parentName:"p"},"placeholderWhitelist")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"placeholderPattern")," options."),(0,r.kt)("h5",{id:"placeholderwhitelist"},"placeholderWhitelist"),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<string>"),"\nDefault: ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This option is not compatible with ",(0,r.kt)("inlineCode",{parentName:"p"},"syntacticPlaceholders: true"))),(0,r.kt)("p",null,"A set of placeholder names to automatically accept. Items in this list do\nnot need to match the given placeholder pattern."),(0,r.kt)("h5",{id:"placeholderpattern"},"placeholderPattern"),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"RegExp | false"),"\nDefault: ",(0,r.kt)("inlineCode",{parentName:"p"},"/^[_$A-Z0-9]+$/")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This option is not compatible with ",(0,r.kt)("inlineCode",{parentName:"p"},"syntacticPlaceholders: true"))),(0,r.kt)("p",null,"A pattern to search for when looking for Identifier and StringLiteral\nnodes that should be considered placeholders.\n'false' will disable placeholder searching entirely, leaving only the\n'placeholderWhitelist' value to find placeholders."),(0,r.kt)("h5",{id:"preservecomments"},"preserveComments"),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),"\nDefault: ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("p",null,"Set this to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to preserve any comments from the ",(0,r.kt)("inlineCode",{parentName:"p"},"code")," parameter."),(0,r.kt)("h4",{id:"return-value"},"Return value"),(0,r.kt)("p",null,"By default ",(0,r.kt)("inlineCode",{parentName:"p"},"@babel/template")," returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," which is invoked with an\noptional object of replacements. See the usage section for an example."),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},".ast"),", the AST will be returned directly."))}b.isMDXComponent=!0}}]);