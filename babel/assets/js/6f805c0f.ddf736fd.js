"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7944],{35318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var a=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(n),c=r,k=m["".concat(p,".").concat(c)]||m[c]||d[c]||i;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},39798:function(e,t,n){n.d(t,{Z:function(){return l}});var a=n(27378),r=n(38944),i="tabItem_wHwb";function l(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:n},t)}},23930:function(e,t,n){n.d(t,{Z:function(){return C}});var a=n(25773),r=n(27378),i=n(38944),l=n(83457),o=n(3620),p=n(30654),s=n(70784),u=n(71819);function m(e){return function(e){return r.Children.map(e,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function d(e){var t=e.values,n=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:m(n);return function(e){var t=(0,s.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function c(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function k(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,i=(0,o.k6)(),l=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,p._X)(l),(0,r.useCallback)((function(e){if(l){var t=new URLSearchParams(i.location.search);t.set(l,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[l,i])]}function N(e){var t,n,a,i,l=e.defaultValue,o=e.queryString,p=void 0!==o&&o,s=e.groupId,m=d(e),N=(0,r.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var r=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:l,tabValues:m})})),h=N[0],b=N[1],f=k({queryString:p,groupId:s}),g=f[0],y=f[1],v=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),n=(0,u.Nk)(t),a=n[0],i=n[1],[a,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),C=v[0],w=v[1],x=function(){var e=null!=g?g:C;return c({value:e,tabValues:m})?e:null}();return(0,r.useLayoutEffect)((function(){x&&b(x)}),[x]),{selectedValue:h,selectValue:(0,r.useCallback)((function(e){if(!c({value:e,tabValues:m}))throw new Error("Can't select invalid tab value="+e);b(e),y(e),w(e)}),[y,w,m]),tabValues:m}}var h=n(76457),b="tabList_J5MA",f="tabItem_l0OV";function g(e){var t=e.className,n=e.block,o=e.selectedValue,p=e.selectValue,s=e.tabValues,u=[],m=(0,l.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var t=e.currentTarget,n=u.indexOf(t),a=s[n].value;a!==o&&(m(t),p(a))},c=function(e){var t,n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var a,r=u.indexOf(e.currentTarget)+1;n=null!=(a=u[r])?a:u[0];break;case"ArrowLeft":var i,l=u.indexOf(e.currentTarget)-1;n=null!=(i=u[l])?i:u[u.length-1]}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},s.map((function(e){var t=e.value,n=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:function(e){return u.push(e)},onKeyDown:c,onClick:d},l,{className:(0,i.Z)("tabs__item",f,null==l?void 0:l.className,{"tabs__item--active":o===t})}),null!=n?n:t)})))}function y(e){var t=e.lazy,n=e.children,a=e.selectedValue;if(n=Array.isArray(n)?n:[n],t){var i=n.find((function(e){return e.props.value===a}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function v(e){var t=N(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",b)},r.createElement(g,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function C(e){var t=(0,h.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},69542:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return N},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return c}});var a=n(25773),r=n(30808),i=(n(27378),n(35318)),l=n(23930),o=n(39798),p=["components"],s={id:"babel-plugin-transform-typescript",title:"@babel/plugin-transform-typescript",sidebar_label:"Typescript Plugin"},u=void 0,m={unversionedId:"babel-plugin-transform-typescript",id:"babel-plugin-transform-typescript",title:"@babel/plugin-transform-typescript",description:"NOTE: This plugin is included in @babel/preset-typescript",source:"@site/../docs/plugin-transform-typescript.md",sourceDirName:".",slug:"/babel-plugin-transform-typescript",permalink:"/babel-website/docs/babel-plugin-transform-typescript",draft:!1,editUrl:"https://github.com/babel/website/edit/main/docs/../docs/plugin-transform-typescript.md",tags:[],version:"current",frontMatter:{id:"babel-plugin-transform-typescript",title:"@babel/plugin-transform-typescript",sidebar_label:"Typescript Plugin"},sidebar:"plugins",previous:{title:"Flow Plugin",permalink:"/babel-website/docs/babel-plugin-transform-flow-strip-types"},next:{title:"AMD",permalink:"/babel-website/docs/babel-plugin-transform-modules-amd"}},d={},c=[{value:"Example",id:"example",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"With a configuration file (Recommended)",id:"with-a-configuration-file-recommended",level:3},{value:"Via CLI",id:"via-cli",level:3},{value:"Via Node API",id:"via-node-api",level:3},{value:"Options",id:"options",level:2},{value:"<code>allowDeclareFields</code>",id:"allowdeclarefields",level:3},{value:"<code>allowNamespaces</code>",id:"allownamespaces",level:3},{value:"<code>disallowAmbiguousJSXLike</code>",id:"disallowambiguousjsxlike",level:3},{value:"<code>dts</code>",id:"dts",level:3},{value:"<code>isTSX</code>",id:"istsx",level:3},{value:"<code>jsxPragma</code>",id:"jsxpragma",level:3},{value:"<code>jsxPragmaFrag</code>",id:"jsxpragmafrag",level:3},{value:"<code>onlyRemoveTypeImports</code>",id:"onlyremovetypeimports",level:3},{value:"<code>optimizeConstEnums</code>",id:"optimizeconstenums",level:3},{value:"TypeScript Compiler Options",id:"typescript-compiler-options",level:2},{value:"Caveats",id:"caveats",level:2},{value:"Impartial Namespace Support",id:"impartial-namespace-support",level:3}],k={toc:c};function N(e){var t=e.components,n=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"NOTE"),": This plugin is included in ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/preset-typescript"))),(0,i.kt)("p",null,"This plugin adds support for the types syntax used by the ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org"},"TypeScript programming language"),". However, this plugin does not add the ability to type-check the JavaScript passed to it. For that, you will need to install and set up TypeScript."),(0,i.kt)("p",null,"Note that although the TypeScript compiler ",(0,i.kt)("inlineCode",{parentName:"p"},"tsc")," actively supports certain JavaScript proposals such as optional chaining (",(0,i.kt)("inlineCode",{parentName:"p"},"?."),"), nullish coalescing (",(0,i.kt)("inlineCode",{parentName:"p"},"??"),") and class properties (",(0,i.kt)("inlineCode",{parentName:"p"},"this.#x"),"), this preset does not include these features because they are not the types syntax available in TypeScript only. We recommend using ",(0,i.kt)("inlineCode",{parentName:"p"},"preset-env")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"preset-typescript")," if you want to transpile these features."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const x: number = 0;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Out")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const x = 0;\n")),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)(l.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --save-dev @babel/plugin-transform-typescript\n"))),(0,i.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add --dev @babel/plugin-transform-typescript\n")))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"with-a-configuration-file-recommended"},"With a configuration file (Recommended)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "plugins": ["@babel/plugin-transform-typescript"]\n}\n')),(0,i.kt)("h3",{id:"via-cli"},"Via CLI"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Shell"',title:'"Shell"'},"babel --plugins @babel/plugin-transform-typescript script.js\n")),(0,i.kt)("h3",{id:"via-node-api"},"Via Node API"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'require("@babel/core").transformSync("code", {\n  plugins: ["@babel/plugin-transform-typescript"],\n});\n')),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("h3",{id:"allowdeclarefields"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowDeclareFields")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Added in ",(0,i.kt)("inlineCode",{parentName:"p"},"v7.7.0")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"NOTE: This will be enabled by default in Babel 8")),(0,i.kt)("p",null,"When enabled, type-only class fields are only removed if they are prefixed with the ",(0,i.kt)("inlineCode",{parentName:"p"},"declare")," modifier:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"class A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n}\n")),(0,i.kt)("h3",{id:"allownamespaces"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowNamespaces")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"History"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Version"),(0,i.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"v7.5.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Added ",(0,i.kt)("inlineCode",{parentName:"td"},"allowNamespaces"),", defaults to ",(0,i.kt)("inlineCode",{parentName:"td"},"false"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"v7.13.0")),(0,i.kt)("td",{parentName:"tr",align:null},"defaults to ",(0,i.kt)("inlineCode",{parentName:"td"},"true")))))),(0,i.kt)("p",null,"Enables compilation of TypeScript namespaces."),(0,i.kt)("h3",{id:"disallowambiguousjsxlike"},(0,i.kt)("inlineCode",{parentName:"h3"},"disallowAmbiguousJSXLike")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Added in: ",(0,i.kt)("inlineCode",{parentName:"p"},"v7.16.0")),(0,i.kt)("p",null,"Even when JSX parsing is not enabled, this option disallows using syntax that would be ambiguous with JSX (",(0,i.kt)("inlineCode",{parentName:"p"},"<X> y")," type assertions and ",(0,i.kt)("inlineCode",{parentName:"p"},"<X>() => {}")," type arguments). It matches the ",(0,i.kt)("inlineCode",{parentName:"p"},"tsc")," behavior when parsing ",(0,i.kt)("inlineCode",{parentName:"p"},".mts")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".mjs")," files."),(0,i.kt)("h3",{id:"dts"},(0,i.kt)("inlineCode",{parentName:"h3"},"dts")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Added in: ",(0,i.kt)("inlineCode",{parentName:"p"},"v7.20.0")),(0,i.kt)("p",null,"This option will enable parsing within a TypeScript ambient context, where certain syntax have different rules (like ",(0,i.kt)("inlineCode",{parentName:"p"},".d.ts")," files and inside ",(0,i.kt)("inlineCode",{parentName:"p"},"declare module")," blocks). Please see ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"},"Official Handbook")," and ",(0,i.kt)("a",{parentName:"p",href:"https://basarat.gitbook.io/typescript/type-system/intro"},"TypeScript Deep Dive")," for more information about ambient contexts."),(0,i.kt)("h3",{id:"istsx"},(0,i.kt)("inlineCode",{parentName:"h3"},"isTSX")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Forcibly enables ",(0,i.kt)("inlineCode",{parentName:"p"},"jsx")," parsing. Otherwise angle brackets will be treated as TypeScript's legacy type assertion ",(0,i.kt)("inlineCode",{parentName:"p"},"var foo = <string>bar;"),". Also, ",(0,i.kt)("inlineCode",{parentName:"p"},"isTSX: true")," requires ",(0,i.kt)("inlineCode",{parentName:"p"},"allExtensions: true"),"."),(0,i.kt)("h3",{id:"jsxpragma"},(0,i.kt)("inlineCode",{parentName:"h3"},"jsxPragma")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"string"),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"React")),(0,i.kt)("p",null,"Replace the function used when compiling JSX expressions. This is so that we know that the import is not a type import, and should not be removed."),(0,i.kt)("h3",{id:"jsxpragmafrag"},(0,i.kt)("inlineCode",{parentName:"h3"},"jsxPragmaFrag")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"string"),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"React.Fragment")),(0,i.kt)("p",null,"Replace the function used when compiling JSX fragment expressions. This is so that we know that the import is not a type import, and should not be removed."),(0,i.kt)("h3",{id:"onlyremovetypeimports"},(0,i.kt)("inlineCode",{parentName:"h3"},"onlyRemoveTypeImports")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Added in: ",(0,i.kt)("inlineCode",{parentName:"p"},"v7.9.0")),(0,i.kt)("p",null,"When set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the transform will only remove ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-exports"},"type-only imports")," (introduced in TypeScript 3.8). This should only be used if you are using TypeScript >= 3.8."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"class A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n  prop?: string; // Initialized to undefined\n  prop1!: string // Initialized to undefined\n}\n")),(0,i.kt)("h3",{id:"optimizeconstenums"},(0,i.kt)("inlineCode",{parentName:"h3"},"optimizeConstEnums")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Added in: ",(0,i.kt)("inlineCode",{parentName:"p"},"v7.15.0")),(0,i.kt)("p",null,"When set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", Babel will inline enum values rather than using the usual ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// Input\nconst enum Animals {\n  Fish,\n}\nconsole.log(Animals.Fish);\n\n// Default output\nvar Animals;\n\n(function(Animals) {\n  Animals[(Animals["Fish"] = 0)] = "Fish";\n})(Animals || (Animals = {}));\n\nconsole.log(Animals.Fish);\n\n// `optimizeConstEnums` output\nconsole.log(0);\n')),(0,i.kt)("p",null,"This option differs from TypeScript's ",(0,i.kt)("inlineCode",{parentName:"p"},"--isolatedModules")," behavior, which ignores the ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," modifier and compiles them as normal enums, and aligns Babel's behavior with TypeScript's default behavior."),(0,i.kt)("p",null,"However, when ",(0,i.kt)("em",{parentName:"p"},"exporting")," a ",(0,i.kt)("inlineCode",{parentName:"p"},"const enum")," Babel will compile it to a plain object literal so that it doesn't need to rely on cross-file analysis when compiling it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Input\nexport const enum Animals {\n  Fish,\n}\n\n// `optimizeConstEnums` output\nexport var Animals = {\n  Fish: 0,\n};\n")),(0,i.kt)("h2",{id:"typescript-compiler-options"},"TypeScript Compiler Options"),(0,i.kt)("p",null,"The official TypeScript compiler has many ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html"},"options")," for configuring how it\ncompiles and type checks. While many don't apply, some behaviors might be useful and their\nequivalents in Babel can be enabled by some configuration options or plugins."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--alwaysStrict"),"\nYou can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"strictMode")," ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/babel-parser#options"},"parser option"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"module.exports = {\n  parserOpts: { strictMode: true },\n};\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--downlevelIteration"),"\nYou can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-for-of")," plugin. If you are using ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"for...of")," is already transpiled using iterators when it isn't supported by your compilation target(s).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--emitDecoratorMetadata"),"\nThis option isn't supported by an official Babel package since it is a TypeScript-specific addition and not part of the decorators proposal.\nIf you rely on this feature, you can use the community plugin ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/leonardfactory/babel-plugin-transform-typescript-metadata#readme"},"babel-plugin-transform-typescript-metadata"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--esModuleInterop"),"\nThis is the default behavior of Babel when transpiling ECMAScript modules.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--experimentalDecorators"),'\nThis option enables support for the "legacy" decorator proposal. You can enable it in Babel using the ',(0,i.kt)("inlineCode",{parentName:"p"},"@babel/plugin-proposal-decorators")," plugin, but please be aware, there are some minor differences."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'module.exports = {\n  plugins: [["@babel/plugin-proposal-decorators", { legacy: true }]],\n};\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--importHelpers"),"\nThis is the equivalent of the ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-runtime")," package.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"---importsNotUsedAsValues"),"\nYou can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onlyRemoveTypeImports")," option to replicate this behavior. ",(0,i.kt)("inlineCode",{parentName:"p"},"onlyRemoveTypeImports: true")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"importsNotUsedAsValues: preserve"),", while ",(0,i.kt)("inlineCode",{parentName:"p"},"onlyRemoveTypeImports: false")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"importsNotUsedAsValues: remove"),". There is no equivalent for ",(0,i.kt)("inlineCode",{parentName:"p"},"importsNotUsedAsValues: error"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--inlineSourceMap"),"\nYou can set the ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/options#sourcemaps"},(0,i.kt)("inlineCode",{parentName:"a"},'sourceMaps: "inline"'))," option in your ",(0,i.kt)("inlineCode",{parentName:"p"},"babel.config.json")," file.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--isolatedModules"),"\nThis is the default Babel behavior, and it can't be turned off because Babel doesn't support cross-file analysis.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--jsx"),"\nJSX support is provided using another plugin.\nIf you want your output to contains JSX code (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"--jsx preserve"),"), you need the ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/plugin-syntax-jsx")," plugin; if you want to transpile it to standard JavaScript (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"--jsx react")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--jsx react-native"),"), you should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-react-jsx")," plugin.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--jsxFactory"),"\nIt can be customized using the ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#pragma"},(0,i.kt)("inlineCode",{parentName:"a"},"pragma")," option")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-react-jsx")," package. You also need to set the ",(0,i.kt)("inlineCode",{parentName:"p"},"jsxPragma")," option of this plugin.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--module"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-m"),"\nIf you are using a bundler (Webpack or Rollup), this option is set automatically.\nIf you are using ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),", you can use the ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/babel-preset-env#modules"},(0,i.kt)("inlineCode",{parentName:"a"},"modules")," option"),"; otherwise you can load the specific plugin."),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},(0,i.kt)("strong",{parentName:"th"},(0,i.kt)("inlineCode",{parentName:"strong"},"--module")," value")),(0,i.kt)("th",{parentName:"tr",align:"center"},(0,i.kt)("strong",{parentName:"th"},(0,i.kt)("inlineCode",{parentName:"strong"},"@babel/preset-env"),"'s ",(0,i.kt)("inlineCode",{parentName:"strong"},"modules"))),(0,i.kt)("th",{parentName:"tr",align:"center"},(0,i.kt)("strong",{parentName:"th"},"Single plugin")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"None")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:"center"},"/")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"CommonJS")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},'"commonjs"')," or ",(0,i.kt)("inlineCode",{parentName:"td"},'"cjs"')),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"@babel/plugin-transform-modules-commonjs"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"AMD")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},'"amd"')),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"@babel/plugin-transform-modules-amd"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"System")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},'"systemjs"')),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"@babel/plugin-transform-modules-systemjs"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"UMD")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},'"umd"')),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"@babel/plugin-transform-modules-umd"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"ES6")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"ES2015")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:"center"},"/"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--outDir"),"\nWhen using ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/cli"),", you can set the ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/babel-cli#compile-directories"},(0,i.kt)("inlineCode",{parentName:"a"},"--out-dir")," option"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--outFile"),"\nBabel doesn't support concatenating output files: you should use a bundler (like Webpack, Rollup or Parcel) for that.\nWhen using ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/cli"),", you can compile a single file using the ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/babel-cli#compile-files"},(0,i.kt)("inlineCode",{parentName:"a"},"--out-file")," option"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--sourceMap"),"\nYou can use the top-level ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/options#sourcemaps"},(0,i.kt)("inlineCode",{parentName:"a"},"sourceMaps: true")," option"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--target"),"\nBabel doesn't support targeting a specific version of the language, but you can choose which engines you want to target using ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/babel-preset-env"},(0,i.kt)("inlineCode",{parentName:"a"},"@babel/preset-env")),".\nIf you prefer, you can enable ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/plugins"},"individual plugins")," for every ECMAScript feature.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--useDefineForClassFields"),"\nYou can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onlyRemoveTypeImports")," option to replicate this behavior.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--watch"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-w"),"\nWhen using ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/cli"),", you can specify the ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/babel-cli#compile-files"},(0,i.kt)("inlineCode",{parentName:"a"},"--watch")," option"),"."))),(0,i.kt)("h2",{id:"caveats"},"Caveats"),(0,i.kt)("p",null,"Because there are features of the TypeScript language which rely on the full type-system to be available to make changes at runtime. This section of caveats is quite long, however, it's worth noting that a few of these features are only found in older TypeScript codebases and have modern JavaScript equivalents which you are probably already using."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Since Babel does not type-check, code which is syntactically correct, but would fail the TypeScript type-checking may successfully get transformed, and often in unexpected or invalid ways.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"This plugin does not support ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require"},(0,i.kt)("inlineCode",{parentName:"a"},"export ="))," and ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require"},(0,i.kt)("inlineCode",{parentName:"a"},"import =")),", because those cannot be compiled to ES.next. These are a TypeScript only form of ",(0,i.kt)("inlineCode",{parentName:"p"},"import"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"export"),"."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Workarounds"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Use the plugin ",(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/babel-plugin-replace-ts-export-assignment"},"babel-plugin-replace-ts-export-assignment")," to transform ",(0,i.kt)("inlineCode",{parentName:"li"},"export ="),"."),(0,i.kt)("li",{parentName:"ul"},"Convert to using ",(0,i.kt)("inlineCode",{parentName:"li"},"export default")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"export const"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},'import x, {y} from "z"'),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Changes to your ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," are not reflected in babel. The build process will always behave as though ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html"},(0,i.kt)("inlineCode",{parentName:"a"},"isolatedModules"))," is turned on, there are Babel-native alternative ways to set a lot of the ",(0,i.kt)("a",{parentName:"p",href:"#typescript-compiler-options"},(0,i.kt)("inlineCode",{parentName:"a"},"tsconfig.json")," options")," however.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Q"),": Why doesn't Babel allow export of a ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"let"),"?"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"A"),": The TypeScript compiler dynamically changes how these variables are used depending on whether or not the value is mutated. Ultimately, this depends on a type-model and is outside the scope of Babel. A best-effort implementation would transform context-dependent usages of the variable to always use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Namespace.Value")," version instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"Value"),", in case it was mutated outside of the current file. Allowing ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," from Babel (as the transform is not-yet-written) is therefore is more likely than not to present itself as a bug when used as-if it was not ",(0,i.kt)("inlineCode",{parentName:"p"},"const"),"."))),(0,i.kt)("h3",{id:"impartial-namespace-support"},"Impartial Namespace Support"),(0,i.kt)("p",null,"If you have existing code which uses the TypeScript-only ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/namespaces.html"},"namespace")," features. Babel supports a subset of TypeScript's namespace features. If you are considering writing new code which uses namespace, using the ES2015 ",(0,i.kt)("inlineCode",{parentName:"p"},"import"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"export")," is recommended instead. It's ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/TypeScript/issues/30994#issuecomment-484150549"},"not going away"),", but there are modern alternatives."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Type-only ",(0,i.kt)("inlineCode",{parentName:"p"},"namespace"),"s should be marked with ",(0,i.kt)("inlineCode",{parentName:"p"},"declare")," and will subsequently be safely removed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"export"),"ing a variable using ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," in a ",(0,i.kt)("inlineCode",{parentName:"p"},"namespace")," will result in an error: ",(0,i.kt)("em",{parentName:"p"},'"Namespaces exporting non-const are not supported by Babel. Change to const or ..."')),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Workaround"),": Use ",(0,i.kt)("inlineCode",{parentName:"p"},"const"),". If some form of mutation is required, explicitly use an object with internal mutability.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"namespace"),"s will not share their scope. In TypeScript, it is valid to refer to contextual items that a ",(0,i.kt)("inlineCode",{parentName:"p"},"namespace")," extends without qualifying them, and the compiler will add the qualifier. In Babel, there is no type-model, and it is impossible to dynamically change references to match the established type of the parent object."),(0,i.kt)("p",{parentName:"li"},"Consider this code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"namespace N {\n  export const V = 1;\n}\nnamespace N {\n  export const W = V;\n}\n")),(0,i.kt)("p",{parentName:"li"},"The TypeScript compiler compiles it to something like this:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"var N = {};\n(function(N) {\n  N.V = 1;\n})(N);\n(function(N) {\n  N.W = N.V;\n})(N);\n")),(0,i.kt)("p",{parentName:"li"},"While Babel will transform it to something like this:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"var N;\n(function(_N) {\n  const V = (_N = 1);\n})(N || (N = {}));\n(function(_N) {\n  const W = V;\n})(N || (N = {}));\n")),(0,i.kt)("p",{parentName:"li"},"As Babel doesn't understand the type of ",(0,i.kt)("inlineCode",{parentName:"p"},"N"),", the reference to ",(0,i.kt)("inlineCode",{parentName:"p"},"V")," will be ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," resulting in an error."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Workaround"),": Explicitly refer to values not in the same namespace definition, even if they would be in the scope according to TypeScript. Examples:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"namespace N {\n  export const V = 1;\n}\nnamespace N {\n  export const W = N.V;\n}\n")),(0,i.kt)("p",{parentName:"li"},"Or:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"namespace N {\n  export const V = 1;\n  export const W = V;\n}\n")))))}N.isMDXComponent=!0}}]);