"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[293],{35318:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return N}});var n=a(27378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=s(a),u=r,N=m["".concat(o,".").concat(u)]||m[u]||k[u]||l;return a?n.createElement(N,i(i({ref:t},d),{},{components:a})):n.createElement(N,i({ref:t},d))}));function N(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},68674:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return m}});var n=a(25773),r=a(30808),l=(a(27378),a(35318)),i=["components"],p={id:"babel-parser",title:"@babel/parser"},o=void 0,s={unversionedId:"babel-parser",id:"babel-parser",title:"@babel/parser",description:"The Babel parser (previously Babylon) is a JavaScript parser used in Babel.",source:"@site/../docs/parser.md",sourceDirName:".",slug:"/babel-parser",permalink:"/babel-website/docs/babel-parser",draft:!1,editUrl:"https://github.com/babel/website/edit/main/docs/../docs/parser.md",tags:[],version:"current",frontMatter:{id:"babel-parser",title:"@babel/parser"},sidebar:"docs",previous:{title:"@babel/standalone",permalink:"/babel-website/docs/babel-standalone"},next:{title:"@babel/core",permalink:"/babel-website/docs/babel-core"}},d={},m=[{value:"Credits",id:"credits",level:2},{value:"API",id:"api",level:2},{value:"<code>babelParser.parse(code, [options])</code>",id:"babelparserparsecode-options",level:3},{value:"<code>babelParser.parseExpression(code, [options])</code>",id:"babelparserparseexpressioncode-options",level:3},{value:"Options",id:"options",level:3},{value:"Output",id:"output",level:3},{value:"Semver",id:"semver",level:3},{value:"Example",id:"example",level:3},{value:"Plugins",id:"plugins",level:3},{value:"Miscellaneous",id:"miscellaneous",level:4},{value:"Language extensions",id:"language-extensions",level:4},{value:"ECMAScript proposals",id:"ecmascript-proposals",level:4},{value:"Latest ECMAScript features",id:"latest-ecmascript-features",level:4},{value:"Plugins options",id:"plugins-options",level:4},{value:"Error codes",id:"error-codes",level:3},{value:"FAQ",id:"faq",level:3},{value:"Will the Babel parser support a plugin system?",id:"will-the-babel-parser-support-a-plugin-system",level:4}],k={toc:m};function u(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",{align:"left"},"The Babel parser (previously Babylon) is a JavaScript parser used in ",(0,l.kt)("a",{href:"https://github.com/babel/babel"},"Babel"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The latest ECMAScript version enabled by default (ES2020)."),(0,l.kt)("li",{parentName:"ul"},"Comment attachment."),(0,l.kt)("li",{parentName:"ul"},"Support for JSX, Flow, Typescript."),(0,l.kt)("li",{parentName:"ul"},"Support for experimental language proposals (accepting PRs for anything at least ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/tc39/proposals/blob/master/stage-0-proposals.md"},"stage-0"),").")),(0,l.kt)("h2",{id:"credits"},"Credits"),(0,l.kt)("p",null,"Heavily based on ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/marijnh/acorn"},"acorn")," and ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/RReverser/acorn-jsx"},"acorn-jsx"),",\nthanks to the awesome work of ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/RReverser"},"@RReverser")," and ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/marijnh"},"@marijnh"),"."),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("h3",{id:"babelparserparsecode-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"babelParser.parse(code, [options])")),(0,l.kt)("h3",{id:"babelparserparseexpressioncode-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"babelParser.parseExpression(code, [options])")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"parse()")," parses the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"code")," as an entire ECMAScript program, while\n",(0,l.kt)("inlineCode",{parentName:"p"},"parseExpression()")," tries to parse a single Expression with performance in\nmind. When in doubt, use ",(0,l.kt)("inlineCode",{parentName:"p"},".parse()"),"."),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"History"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Version"),(0,l.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.21.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"allowNewTargetOutsideFunction")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"annexb"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.16.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"startColumn"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.15.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"attachComment"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.7.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"errorRecovery"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.5.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"allowUndeclaredExports"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.2.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"createParenthesizedExpressions")))))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"allowImportExportEverywhere"),": By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"import")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"export"),"\ndeclarations can only appear at a program's top level. Setting this\noption to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," allows them anywhere where a statement is allowed.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"allowAwaitOutsideFunction"),": By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"await")," use is only allowed\ninside of an async function or, when the ",(0,l.kt)("inlineCode",{parentName:"p"},"topLevelAwait")," plugin is enabled,\nin the top-level scope of modules. Set this to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to also accept it in the\ntop-level scope of scripts. This option is discouraged in favor of\n",(0,l.kt)("inlineCode",{parentName:"p"},"topLevelAwait")," plugin.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"allowNewTargetOutsideFunction"),": By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"new.target")," use is not\nallowed outside of a function or class. Set this to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to accept such code.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"allowReturnOutsideFunction"),": By default, a return statement at\nthe top level raises an error. Set this to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to accept such\ncode.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"allowSuperOutsideMethod"),": By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"super")," use is not allowed\noutside of class and object methods. Set this to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to accept such\ncode.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"allowUndeclaredExports"),": By default, exporting an identifier that was\nnot declared in the current module scope will raise an error. While this\nbehavior is required by the ECMAScript modules specification, Babel's\nparser cannot anticipate transforms later in the plugin pipeline that\nmight insert the appropriate declarations, so it is sometimes important\nto set this option to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to prevent the parser from prematurely\ncomplaining about undeclared exports that will be added later.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"attachComment"),": By default, Babel attaches comments to adjacent AST nodes. When this option is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),", comments are not attached. It can provide up to 30% performance improvement when the input code has ",(0,l.kt)("em",{parentName:"p"},"many")," comments. ",(0,l.kt)("inlineCode",{parentName:"p"},"@babel/eslint-parser")," will set it for you. It is not recommended to use ",(0,l.kt)("inlineCode",{parentName:"p"},"attachComment: false")," with Babel transform, as doing so removes all the comments in output code, and renders annotations such as ",(0,l.kt)("inlineCode",{parentName:"p"},"/* istanbul ignore next */")," nonfunctional.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"annexb"),": By default, Babel parses JavaScript according to ",(0,l.kt)("a",{parentName:"p",href:"https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers"},"ECMAScript's Annex B \"",(0,l.kt)("em",{parentName:"a"},"Additional ECMAScript Features for Web Browsers"),'"')," syntax. When this option is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),", Babel will parse syntax without the extensions specific to Annex B.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"createParenthesizedExpressions"),": By default, the parser sets ",(0,l.kt)("inlineCode",{parentName:"p"},"extra.parenthesized")," on the expression nodes. When this option is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ParenthesizedExpression")," AST nodes are created instead.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"errorRecovery"),": By default, Babel always throws an error when it finds some invalid\ncode. When this option is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", it will store the parsing error and try to continue\nparsing the invalid input file.\nThe resulting AST will have an ",(0,l.kt)("inlineCode",{parentName:"p"},"errors")," property representing an array of all the parsing errors.\nNote that even when this option is enabled, ",(0,l.kt)("inlineCode",{parentName:"p"},"@babel/parser")," could throw for unrecoverable errors.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"plugins"),": Array containing the plugins that you want to enable.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"sourceType"),": Indicate the mode the code should be parsed in. Can be\none of ",(0,l.kt)("inlineCode",{parentName:"p"},'"script"'),", ",(0,l.kt)("inlineCode",{parentName:"p"},'"module"'),", or ",(0,l.kt)("inlineCode",{parentName:"p"},'"unambiguous"'),". Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},'"script"'),". ",(0,l.kt)("inlineCode",{parentName:"p"},'"unambiguous"')," will make @babel/parser attempt to ",(0,l.kt)("em",{parentName:"p"},"guess"),", based on the presence of ES6 ",(0,l.kt)("inlineCode",{parentName:"p"},"import")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"export")," statements. Files with ES6 ",(0,l.kt)("inlineCode",{parentName:"p"},"import"),"s and ",(0,l.kt)("inlineCode",{parentName:"p"},"export"),"s are considered ",(0,l.kt)("inlineCode",{parentName:"p"},'"module"')," and are otherwise ",(0,l.kt)("inlineCode",{parentName:"p"},'"script"'),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"sourceFilename"),": Correlate output AST nodes with their source filename. Useful when generating code and source maps from the ASTs of multiple input files.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"startColumn"),": By default, the parsed code is treated as if it starts from line 1, column 0. You can provide a column number to alternatively start with. Useful for integration with other source tools.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"startLine"),": By default, the parsed code is treated as if it starts from line 1, column 0. You can provide a line number to alternatively start with. Useful for integration with other source tools.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"strictMode"),": By default, ECMAScript code is parsed as strict only if a\n",(0,l.kt)("inlineCode",{parentName:"p"},'"use strict";')," directive is present or if the parsed file is an ECMAScript\nmodule. Set this option to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to always parse files in strict mode.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"ranges"),": Adds a ",(0,l.kt)("inlineCode",{parentName:"p"},"range")," property to each node: ",(0,l.kt)("inlineCode",{parentName:"p"},"[node.start, node.end]"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"tokens"),": Adds all parsed tokens to a ",(0,l.kt)("inlineCode",{parentName:"p"},"tokens")," property on the ",(0,l.kt)("inlineCode",{parentName:"p"},"File")," node"))),(0,l.kt)("h3",{id:"output"},"Output"),(0,l.kt)("p",null,"The Babel parser generates AST according to ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md"},"Babel AST format"),".\nIt is based on ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/estree/estree"},"ESTree spec")," with the following deviations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/estree/estree/blob/master/es5.md#literal"},"Literal")," token is replaced with ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#stringliteral"},"StringLiteral"),", ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#numericliteral"},"NumericLiteral"),", ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#bigintliteral"},"BigIntLiteral"),", ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#booleanliteral"},"BooleanLiteral"),", ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#nullliteral"},"NullLiteral"),", ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#regexpliteral"},"RegExpLiteral")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/estree/estree/blob/master/es5.md#property"},"Property")," token is replaced with ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#objectproperty"},"ObjectProperty")," and ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#objectmethod"},"ObjectMethod")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/estree/estree/blob/master/es2015.md#methoddefinition"},"MethodDefinition")," is replaced with ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#classmethod"},"ClassMethod")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/estree/estree/blob/master/es2022.md#propertydefinition"},"PropertyDefinition")," is replaced with ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#classproperty"},"ClassProperty")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#programs"},"Program")," and ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#blockstatement"},"BlockStatement")," contain additional ",(0,l.kt)("inlineCode",{parentName:"li"},"directives")," field with ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#directive"},"Directive")," and ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#directiveliteral"},"DirectiveLiteral")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#classmethod"},"ClassMethod"),", ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#objectproperty"},"ObjectProperty"),", and ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#objectmethod"},"ObjectMethod")," value property's properties in ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#functionexpression"},"FunctionExpression")," is coerced/brought into the main method node."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/estree/estree/blob/master/es2020.md#chainexpression"},"ChainExpression")," is replaced with ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#optionalmemberexpression"},"OptionalMemberExpression")," and ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#optionalcallexpression"},"OptionalCallExpression")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/estree/estree/blob/master/es2020.md#importexpression"},"ImportExpression")," is replaced with a ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#callexpression"},"CallExpression")," whose ",(0,l.kt)("inlineCode",{parentName:"li"},"callee")," is an ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#import"},"Import")," node.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"There is now an ",(0,l.kt)("inlineCode",{parentName:"p"},"estree")," plugin which reverts these deviations")),(0,l.kt)("p",null,"AST for JSX code is based on ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/facebook/jsx/blob/master/AST.md"},"Facebook JSX AST"),"."),(0,l.kt)("h3",{id:"semver"},"Semver"),(0,l.kt)("p",null,"The Babel Parser follows semver in most situations. The only thing to note is that some spec-compliancy bug fixes may be released under patch versions."),(0,l.kt)("p",null,"For example: We push a fix to early error on something like ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/babel/babylon/pull/107"},"#107")," - multiple default exports per file. That would be considered a bug fix even though it would cause a build to fail."),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'require("@babel/parser").parse("code", {\n  // parse in strict mode and allow module declarations\n  sourceType: "module",\n\n  plugins: [\n    // enable jsx and flow syntax\n    "jsx",\n    "flow",\n  ],\n});\n')),(0,l.kt)("h3",{id:"plugins"},"Plugins"),(0,l.kt)("h4",{id:"miscellaneous"},"Miscellaneous"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Code Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"estree")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/estree/estree"},"repo"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"n/a")))),(0,l.kt)("h4",{id:"language-extensions"},"Language extensions"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"History"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Version"),(0,l.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.6.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"v8intrinsic")))))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Code Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"flow")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/facebook/flow"},"repo"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'var a: string = "";'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"flowComments")," (",(0,l.kt)("a",{parentName:"td",href:"https://flow.org/en/docs/types/comments/"},"docs"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"/","*",":: type Foo = {...}; ","*","/"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"jsx")," (",(0,l.kt)("a",{parentName:"td",href:"https://facebook.github.io/jsx/"},"repo"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'<a attr="b">{s}</a>'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"typescript")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/Microsoft/TypeScript"},"repo"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'var a: string = "";'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v8intrinsic")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"%DebugPrint(foo);"))))),(0,l.kt)("h4",{id:"ecmascript-proposals"},"ECMAScript ",(0,l.kt)("a",{parentName:"h4",href:"https://github.com/babel/proposals"},"proposals")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"History"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Version"),(0,l.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.20.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"explicitResourceManagement"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"importReflection"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.17.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"regexpUnicodeSets"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"destructuringPrivate"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"decoratorAutoAccessors"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.15.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"hack")," to the ",(0,l.kt)("inlineCode",{parentName:"td"},"proposal")," option of ",(0,l.kt)("inlineCode",{parentName:"td"},"pipelineOperator"),". Moved ",(0,l.kt)("inlineCode",{parentName:"td"},"topLevelAwait"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"privateIn")," to Latest ECMAScript features")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.14.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"asyncDoExpressions"),". Moved ",(0,l.kt)("inlineCode",{parentName:"td"},"classProperties"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"classPrivateProperties"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"classPrivateMethods"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"moduleStringNames")," to Latest ECMAScript features")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.13.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"moduleBlocks"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.12.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"classStaticBlock"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"moduleStringNames"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.11.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"decimal"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.10.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"privateIn"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.9.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"recordAndTuple"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.7.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"topLevelAwait"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.4.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"partialApplication"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.2.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"classPrivateMethods")))))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Code Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"asyncDoExpressions")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-async-do-expressions"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"async do { await requestAPI().json() }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"decimal")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-decimal"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"0.3m"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"decorators")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-decorators"},"proposal"),") ",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},"decorators-legacy")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"@a class A {}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"decoratorAutoAccessors")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-decorators"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"class Example { @reactive accessor myBool = false; }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"destructuringPrivate")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-destructuring-private"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"class Example { #x = 1; method() { const { #x: x } = this; } }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"doExpressions")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-do-expressions"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"var a = do { if (true) { 'hi'; } };"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"explicitResourceManagement")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-explicit-resource-management"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"using reader = getReader()"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"exportDefaultFrom")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/ecmascript-export-default-from"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'export v from "mod"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"functionBind")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/zenparsing/es-function-bind"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"a::b"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"::console.log"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"functionSent")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-function.sent"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"function.sent"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"importAssertions")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-import-assertions"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'import json from "./foo.json" assert { type: "json" };'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"importReflection")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-import-reflection"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'import module foo from "./foo.wasm";'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"moduleBlocks")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-js-module-blocks"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"let m = module { export let y = 1; };"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"partialApplication")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/babel/proposals/issues/32"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"f(?, a)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pipelineOperator")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/babel/proposals/issues/29"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"a ","|","> b"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"recordAndTuple")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-record-tuple"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"#{x: 1}"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"#[1, 2]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"regexpUnicodeSets")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-regexp-set-notation"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"/[\\p{Decimal_Number}--[0-9]]/v;"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"throwExpressions")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/babel/proposals/issues/23"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'() => throw new Error("")'))))),(0,l.kt)("h4",{id:"latest-ecmascript-features"},"Latest ECMAScript features"),(0,l.kt)("p",null,"The following features are already enabled on the latest version of ",(0,l.kt)("inlineCode",{parentName:"p"},"@babel/parser"),", and cannot be disabled because they are part of the language.\nYou should enable these features only if you are using an older version."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Code Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"asyncGenerators")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-async-iteration"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"async function*() {}"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"for await (let a of b) {}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bigInt")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-bigint"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"100n"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"classProperties")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-class-public-fields"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"class A { b = 1; }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"classPrivateProperties")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-private-fields"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"class A { #b = 1; }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"classPrivateMethods")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-private-methods"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"class A { #c() {} }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"classStaticBlock")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-class-static-block"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"class A { static {} }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"dynamicImport")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-dynamic-import"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"import('./guy').then(a)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"exportNamespaceFrom")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/leebyron/ecmascript-export-ns-from"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'export * as ns from "mod"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"logicalAssignment")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-logical-assignment"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"a &&= b"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"moduleStringNames")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/ecma262/pull/2154"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'import { "\ud83d\ude04" as smile } from "emoji";'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nullishCoalescingOperator")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/babel/proposals/issues/14"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"a ?? b"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"numericSeparator")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/samuelgoto/proposal-numeric-separator"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"1_000_000"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"objectRestSpread")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-object-rest-spread"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"var a = { b, ...c };"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"optionalCatchBinding")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/babel/proposals/issues/7"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"try {throw 0;} catch{do();}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"optionalChaining")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-optional-chaining"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"a?.b"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"privateIn")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-private-fields-in-in"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"#p in obj"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"topLevelAwait")," (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tc39/proposal-top-level-await/"},"proposal"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"await promise")," in modules")))),(0,l.kt)("h4",{id:"plugins-options"},"Plugins options"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"History"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Version"),(0,l.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"7.21.0")),(0,l.kt)("td",{parentName:"tr",align:null},"The default behavior of the ",(0,l.kt)("inlineCode",{parentName:"td"},"decorators"),"' ",(0,l.kt)("inlineCode",{parentName:"td"},"decoratorsBeforeExport")," option is to allow decorators either before or after the ",(0,l.kt)("inlineCode",{parentName:"td"},"export")," keyword.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"7.19.0")),(0,l.kt)("td",{parentName:"tr",align:null},"The ",(0,l.kt)("inlineCode",{parentName:"td"},"syntaxType")," option of the ",(0,l.kt)("inlineCode",{parentName:"td"},"recordAndTuple")," plugin defaults to ",(0,l.kt)("inlineCode",{parentName:"td"},"hash"),"; added ",(0,l.kt)("inlineCode",{parentName:"td"},"allowCallParenthesized")," option for the ",(0,l.kt)("inlineCode",{parentName:"td"},"decorators")," plugin.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"7.17.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"@@")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"^^")," to the ",(0,l.kt)("inlineCode",{parentName:"td"},"topicToken")," option of the ",(0,l.kt)("inlineCode",{parentName:"td"},"hack")," pipeline operator")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"7.16.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"disallowAmbiguousJSXLike")," for ",(0,l.kt)("inlineCode",{parentName:"td"},"typescript")," plugin. Added ",(0,l.kt)("inlineCode",{parentName:"td"},"^")," to the ",(0,l.kt)("inlineCode",{parentName:"td"},"topicToken")," option of the ",(0,l.kt)("inlineCode",{parentName:"td"},"hack")," pipeline operators")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"7.14.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added ",(0,l.kt)("inlineCode",{parentName:"td"},"dts")," for ",(0,l.kt)("inlineCode",{parentName:"td"},"typescript")," plugin"))))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: When a plugin is specified multiple times, only the first options are considered.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"decorators"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"allowCallParenthesized")," (",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),", defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),")"),(0,l.kt)("p",{parentName:"li"},"When ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),", disallow decorators in the ",(0,l.kt)("inlineCode",{parentName:"p"},"@(...)()")," form in favor of ",(0,l.kt)("inlineCode",{parentName:"p"},"@(...())"),". The stage 3 decorators proposal uses ",(0,l.kt)("inlineCode",{parentName:"p"},"allowCallParenthesized: false"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"decoratorsBeforeExport")," (",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),")"),(0,l.kt)("p",{parentName:"li"},"By default decorators on exported classes can be placed either before or after the ",(0,l.kt)("inlineCode",{parentName:"p"},"export")," keyword. When this option is set, decorators will only be allowed in the specified position."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"// decoratorsBeforeExport: true\n@dec\nexport class C {}\n\n// decoratorsBeforeExport: false\nexport @dec class C {}\n")),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f This option is deprecated and will be removed in a future version. Code that is valid when this option is explicitly set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," is also valid when this option is not set."))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"pipelineOperator"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"proposal")," (required, accepted values: ",(0,l.kt)("inlineCode",{parentName:"p"},"minimal"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fsharp"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"hack"),", ",(0,l.kt)("del",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"del"},"smart"))," (deprecated))\nThere are several different proposals for the pipeline operator.\nThis option chooses which proposal to use.\nSee ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-plugin-proposal-pipeline-operator"},"plugin-proposal-pipeline-operator"),"\nfor more information, including a table comparing their behavior.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"topicToken")," (required when ",(0,l.kt)("inlineCode",{parentName:"p"},"proposal")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"hack"),", accepted values: ",(0,l.kt)("inlineCode",{parentName:"p"},"%"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"#"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"^"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@@"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"^^"),")\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"hack")," proposal uses a \u201ctopic\u201d placeholder in its pipe.\nThere are two different choices for this topic placeholder.\nThis option chooses what token to use to refer to the topic.\n",(0,l.kt)("inlineCode",{parentName:"p"},'topicToken: "#"')," is incompatible with ",(0,l.kt)("inlineCode",{parentName:"p"},"recordAndTuple")," with ",(0,l.kt)("inlineCode",{parentName:"p"},'syntaxType: "hash"'),".\nSee ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-plugin-proposal-pipeline-operator"},"plugin-proposal-pipeline-operator"),"\nfor more information.")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"recordAndtuple"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"syntaxType")," (",(0,l.kt)("inlineCode",{parentName:"li"},"hash")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"bar"),", defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"hash"),")\nThere are two syntax variants for ",(0,l.kt)("inlineCode",{parentName:"li"},"recordAndTuple"),". They share exactly same runtime semantics.\n| SyntaxType | Record Example | Tuple Example |\n| --- | --- | --- |\n| ",(0,l.kt)("inlineCode",{parentName:"li"},'"hash"')," | ",(0,l.kt)("inlineCode",{parentName:"li"},"#{ a: 1 }")," | ",(0,l.kt)("inlineCode",{parentName:"li"},"#[1, 2]")," |\n| ",(0,l.kt)("inlineCode",{parentName:"li"},'"bar"')," | ",(0,l.kt)("code",null,"{","|"," a: 1 ","|","}")," | ",(0,l.kt)("code",null,"[|","1, 2","|]")," |\nSee ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/tc39/proposal-record-tuple/issues/10"},"Ergonomics of ",(0,l.kt)("inlineCode",{parentName:"a"},"#{}"),"/",(0,l.kt)("inlineCode",{parentName:"a"},"#[]"))," for more information."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"flow"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"all")," (",(0,l.kt)("inlineCode",{parentName:"li"},"boolean"),", default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")\nSome code has different meaning in Flow and in vanilla JavaScript. For example, ",(0,l.kt)("inlineCode",{parentName:"li"},"foo<T>(x)")," is parsed as a call expression with a type argument in Flow, but as a comparison (",(0,l.kt)("inlineCode",{parentName:"li"},"foo < T > x"),") accordingly to the ECMAScript specification. By default, ",(0,l.kt)("inlineCode",{parentName:"li"},"babel-parser")," parses those ambiguous constructs as Flow types only if the file starts with a ",(0,l.kt)("inlineCode",{parentName:"li"},"// @flow")," pragma.\nSet this option to ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," to always parse files as if ",(0,l.kt)("inlineCode",{parentName:"li"},"// @flow")," was specified."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"typescript")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dts")," (",(0,l.kt)("inlineCode",{parentName:"li"},"boolean"),", default ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")\nThis option will enable parsing within a TypeScript ambient context, where certain syntax have different rules (like ",(0,l.kt)("inlineCode",{parentName:"li"},".d.ts")," files and inside ",(0,l.kt)("inlineCode",{parentName:"li"},"declare module")," blocks). Please see ",(0,l.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"},"https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html")," and ",(0,l.kt)("a",{parentName:"li",href:"https://basarat.gitbook.io/typescript/type-system/intro"},"https://basarat.gitbook.io/typescript/type-system/intro")," for more information about ambient contexts."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"disallowAmbiguousJSXLike")," (",(0,l.kt)("inlineCode",{parentName:"li"},"boolean"),", default ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")\nEven when the ",(0,l.kt)("inlineCode",{parentName:"li"},"jsx")," plugin is not enabled, this option disallows using syntax that would be ambiguous with JSX (",(0,l.kt)("inlineCode",{parentName:"li"},"<X> y")," type assertions and ",(0,l.kt)("inlineCode",{parentName:"li"},"<X>() => {}")," type arguments). It matches the ",(0,l.kt)("inlineCode",{parentName:"li"},"tsc")," behavior when parsing ",(0,l.kt)("inlineCode",{parentName:"li"},".mts")," and ",(0,l.kt)("inlineCode",{parentName:"li"},".mjs")," files.")))),(0,l.kt)("h3",{id:"error-codes"},"Error codes"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"History"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Version"),(0,l.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"v7.14.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Added error codes"))))),(0,l.kt)("p",null,"Error codes are useful for handling the errors thrown by ",(0,l.kt)("inlineCode",{parentName:"p"},"@babel/parser"),"."),(0,l.kt)("p",null,"There are two error codes, ",(0,l.kt)("inlineCode",{parentName:"p"},"code")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"reasonCode"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"code"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Rough classification of errors (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"BABEL_PARSER_SYNTAX_ERROR"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"),")."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reasonCode"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Detailed classification of errors (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"MissingSemicolon"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"VarRedeclaration"),").")))),(0,l.kt)("p",null,"Example of using error codes with ",(0,l.kt)("inlineCode",{parentName:"p"},"errorRecovery"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'const { parse } = require("@babel/parser");\n\nconst ast = parse(`a b`, { errorRecovery: true });\n\nconsole.log(ast.errors[0].code); // BABEL_PARSER_SYNTAX_ERROR\nconsole.log(ast.errors[0].reasonCode); // MissingSemicolon\n')),(0,l.kt)("h3",{id:"faq"},"FAQ"),(0,l.kt)("h4",{id:"will-the-babel-parser-support-a-plugin-system"},"Will the Babel parser support a plugin system?"),(0,l.kt)("p",null,"Previous issues: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/issues/1351"},"#1351"),", ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/issues/6694"},"#6694"),"."),(0,l.kt)("p",null,"We currently aren't willing to commit to supporting the API for plugins or the resulting ecosystem (there is already enough work maintaining Babel's own plugin system). It's not clear how to make that API effective, and it would limit our ability to refactor and optimize the codebase."),(0,l.kt)("p",null,"Our current recommendation for those that want to create their own custom syntax is for users to fork the parser."),(0,l.kt)("p",null,"To consume your custom parser, you can add a plugin to your ",(0,l.kt)("a",{parentName:"p",href:"/babel-website/docs/options#plugins"},"options")," to call the parser via its npm package name or require it if using JavaScript,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'const parse = require("custom-fork-of-babel-parser-on-npm-here");\n\nmodule.exports = {\n  plugins: [\n    {\n      parserOverride(code, opts) {\n        return parse(code, opts);\n      },\n    },\n  ],\n};\n')))}u.isMDXComponent=!0}}]);