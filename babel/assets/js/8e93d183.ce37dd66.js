"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[242],{35318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,g=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},94212:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var a=n(25773),r=n(30808),i=(n(27378),n(35318)),o=["components"],s={id:"babel-helper-compilation-targets",title:"@babel/helper-compilation-targets",sidebar_label:"helper-compilation-targets"},l=void 0,p={unversionedId:"babel-helper-compilation-targets",id:"babel-helper-compilation-targets",title:"@babel/helper-compilation-targets",description:"@babel/helper-compilation-targets is a helper package that works with compilation targets (browsers or other environments like node) and compat tables (knowing what version supports a specific syntax). It is used by @babel/preset-env to determine which plugin should be enabled based on the targets option.",source:"@site/../docs/helper-compilation-targets.md",sourceDirName:".",slug:"/babel-helper-compilation-targets",permalink:"/babel-website/docs/babel-helper-compilation-targets",draft:!1,editUrl:"https://github.com/babel/website/edit/main/docs/../docs/helper-compilation-targets.md",tags:[],version:"current",frontMatter:{id:"babel-helper-compilation-targets",title:"@babel/helper-compilation-targets",sidebar_label:"helper-compilation-targets"},sidebar:"docs",previous:{title:"@babel/types",permalink:"/babel-website/docs/babel-types"},next:{title:"helper-module-imports",permalink:"/babel-website/docs/babel-helper-module-imports"}},u={},c=[{value:"filterItems",id:"filteritems",level:2},{value:"getTargets",id:"gettargets",level:2},{value:"isRequired",id:"isrequired",level:2}],m={toc:c},d="wrapper";function g(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@babel/helper-compilation-targets")," is a helper package that works with compilation targets (browsers or other environments like node) and compat tables (knowing what version supports a specific syntax). It is used by ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/preset-env")," to determine which plugin should be enabled based on the ",(0,i.kt)("a",{parentName:"p",href:"/babel-website/docs/options#targets"},(0,i.kt)("inlineCode",{parentName:"a"},"targets"))," option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'import {\n  filterItems,\n  default as getTargets,\n  isRequired,\n} from "@babel/helper-compilation-targets";\n')),(0,i.kt)("h2",{id:"filteritems"},"filterItems"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"function filterItems(\n  list: { [feature: string]: Targets },\n\n  // A set of plugins that should always be included\n  includes: Set<string>,\n\n  // A set of plugins that should always be excluded\n  excludes: Set<string>,\n  targets: Targets,\n\n  // A set of plugins that should always be included if `includes` is empty\n  defaultIncludes: Array<string> | null,\n\n  // A set of plugins that should always be excluded if `excludes` is empty\n  defaultExcludes?: Array<string> | null,\n\n  // A map from transform plugin to syntax plugin for backward compatibility with older `@babel/parser` versions\n  pluginSyntaxMap?: Map<string, string | null>\n): Set<string>; // A set of enabled plugins\n")),(0,i.kt)("p",null,"Given a compat data table ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/compat-data"),") and ",(0,i.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-preset-env#targets"},"browser targets")," ",(0,i.kt)("inlineCode",{parentName:"p"},"targets"),", return a set of required plugins."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'const compatData = {\n  "transform-feature-1": {\n    chrome: "1",\n    firefox: "1",\n  },\n  "transform-feature-2": {\n    chrome: "2",\n    firefox: "2",\n  },\n  "transform-feature-3": {\n    chrome: "3",\n    firefox: "3",\n  },\n  "transform-feature-4": {\n    chrome: "4",\n    firefox: "4",\n  },\n};\n\n// filter a set of plugins required when compiled to chrome 2\n// returns new Set(["transform-feature-3", "transform-feature-4"])\nfilterItems(compatData, new Set(), new Set(), {\n  chrome: 2,\n});\n\n// filter a set of plugins required when compiled to chrome 2 and firefox 1\n// returns new Set(["transform-feature-2", "transform-feature-3", "transform-feature-4"])\nfilterItems(compatData, new Set(), new Set(), {\n  chrome: 2,\n  firefox: 1,\n});\n\n// always include "transform-feature-2" and exclude "transform-feature-4"\n// returns new Set(["transform-feature-2", "transform-feature-3"])\nfilterItems(\n  compatData,\n  new Set(["transform-feature-2"]),\n  new Set(["transform-feature-4"]),\n  {\n    chrome: 2,\n  }\n);\n\n// syntax-feature-2 is required to allow older @babel/parser to parse\n// the feature-2 syntax supported in chrome 2\n\n// returns new Set(["syntax-feature-2", "transform-feature-3", "transform-feature-4"])\nfilterItems(\n  compatData,\n  new Set(),\n  new Set(),\n  {\n    chrome: 2,\n  },\n  null,\n  null,\n  new Map([["transform-feature-2", "syntax-feature-2"]])\n);\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"When a new ES feature reaches stage-4, it will be matured in ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/parser"),", which means it will always be parsed regardless of the plugin. However we need the syntax plugin for older ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/parser"),".")),(0,i.kt)("h2",{id:"gettargets"},"getTargets"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'type GetTargetsOption = {\n  // This is not the path of the config file, but the path where start searching it from\n  configPath?: string;\n\n  // The path of the config file\n  configFile?: string;\n\n  // The env to pass to browserslist\n  browserslistEnv?: string;\n\n  // true to disable config loading\n  ignoreBrowserslistConfig?: boolean;\n};\n\ntype InputTargets = {\n  ...Targets,\n\n  browsers?: Browsers,\n\n  // When `true`, this completely replaces the `browsers` option.\n  // When `intersect`, this is intersected with the `browsers`\n  // option (giving the higher browsers as the result).\n  esmodules?: boolean | "intersect",\n};\n\nfunction getTargets(\n  inputTargets: InputTargets = {},\n  options: GetTargetsOption = {}\n): Targets;\n')),(0,i.kt)("p",null,"Normalize user specified ",(0,i.kt)("inlineCode",{parentName:"p"},"targets")," to a list of supported targets. See also (",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),")","[preset-env.md#options]"," for ",(0,i.kt)("inlineCode",{parentName:"p"},"GetTargetsOption")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"// Return the default compilation targets\n// returns {}\ngetTargets();\n")),(0,i.kt)("p",null,"An empty compilation target is equivalent to ",(0,i.kt)("a",{parentName:"p",href:"/babel-website/docs/babel-preset-env#forceAllTransforms"},"force all transforms"),". The default compilation targets will be changed to browserlists query ",(0,i.kt)("a",{parentName:"p",href:"https://runkit.com/jlhwung/605cd58b2c44c6001a463717"},(0,i.kt)("inlineCode",{parentName:"a"},"defaults, not IE 11"))," in Babel 8."),(0,i.kt)("p",null,"One can also query the compilation targets with ES Module support, like ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/babel-preset-app"},(0,i.kt)("inlineCode",{parentName:"a"},"@vue/babel-preset-app"))," did in order to provide a set of modern targets."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'/* returns {\n  "android": "61.0.0",\n  "chrome": "61.0.0",\n  "edge": "16.0.0",\n  "firefox": "60.0.0",\n  "ios": "10.3.0",\n  "node": "13.2.0",\n  "opera": "48.0.0",\n  "safari": "10.1.0",\n  "samsung": "8.2.0",\n} */\ngetTargets({\n  esmodules: true,\n});\n')),(0,i.kt)("p",null,"Note: The ES Module compat data is generated from ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#browser_compatibility"},"MDN"),"."),(0,i.kt)("h2",{id:"isrequired"},"isRequired"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"function isRequired(\n  name: string,\n  targets: Targets,\n  {\n    compatData = pluginsCompatData,\n    includes,\n    excludes,\n  }: {\n    compatData?: { [feature: string]: Targets };\n    includes?: Set<string>;\n    excludes?: Set<string>;\n  } = {}\n): boolean;\n")),(0,i.kt)("p",null,"Given browser targets ",(0,i.kt)("inlineCode",{parentName:"p"},"targets"),", query the ",(0,i.kt)("inlineCode",{parentName:"p"},"compatData")," whether plugin ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," is required for compilation. When ",(0,i.kt)("inlineCode",{parentName:"p"},"compatData")," is not specified, the default data source is ",(0,i.kt)("inlineCode",{parentName:"p"},"@babel/compat-data")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="babel.config.js"',title:'"babel.config.js"'},'module.exports = api => {\n  const targets = api.targets();\n  // The targets have native optional chaining support\n  // if `proposal-optional-chaining` is _not_ required\n  const optionalChainingSupported = !isRequired(\n    "proposal-optional-chaining",\n    targets\n  );\n};\n')),(0,i.kt)("p",null,"Plugin authors can use ",(0,i.kt)("inlineCode",{parentName:"p"},"isRequired")," to optimize plugin output given different ",(0,i.kt)("inlineCode",{parentName:"p"},"targets"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="example-babel-plugin.js"',title:'"example-babel-plugin.js"'},'// a naive plugin replace `a.b` to `a != null && a.b`\nmodule.exports = api => {\n  const targets = api.targets();\n  // The targets have native optional chaining support\n  // if `proposal-optional-chaining` is _not_ required\n  const optionalChainingSupported = !isRequired(\n    "proposal-optional-chaining",\n    targets\n  );\n  const visited = new WeakSet();\n  return {\n    visitor: {\n      MemberExpression(path) {\n        if (path.matchesPattern("a.b")) {\n          if (visited.has(path.node)) return;\n          visited.add(path.node);\n          if (optionalChainingSupported) {\n            // When optional chaining is supported,\n            // output `a?.b` instead of `a != null && a.b`\n            path.replaceWith(api.templates`a?.b`);\n          } else {\n            path.replaceWith(api.templates`a != null && ${path.node}`);\n          }\n        }\n      },\n    },\n  };\n};\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/blob/962d81483ef6a57a4a3eca8230ae40795b695147/packages/babel-plugin-proposal-object-rest-spread/src/index.js#L23"},(0,i.kt)("inlineCode",{parentName:"a"},"@babel/plugin-proposal-object-rest-spread"))," uses ",(0,i.kt)("inlineCode",{parentName:"p"},"isRequired")," to determine whether targets already have native ",(0,i.kt)("inlineCode",{parentName:"p"},"Object.assign")," support."))}g.isMDXComponent=!0}}]);