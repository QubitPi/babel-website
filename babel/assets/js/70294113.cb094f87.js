"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5181],{35318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},16409:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c}});var a=n(25773),r=n(30808),o=(n(27378),n(35318)),l=["components"],i={layout:"post",title:"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform",author:"Nicol\xf2 Ribaudo",authorURL:"https://twitter.com/NicoloRibaudo",date:new Date("2020-03-20T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.9.0 Released"},s=void 0,p={permalink:"/babel-website/blog/2020/03/16/7.9.0",source:"@site/blog/2020-03-16-7.9.0.md",title:"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform",description:"While preparing the Babel 8.0.0 release (in the next months), we just finished working on a new minor release which includes updates related to @babel/preset-env, TypeScript 3.8, Flow, and JSX!",date:"2020-03-20T00:00:00.000Z",formattedDate:"March 20, 2020",tags:[],readingTime:8.11,hasTruncateMarker:!0,authors:[{name:"Nicol\xf2 Ribaudo",url:"https://twitter.com/NicoloRibaudo"}],frontMatter:{layout:"post",title:"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform",author:"Nicol\xf2 Ribaudo",authorURL:"https://twitter.com/NicoloRibaudo",date:"2020-03-20T00:00:00.000Z",categories:"announcements",share_text:"Babel 7.9.0 Released"},prevItem:{title:"7.10.0 Released: Class Fields in preset-env, '#private in' checks and better React tree-shaking",permalink:"/babel-website/blog/2020/05/25/7.10.0"},nextItem:{title:"7.8.0 Released: ECMAScript 2020, .mjs configuration files and @babel/cli improvements",permalink:"/babel-website/blog/2020/01/11/7.8.0"}},u={authorsImageUrls:[void 0]},c=[{value:"<code>@babel/preset-env</code>&#39;s <code>bugfixes</code> option (#11083)",id:"babelpreset-envs-bugfixes-option-11083",level:2},{value:"TypeScript 3.8: type-only imports and exports (#11171)",id:"typescript-38-type-only-imports-and-exports-11171",level:2},{value:"Flow <code>declare</code> fields (#11178)",id:"flow-declare-fields-11178",level:2},{value:"A new JSX transform (#11154)",id:"a-new-jsx-transform-11154",level:2}],m={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"While preparing the Babel 8.0.0 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/issues/10746"},"release")," (in the next months), we just finished working on a new minor release which includes updates related to ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),", TypeScript 3.8, Flow, and JSX!"),(0,o.kt)("p",null,"A few months ago, ",(0,o.kt)("a",{parentName:"p",href:"https://twitter.com/_developit"},"Jason Miller")," started working on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/preset-modules"},(0,o.kt)("inlineCode",{parentName:"a"},"@babel/preset-modules")),": an experiment to greatly reduce bundle sizes when using the ",(0,o.kt)("a",{parentName:"p",href:"https://css-tricks.com/differential-serving/"},(0,o.kt)("inlineCode",{parentName:"a"},"module"),"/",(0,o.kt)("inlineCode",{parentName:"a"},"nomodule")," pattern"),". We are excited to announce that its functionality has now been merged into ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),"! This means that its optimizations can be applied to all ",(0,o.kt)("inlineCode",{parentName:"p"},"preset-env")," targets values, without a separate preset."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note: These optimizations will be enabled by default in Babel 8. They can be manually enabled in Babel 7.9 by passing in the option ",(0,o.kt)("inlineCode",{parentName:"em"},"{ bugfixes: true }")," to ",(0,o.kt)("inlineCode",{parentName:"em"},"preset-env"),".")),(0,o.kt)("p",null,"This release also has full support for ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html"},"TypeScript 3.8"),", which introduced explicit type-only imports and exports (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"export type { foo }"),"), and for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/flow/blob/master/Changelog.md#01201"},"Flow 0.120"),", which introduced the ",(0,o.kt)("inlineCode",{parentName:"p"},"declare")," modifier for class fields (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"class C { declare foo: string }"),")."),(0,o.kt)("p",null,"We also worked with the React team to provide a new ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md"},"JSX transform"),", which will make it possible for React and React-like libraries to further optimize the creation of JSX elements with the addition of the ",(0,o.kt)("inlineCode",{parentName:"p"},"jsx")," function vs. ",(0,o.kt)("inlineCode",{parentName:"p"},"React.createElement"),"."),(0,o.kt)("p",null,"Lastly, ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/parser")," now supports an additional ECMAScript proposal: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-record-tuple"},"Record & Tuple"),". Please note that this is only parser support, and the transforms are still being worked on."),(0,o.kt)("p",null,"You can read the whole changelog ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/releases/tag/v7.9.0"},"on GitHub"),"."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Special thanks go to ",(0,o.kt)("a",{parentName:"p",href:"https://twitter.com/lunaruan"},"Luna Ruan")," from the React Team (",(0,o.kt)("a",{parentName:"p",href:"https://opensource.facebook.com/"},"Facebook"),") for contributing the new JSX transform, and ",(0,o.kt)("a",{parentName:"p",href:"https://twitter.com/rickbutton"},"Rick Button")," (",(0,o.kt)("a",{parentName:"p",href:"https://www.techatbloomberg.com/"},"Bloomberg"),") who implemented parser support for the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-record-tuple"},"Record & Tuple")," proposal!"),(0,o.kt)("p",null,"If you or your company want to support Babel and the evolution of JavaScript, but aren't sure how, you can donate to us on our ",(0,o.kt)("a",{parentName:"p",href:"https://opencollective.com/babel"},"Open Collective")," and, better yet, work with us on the implementation of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/proposals"},"new ECMAScript proposals")," directly! As a volunteer-driven project, we rely on the community's support to fund our efforts in supporting the wide range of JavaScript users. Reach out at ",(0,o.kt)("a",{parentName:"p",href:"mailto:team@babeljs.io"},"team@babeljs.io")," if you'd like to discuss more!"),(0,o.kt)("h2",{id:"babelpreset-envs-bugfixes-option-11083"},(0,o.kt)("inlineCode",{parentName:"h2"},"@babel/preset-env"),"'s ",(0,o.kt)("inlineCode",{parentName:"h2"},"bugfixes")," option (",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/babel/babel/pull/11083"},"#11083"),")"),(0,o.kt)("p",null,"The new ",(0,o.kt)("inlineCode",{parentName:"p"},"bugfixes")," option in ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env")," is the successor to using ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-modules")," directly."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you want more context about the issues that this change helps with, we'd suggest you listen to (or read) the recently published podcast episodes with Jason: ",(0,o.kt)("a",{parentName:"p",href:"https://podcast.babeljs.io/preset-env/"},"#2 Modern JavaScript and the Future of preset-env")," and ",(0,o.kt)("a",{parentName:"p",href:"https://podcast.babeljs.io/dependencies"},"#3 Compiling Your Dependencies"),".")),(0,o.kt)("p",null,"Until now, ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),' (and Babel plugins in general) grouped ECMAScript syntax features into collections of closely related smaller features. These groups can be large and include a lot of edge cases. For example, the "function arguments" group and plugin includes destructured, default and rest parameters.'),(0,o.kt)("p",null,"From this grouping information, Babel enables or disables each group based on the browser support target you specify to ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),"\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"targets")," option."),(0,o.kt)("p",null,"Here's the ",(0,o.kt)("em",{parentName:"p"},"problem"),": if any version of any browser in that list contains a bug triggered by modern syntax, the only solution (that we considered at the time) was to enable the corresponding transform group that fixes that bug."),(0,o.kt)("p",null,"Over time more bugs would eventually be uncovered and reported to our issues, which caused ",(0,o.kt)("inlineCode",{parentName:"p"},"preset-env")," to output more code for the sake of these edge cases. In the worst case, it meant that the output was the same as  just compiling everything to ES5, which ",(0,o.kt)("inlineCode",{parentName:"p"},"preset-env")," was created to help prevent."),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"bugfixes: true")," option is enabled, ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env")," takes a different approach: it transpiles the broken syntax to the closest ",(0,o.kt)("em",{parentName:"p"},"non-broken modern syntax"),"."),(0,o.kt)("p",null,"For example: all of the new syntax features relating to function parameters are grouped into the same Babel plugin (",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-function-parameters"),"). When targeting ",(0,o.kt)("inlineCode",{parentName:"p"},"edge 16"),", it has a bug related to parsing shorthand destructured parameters with default values within arrow functions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"// this breaks in Edge 16:\nconst foo = ({ a = 1 }) => {};\n\n// .. but this doesn't:\nfunction foo({ a = 1, b }, ...args) {}\n\n// ... and neither does this:\nconst foo = ({ a: a = 1 }) => {};\n")),(0,o.kt)("p",null,"This means that if we give ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env")," this input and targeted Edge 16:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"const foo = ({ a = 1 }, b = 2, ...args) => [a, b, args];\n")),(0,o.kt)("p",null,"It transforms it down to ES5-like parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"const foo = function foo(_ref, b) {\n let { a = 1 } = _ref;\n\n if (b === void 0) { b = 2; }\n\n for (\n   var _len = arguments.length,\n     args = new Array(_len > 2 ? _len - 2 : 0),\n     _key = 2;  _key < _len; _key++\n ) {\n   args[_key - 2] = arguments[_key];\n }\n\n return [a, b, args];\n};\n")),(0,o.kt)("p",null,"However, if we enable the ",(0,o.kt)("inlineCode",{parentName:"p"},"bugfixes")," option, it only transforms the broken syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},"const foo = ({ a: a = 1 }, b = 2, ...args) => [a, b, args];\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You can see this example in action at our ",(0,o.kt)("a",{parentName:"p",href:"https://babeljs.io/repl#?browsers=Edge%2016&code_lz=PTAEFEBMHMFNQIwDZQAsCGBnU7QCMBXaUAdzAAd0AnTASwDtjNUB7KgFw3slElk3ZUCAY3YEqsSACgQoSlXQBbWO1g1SYPgDN0BADbtQAN3R6C_UrU4McVKixKgtBeqNot6mKcI8CnLFlAAXlAACgBvHGDEUABfABp8aIAmRIA6DOpoTABKYIA-UABtdES8RKzMAF0AbiA&sourceType=unambiguous&lineWrap=true&presets=env%2Cenv&prettier=true&version=7.9.0"},"REPL"))),(0,o.kt)("p",null,"You can enable this option today by adding it to ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env")," in your configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonls"},'{\n  "presets": [\n    ["@babel/preset-env", {\n      "targets": { "esmodules": true }, // Use the targets that you was already using\n      "bugfixes": true\n    }]\n  ]\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u2139\ufe0f Currently, the ",(0,o.kt)("inlineCode",{parentName:"p"},"bugfixes")," option gives the best results when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"esmodules: true")," target, which allows you to target the browsers with native ES modules support and use the ",(0,o.kt)("a",{parentName:"p",href:"https://css-tricks.com/differential-serving/"},(0,o.kt)("inlineCode",{parentName:"a"},"module"),"/",(0,o.kt)("inlineCode",{parentName:"a"},"nomodule")," pattern"),". We hope to continue improving it over the next few releases, and enable it by default in Babel 8.")),(0,o.kt)("p",null,"Moving forward, we would like to work with the community (including browsers) to allow for this kind of approach to work smoothly as we continually transition in JavaScript's development. In the ideal scenario, Babel would be able to implement and help influence the future of new proposals as they are suggested and refined, and smooth over these edge cases for existing standards so that the minimum compiled output is possible for all users of JavaScript based on their targets."),(0,o.kt)("h2",{id:"typescript-38-type-only-imports-and-exports-11171"},"TypeScript 3.8: type-only imports and exports (",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/babel/babel/pull/11171"},"#11171"),")"),(0,o.kt)("p",null,"You can now explicitly mark imports and exports as type-only, similarly to what you can already do in Flow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import type { SomeThing } from "./some-module.js";\n\nexport type { SomeThing };\n')),(0,o.kt)("p",null,"By doing so, Babel can safely decide which imports or exports are used for types and which are values."),(0,o.kt)("p",null,"Since Babel doesn't analyze types and works on a per-file basis (similarly to TypeScript's ",(0,o.kt)("inlineCode",{parentName:"p"},"--isolatedModules")," option), until now ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-typescript")," handled imports not used as values as if they were type-only."),(0,o.kt)("p",null,"Starting from Babel 7.9 you can use the new ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," modifier without any configuration change."),(0,o.kt)("p",null,"We recommend configuring ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-typescript")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-typescript")," so that it only considers imports as type-only when there is the explicit ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," keyword, similarly to TypeScript's ",(0,o.kt)("inlineCode",{parentName:"p"},"--importsNotUsedAsValues preserve")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "presets": [\n    ["@babel/preset-typescript", {\n      "onlyRemoveTypeImports": true\n    }]\n  ]\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u2139\ufe0f These features were contributed by the Babel team together, and by ",(0,o.kt)("a",{parentName:"p",href:"https://twitter.com/sidntrivedi012/"},"Siddhant N Trivedi"),". If you have interested in seeing how it's all done, please check how we did it ",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/playlist?list=PLoB4QYcbtyGbpTpRs_ZZLTVxi96iCl7-A"},"on YouTube"),"!")),(0,o.kt)("h2",{id:"flow-declare-fields-11178"},"Flow ",(0,o.kt)("inlineCode",{parentName:"h2"},"declare")," fields (",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/babel/babel/pull/11178"},"#11178"),")"),(0,o.kt)("p",null,"The class fields proposal specifies uninitialized class fields are initialized to ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),": this is different from what Babel does with Flow, because it simply ignores them."),(0,o.kt)("p",null,"For this reason, the Flow team has added support for the ",(0,o.kt)("inlineCode",{parentName:"p"},"declare")," modfier for class fields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="JavaScript"',title:'"JavaScript"'},'class Foo {\n  x: ?string; // A "real" field\n  declare y: number; // A type-only field\n}\n')),(0,o.kt)("p",null,"In the above example, only ",(0,o.kt)("inlineCode",{parentName:"p"},"y")," should be completely removed by Babel."),(0,o.kt)("p",null,"To avoid breaking changes, we introduced support for declare in class fields behind a flag: ",(0,o.kt)("inlineCode",{parentName:"p"},'"allowDeclareFields"'),", supported by both ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-flow")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-flow"),". This will become default behavior in Babel 8, so it is recommended that you migrate your config to use it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "presets": [\n    ["@babel/preset-flow", {\n      "allowDeclareFields": true\n    }]\n  ]\n}\n')),(0,o.kt)("h2",{id:"a-new-jsx-transform-11154"},"A new JSX transform (",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/babel/babel/pull/11154"},"#11154"),")"),(0,o.kt)("p",null,"The React team created an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md"},"RFC")," back in February of last year to discuss simplifying element creation."),(0,o.kt)("p",null,"In a future stable release, React will support a group of new functions for instantiating JSX elements as an alternative to the legacy general-purpose ",(0,o.kt)("inlineCode",{parentName:"p"},"React.createElement")," function. This will allow optimizing them better in the future."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u2139\ufe0f While it's not released in a stable release yet, you can try it out on the ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/blog/2019/10/22/react-release-channels.html#experimental-channel"},"experimental")," React release channel:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Shell"',title:'"Shell"'},"npm install react@experimental react-dom@experimental\n"))),(0,o.kt)("p",null,"We worked with the team to finish a new transform that supports compiling JSX to these new functions. It also automatically imports ",(0,o.kt)("inlineCode",{parentName:"p"},'"react"')," (or other libraries which support the new API) when needed, so you don't have to manually include it anymore."),(0,o.kt)("p",null,"As an example, this input:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="JSX"',title:'"JSX"'},"function Foo() {\n  return <div />;\n}\n")),(0,o.kt)("p",null,"would turn into:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="JSX"',title:'"JSX"'},'import { jsx as _jsx } from "react/jsx-runtime";\nfunction Foo() {\n  return _jsx("div", ...);\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," The functions inside ",(0,o.kt)("inlineCode",{parentName:"p"},"react/jsx-runtime")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"react/jsx-dev-runtime")," are not meant to be used outside the ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-react-jsx")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-react-jsx-development")," plugins themselves.")),(0,o.kt)("p",null,"In summary (and please check the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md"},"RFC")," for more information), the transform will:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Always pass children as props."),(0,o.kt)("li",{parentName:"ul"},"Pass ",(0,o.kt)("inlineCode",{parentName:"li"},"key")," separately from other props."),(0,o.kt)("li",{parentName:"ul"},"In DEV,",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Pass a flag determining if it was static or not."),(0,o.kt)("li",{parentName:"ul"},"Pass ",(0,o.kt)("inlineCode",{parentName:"li"},"__source")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"__self")," separately from other props.")))),(0,o.kt)("p",null,"Usage: You can enable this new transform by passing ",(0,o.kt)("inlineCode",{parentName:"p"},'{ "runtime": "automatic" }')," (as opposed to ",(0,o.kt)("inlineCode",{parentName:"p"},'"classic"'),") to ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-react")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-react-jsx"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="babel.config.json"',title:'"babel.config.json"'},'{\n  "presets": [\n    ["@babel/preset-react", {\n      "runtime": "automatic"\n    }]\n  ]\n}\n')),(0,o.kt)("p",null,"And starting from Babel 8, ",(0,o.kt)("inlineCode",{parentName:"p"},'"automatic"')," will be the default runtime."),(0,o.kt)("p",null,"You can also enable development mode for this new transform by using the new ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/plugin-transform-react-jsx-development")," transform or by passing ",(0,o.kt)("inlineCode",{parentName:"p"},'{ "development": true, "runtime": "automatic" }')," to ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-react"),"."),(0,o.kt)("p",null,"You can read mode about this new transform in ",(0,o.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/babel-preset-react"},"the docs"),"."))}d.isMDXComponent=!0}}]);