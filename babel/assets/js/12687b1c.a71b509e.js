"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[26],{35318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},66188:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(25773),a=n(30808),o=(n(27378),n(35318)),i=["components"],l={layout:"post",title:"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform",author:"Nicol\xf2 Ribaudo",authorURL:"https://twitter.com/NicoloRibaudo",date:new Date("2020-03-20T00:00:00.000Z"),categories:"announcements",share_text:"Babel 7.9.0 Released"},p=void 0,s={permalink:"/babel-website/blog/2020/03/16/7.9.0",source:"@site/blog/2020-03-16-7.9.0.md",title:"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform",description:"While preparing the Babel 8.0.0 release (in the next months), we just finished working on a new minor release which includes updates related to @babel/preset-env, TypeScript 3.8, Flow, and JSX!",date:"2020-03-20T00:00:00.000Z",formattedDate:"March 20, 2020",tags:[],readingTime:8.11,hasTruncateMarker:!0,authors:[{name:"Nicol\xf2 Ribaudo",url:"https://twitter.com/NicoloRibaudo"}],frontMatter:{layout:"post",title:"7.9.0 Released: Smaller preset-env output, Typescript 3.8 support and a new JSX transform",author:"Nicol\xf2 Ribaudo",authorURL:"https://twitter.com/NicoloRibaudo",date:"2020-03-20T00:00:00.000Z",categories:"announcements",share_text:"Babel 7.9.0 Released"},prevItem:{title:"7.10.0 Released: Class Fields in preset-env, '#private in' checks and better React tree-shaking",permalink:"/babel-website/blog/2020/05/25/7.10.0"},nextItem:{title:"7.8.0 Released: ECMAScript 2020, .mjs configuration files and @babel/cli improvements",permalink:"/babel-website/blog/2020/01/11/7.8.0"}},c={authorsImageUrls:[void 0]},u=[],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"While preparing the Babel 8.0.0 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/issues/10746"},"release")," (in the next months), we just finished working on a new minor release which includes updates related to ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),", TypeScript 3.8, Flow, and JSX!"),(0,o.kt)("p",null,"A few months ago, ",(0,o.kt)("a",{parentName:"p",href:"https://twitter.com/_developit"},"Jason Miller")," started working on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/preset-modules"},(0,o.kt)("inlineCode",{parentName:"a"},"@babel/preset-modules")),": an experiment to greatly reduce bundle sizes when using the ",(0,o.kt)("a",{parentName:"p",href:"https://css-tricks.com/differential-serving/"},(0,o.kt)("inlineCode",{parentName:"a"},"module"),"/",(0,o.kt)("inlineCode",{parentName:"a"},"nomodule")," pattern"),". We are excited to announce that its functionality has now been merged into ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/preset-env"),"! This means that its optimizations can be applied to all ",(0,o.kt)("inlineCode",{parentName:"p"},"preset-env")," targets values, without a separate preset."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note: These optimizations will be enabled by default in Babel 8. They can be manually enabled in Babel 7.9 by passing in the option ",(0,o.kt)("inlineCode",{parentName:"em"},"{ bugfixes: true }")," to ",(0,o.kt)("inlineCode",{parentName:"em"},"preset-env"),".")),(0,o.kt)("p",null,"This release also has full support for ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html"},"TypeScript 3.8"),", which introduced explicit type-only imports and exports (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"export type { foo }"),"), and for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/flow/blob/master/Changelog.md#01201"},"Flow 0.120"),", which introduced the ",(0,o.kt)("inlineCode",{parentName:"p"},"declare")," modifier for class fields (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"class C { declare foo: string }"),")."),(0,o.kt)("p",null,"We also worked with the React team to provide a new ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md"},"JSX transform"),", which will make it possible for React and React-like libraries to further optimize the creation of JSX elements with the addition of the ",(0,o.kt)("inlineCode",{parentName:"p"},"jsx")," function vs. ",(0,o.kt)("inlineCode",{parentName:"p"},"React.createElement"),"."),(0,o.kt)("p",null,"Lastly, ",(0,o.kt)("inlineCode",{parentName:"p"},"@babel/parser")," now supports an additional ECMAScript proposal: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-record-tuple"},"Record & Tuple"),". Please note that this is only parser support, and the transforms are still being worked on."),(0,o.kt)("p",null,"You can read the whole changelog ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/releases/tag/v7.9.0"},"on GitHub"),"."))}d.isMDXComponent=!0}}]);